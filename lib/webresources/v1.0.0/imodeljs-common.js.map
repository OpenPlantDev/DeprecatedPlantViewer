{"version":3,"file":"imodeljs-common.js","sources":["file:///webpack/universalModuleDefinition","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\base64-js\\1.3.0\\node_modules\\base64-js\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\buffer\\4.9.1\\node_modules\\buffer\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\ieee754\\1.1.13\\node_modules\\ieee754\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\isarray\\1.0.0\\node_modules\\isarray\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\os-browserify\\0.3.0\\node_modules\\os-browserify\\browser.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\process\\0.11.10\\node_modules\\process\\browser.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\punycode\\1.4.1\\node_modules\\punycode\\punycode.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\querystring-es3\\0.2.1\\node_modules\\querystring-es3\\decode.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\querystring-es3\\0.2.1\\node_modules\\querystring-es3\\encode.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\querystring-es3\\0.2.1\\node_modules\\querystring-es3\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\safe-buffer\\5.1.2\\node_modules\\safe-buffer\\index.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\semver\\5.7.0\\node_modules\\semver\\semver.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\string_decoder\\1.2.0\\node_modules\\string_decoder\\lib\\string_decoder.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\url-search-params\\1.1.0\\node_modules\\url-search-params\\build\\url-search-params.node.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\url\\0.11.0\\node_modules\\url\\url.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\url\\0.11.0\\node_modules\\url\\util.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\webpack\\4.32.2\\node_modules\\webpack\\buildin\\global.js","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\webpack\\4.32.2\\node_modules\\webpack\\buildin\\module.js","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\CloudStorage.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\CloudStorageTileCache.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Code.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\ColorDef.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\CommonLoggerCategory.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\ECSqlTypes.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\ElementProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\EntityProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\FeatureGates.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\FeatureIndex.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Fonts.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Frustum.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\GeoCoordinateServices.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\IModel.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\IModelError.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\IModelVersion.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Image.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Lighting.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\MaterialProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\OctEncodedNormal.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Paging.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\QPoint.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\Render.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\RpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\RpcManager.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\SpatialClassificationProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\SubCategoryAppearance.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\TextureProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\ViewProps.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\AreaPattern.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\Cartographic.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\GeometryStream.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\LineStyle.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\Placement.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\geometry\\TextString.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\imodeljs-common.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\DevToolsRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\IModelReadRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\IModelTileRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\IModelWriteRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\SnapshotIModelRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\TestRpcManager.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\WipRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcConfiguration.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcConstants.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcControl.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcInvocation.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcMarshaling.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcOperation.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcPendingQueue.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcProtocol.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcRegistry.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\core\\RpcRequest.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\electron\\ElectronIpcTransport.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\electron\\ElectronRpcManager.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\electron\\ElectronRpcProtocol.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\electron\\ElectronRpcRequest.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\mobile\\MobileRpcManager.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\mobile\\MobileRpcProtocol.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\mobile\\MobileRpcRequest.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\BentleyCloudRpcManager.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\BentleyCloudRpcProtocol.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\OpenAPI.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\RpcMultipart.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\WebAppRpcLogging.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\WebAppRpcProtocol.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\WebAppRpcRequest.ts","file:///D:\\vsts_b\\5\\s\\core\\common\\src\\rpc\\web\\multipart\\RpcMultipartParser.ts","file:///external \"bentleyjs_core\"","file:///external \"geometry_core\"","file:///external \"imodeljs_clients\""],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"bentleyjs_core\"), require(\"geometry_core\"), require(\"imodeljs_clients\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"imodeljs_common\", [\"bentleyjs_core\", \"geometry_core\", \"imodeljs_clients\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"imodeljs_common\"] = factory(require(\"bentleyjs_core\"), require(\"geometry_core\"), require(\"imodeljs_clients\"));\n\telse\n\t\troot[\"imodeljs_common\"] = factory(root[\"bentleyjs_core\"], root[\"geometry_core\"], root[\"imodeljs_clients\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__, __WEBPACK_EXTERNAL_MODULE__bentley_geometry_core__, __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_clients__) {\nreturn ","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar src = exports.src = []\nvar R = 0\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\nvar NUMERICIDENTIFIERLOOSE = R++\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')'\n\nvar MAINVERSIONLOOSE = R++\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')'\n\nvar PRERELEASEIDENTIFIERLOOSE = R++\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))'\n\nvar PRERELEASELOOSE = R++\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?'\n\nsrc[FULL] = '^' + FULLPLAIN + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?'\n\nvar LOOSE = R++\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$'\n\nvar GTLT = R++\nsrc[GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\nvar XRANGEIDENTIFIER = R++\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\nvar XRANGEPLAIN = R++\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?'\n\nvar XRANGEPLAINLOOSE = R++\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?'\n\nvar XRANGE = R++\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$'\nvar XRANGELOOSE = R++\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++\nsrc[COERCE] = '(?:^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++\nsrc[LONETILDE] = '(?:~>?)'\n\nvar TILDETRIM = R++\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+'\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')\nvar tildeTrimReplace = '$1~'\n\nvar TILDE = R++\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'\nvar TILDELOOSE = R++\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++\nsrc[LONECARET] = '(?:\\\\^)'\n\nvar CARETTRIM = R++\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+'\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')\nvar caretTrimReplace = '$1^'\n\nvar CARET = R++\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'\nvar CARETLOOSE = R++\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$'\nvar COMPARATOR = R++\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\nvar HYPHENRANGELOOSE = R++\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? re[LOOSE] : re[FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compare(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.rcompare(a, b, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1]\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  range = range.trim()\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, re[COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return thisComparators.every(function (thisComparator) {\n      return range.set.some(function (rangeComparators) {\n        return rangeComparators.every(function (rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options)\n        })\n      })\n    })\n  })\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? re[TILDELOOSE] : re[TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? re[CARETLOOSE] : re[CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '')\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  var match = version.match(re[COERCE])\n\n  if (match == null) {\n    return null\n  }\n\n  return parse(match[1] +\n    '.' + (match[2] || '0') +\n    '.' + (match[3] || '0'))\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","/*!\nCopyright (C) 2015-2017 Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n'use strict';\n\nfunction URLSearchParams(query) {\n  var\n    index, key, value,\n    pairs, i, length,\n    dict = Object.create(null)\n  ;\n  this[secret] = dict;\n  if (!query) return;\n  if (typeof query === 'string') {\n    if (query.charAt(0) === '?') {\n      query = query.slice(1);\n    }\n    for (\n      pairs = query.split('&'),\n      i = 0,\n      length = pairs.length; i < length; i++\n    ) {\n      value = pairs[i];\n      index = value.indexOf('=');\n      if (-1 < index) {\n        appendTo(\n          dict,\n          decode(value.slice(0, index)),\n          decode(value.slice(index + 1))\n        );\n      } else if (value.length){\n        appendTo(\n          dict,\n          decode(value),\n          ''\n        );\n      }\n    }\n  } else {\n    if (isArray(query)) {\n      for (\n        i = 0,\n        length = query.length; i < length; i++\n      ) {\n        value = query[i];\n        appendTo(dict, value[0], value[1]);\n      }\n    } else if (query.forEach) {\n      query.forEach(addEach, dict);\n    } else {\n      for (key in query) {\n         appendTo(dict, key, query[key]);\n      }\n    }\n  }\n}\n\nvar\n  isArray = Array.isArray,\n  URLSearchParamsProto = URLSearchParams.prototype,\n  find = /[!'\\(\\)~]|%20|%00/g,\n  plus = /\\+/g,\n  replace = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  },\n  replacer = function (match) {\n    return replace[match];\n  },\n  secret = '__URLSearchParams__:' + Math.random()\n;\n\nfunction addEach(value, key) {\n  /* jshint validthis:true */\n  appendTo(this, key, value);\n}\n\nfunction appendTo(dict, name, value) {\n  var res = isArray(value) ? value.join(',') : value;\n  if (name in dict)\n    dict[name].push(res);\n  else\n    dict[name] = [res];\n}\n\nfunction decode(str) {\n  return decodeURIComponent(str.replace(plus, ' '));\n}\n\nfunction encode(str) {\n  return encodeURIComponent(str).replace(find, replacer);\n}\n\nURLSearchParamsProto.append = function append(name, value) {\n  appendTo(this[secret], name, value);\n};\n\nURLSearchParamsProto.delete = function del(name) {\n  delete this[secret][name];\n};\n\nURLSearchParamsProto.get = function get(name) {\n  var dict = this[secret];\n  return name in dict ? dict[name][0] : null;\n};\n\nURLSearchParamsProto.getAll = function getAll(name) {\n  var dict = this[secret];\n  return name in dict ? dict[name].slice(0) : [];\n};\n\nURLSearchParamsProto.has = function has(name) {\n  return name in this[secret];\n};\n\nURLSearchParamsProto.set = function set(name, value) {\n  this[secret][name] = ['' + value];\n};\n\nURLSearchParamsProto.forEach = function forEach(callback, thisArg) {\n  var dict = this[secret];\n  Object.getOwnPropertyNames(dict).forEach(function(name) {\n    dict[name].forEach(function(value) {\n      callback.call(thisArg, value, name, this);\n    }, this);\n  }, this);\n};\n\n/*\nURLSearchParamsProto.toBody = function() {\n  return new Blob(\n    [this.toString()],\n    {type: 'application/x-www-form-urlencoded'}\n  );\n};\n*/\n\nURLSearchParamsProto.toJSON = function toJSON() {\n  return {};\n};\n\nURLSearchParamsProto.toString = function toString() {\n  var dict = this[secret], query = [], i, key, name, value;\n  for (key in dict) {\n    name = encode(key);\n    for (\n      i = 0,\n      value = dict[key];\n      i < value.length; i++\n    ) {\n      query.push(name + '=' + encode(value[i]));\n    }\n  }\n  return query.join('&');\n};\n\nURLSearchParams = (module.exports = global.URLSearchParams || URLSearchParams);\n\n(function (URLSearchParamsProto) {\n\n  var iterable = (function () {\n    try {\n      return !!Symbol.iterator;\n    } catch(error) {\n      return false;\n    }\n  }());\n\n  // mostly related to issue #24\n  if (!('forEach' in URLSearchParamsProto)) {\n    URLSearchParamsProto.forEach = function forEach(callback, thisArg) {\n      var names = Object.create(null);\n      this.toString()\n          .replace(/=[\\s\\S]*?(?:&|$)/g, '=')\n          .split('=')\n          .forEach(function (name) {\n            if (!name.length || name in names) return;\n            (names[name] = this.getAll(name)).forEach(function(value) {\n              callback.call(thisArg, value, name, this);\n            }, this);\n          }, this);\n    };\n  }\n\n  if (!('keys' in URLSearchParamsProto)) {\n    URLSearchParamsProto.keys = function keys() {\n      var items = [];\n      this.forEach(function(value, name) { items.push(name); });\n      var iterator = {\n        next: function() {\n          var value = items.shift();\n          return {done: value === undefined, value: value};\n        }\n      };\n\n      if (iterable) {\n        iterator[Symbol.iterator] = function() {\n          return iterator;\n        };\n      }\n\n      return iterator;\n    };\n  }\n\n  if (!('values' in URLSearchParamsProto)) {\n    URLSearchParamsProto.values = function values() {\n      var items = [];\n      this.forEach(function(value) { items.push(value); });\n      var iterator = {\n        next: function() {\n          var value = items.shift();\n          return {done: value === undefined, value: value};\n        }\n      };\n\n      if (iterable) {\n        iterator[Symbol.iterator] = function() {\n          return iterator;\n        };\n      }\n\n      return iterator;\n    };\n  }\n\n  if (!('entries' in URLSearchParamsProto)) {\n    URLSearchParamsProto.entries = function entries() {\n      var items = [];\n      this.forEach(function(value, name) { items.push([name, value]); });\n      var iterator = {\n        next: function() {\n          var value = items.shift();\n          return {done: value === undefined, value: value};\n        }\n      };\n\n      if (iterable) {\n        iterator[Symbol.iterator] = function() {\n          return iterator;\n        };\n      }\n\n      return iterator;\n    };\n  }\n\n  if (iterable && !(Symbol.iterator in URLSearchParamsProto)) {\n    URLSearchParamsProto[Symbol.iterator] = URLSearchParamsProto.entries;\n  }\n\n  if (!('sort' in URLSearchParamsProto)) {\n    URLSearchParamsProto.sort = function sort() {\n      var\n        entries = this.entries(),\n        entry = entries.next(),\n        done = entry.done,\n        keys = [],\n        values = Object.create(null),\n        i, key, value\n      ;\n      while (!done) {\n        value = entry.value;\n        key = value[0];\n        keys.push(key);\n        if (!(key in values)) {\n          values[key] = [];\n        }\n        values[key].push(value[1]);\n        entry = entries.next();\n        done = entry.done;\n      }\n      // not the champion in efficiency\n      // but these two bits just do the job\n      keys.sort();\n      for (i = 0; i < keys.length; i++) {\n        this.delete(keys[i]);\n      }\n      for (i = 0; i < keys.length; i++) {\n        key = keys[i];\n        this.append(key, values[key].shift());\n      }\n    };\n  }\n\n}(URLSearchParams.prototype));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @beta */\nexport enum CloudStorageProvider {\n  Azure,\n  Amazon,\n  AliCloud,\n}\n\n/** @beta */\nexport interface CloudStorageContainerDescriptor {\n  provider?: CloudStorageProvider;\n  name: string;\n}\n\n/** @beta */\nexport interface CloudStorageContainerUrl {\n  descriptor: CloudStorageContainerDescriptor;\n  valid: number;\n  expires: number;\n  url: string;\n  method?: string;\n  headers?: Record<string, string>;\n}\n\n/** @beta */\nexport namespace CloudStorageContainerUrl {\n  export function empty(): CloudStorageContainerUrl {\n    return {\n      descriptor: { name: \"\" },\n      valid: 0,\n      expires: 0,\n      url: \"\",\n    };\n  }\n}\n\n/** @beta */\nexport abstract class CloudStorageCache<TContentId, TContentType> {\n  private _containers: Map<string, CloudStorageContainerUrl>;\n\n  public abstract formContainerName(id: TContentId): string;\n  public abstract formResourceName(id: TContentId): string;\n  protected abstract obtainContainerUrl(id: TContentId, descriptor: CloudStorageContainerDescriptor): Promise<CloudStorageContainerUrl>;\n  protected abstract instantiateResource(response: Response): Promise<TContentType | undefined>;\n  protected supplyUrlBase(_container: CloudStorageContainerUrl, _id: TContentId): string | undefined { return undefined; }\n\n  public constructor() {\n    this._containers = new Map();\n  }\n\n  public async retrieve(id: TContentId): Promise<TContentType | undefined> {\n    return new Promise(async (resolve) => {\n      try {\n        const container = await this.getContainer(id);\n        if (!container.url) {\n          resolve(undefined);\n          return;\n        }\n\n        const response = await this.requestResource(container, id);\n        if (response.ok) {\n          const content = await this.instantiateResource(response);\n          resolve(content);\n        } else {\n          resolve(undefined);\n        }\n      } catch (_err) {\n        // todo: log this?\n        resolve(undefined);\n      }\n    });\n  }\n\n  protected async requestResource(container: CloudStorageContainerUrl, id: TContentId): Promise<Response> {\n    const url = new URL(container.url, this.supplyUrlBase(container, id));\n    url.pathname += `/${this.formResourceName(id)}`;\n\n    const init: RequestInit = {\n      headers: container.headers,\n      method: \"GET\",\n    };\n\n    return fetch(url.toString(), init);\n  }\n\n  private _pendingContainerRequests: Map<string, Promise<CloudStorageContainerUrl>> = new Map();\n\n  protected async getContainer(id: TContentId): Promise<CloudStorageContainerUrl> {\n    const now = new Date().getTime();\n    const name = this.formContainerName(id);\n\n    let container = this._containers.get(name);\n    if (container && container.url && (container.valid > now || container.expires < now)) {\n      container = undefined;\n      this._containers.delete(name);\n    }\n\n    if (!container) {\n      let request = this._pendingContainerRequests.get(name);\n      if (!request) {\n        request = new Promise(async (resolve, reject) => {\n          try {\n            container = await this.obtainContainerUrl(id, { name });\n            this._containers.set(name, container);\n            this._pendingContainerRequests.delete(name);\n            resolve(container);\n          } catch (err) {\n            this._pendingContainerRequests.delete(name);\n            reject(err);\n          }\n        });\n\n        this._pendingContainerRequests.set(name, request);\n      }\n\n      return request;\n    }\n\n    return Promise.resolve(container);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\nimport { IModelToken } from \"./IModel\";\nimport { CloudStorageCache, CloudStorageContainerDescriptor, CloudStorageContainerUrl } from \"./CloudStorage\";\nimport { IModelTileRpcInterface } from \"./rpc/IModelTileRpcInterface\";\n\n/** @beta */\nexport interface TileContentIdentifier {\n  iModelToken: IModelToken;\n  treeId: string;\n  contentId: string;\n}\n\n/** @beta */\nexport class CloudStorageTileCache extends CloudStorageCache<TileContentIdentifier, Uint8Array> {\n  private static _instance: CloudStorageTileCache;\n\n  public static getCache(): CloudStorageTileCache {\n    if (!CloudStorageTileCache._instance) {\n      CloudStorageTileCache._instance = new CloudStorageTileCache();\n    }\n\n    return CloudStorageTileCache._instance;\n  }\n\n  public supplyExpiryForContainerUrl(_id: CloudStorageContainerDescriptor): Date {\n    const expiry = new Date();\n\n    const today = new Date().getDay();\n    const rolloverDay = 6; // saturday\n    expiry.setHours((rolloverDay - today) * 24);\n\n    expiry.setHours(23);\n    expiry.setMinutes(59);\n    expiry.setSeconds(59);\n    expiry.setMilliseconds(999);\n\n    return expiry;\n  }\n\n  private constructor() {\n    super();\n  }\n\n  protected async obtainContainerUrl(id: TileContentIdentifier, descriptor: CloudStorageContainerDescriptor): Promise<CloudStorageContainerUrl> {\n    const client = IModelTileRpcInterface.getClient();\n    return client.getTileCacheContainerUrl(id.iModelToken.toJSON(), descriptor);\n  }\n\n  protected async instantiateResource(response: Response): Promise<Uint8Array | undefined> {\n    const data = await response.arrayBuffer();\n    if (!data.byteLength) {\n      return undefined;\n    }\n\n    return new Uint8Array(data);\n  }\n\n  public formContainerName(id: TileContentIdentifier): string {\n    return `${id.iModelToken.iModelId}`;\n  }\n\n  public formResourceName(id: TileContentIdentifier): string {\n    const changeSetId = id.iModelToken.changeSetId || \"first\";\n    return `tiles/${id.treeId}/${changeSetId}/${id.contentId}`;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Codes */\n\nimport { Id64, Id64String, GuidString, JsonUtils } from \"@bentley/bentleyjs-core\";\nimport { IModel } from \"./IModel\";\n\n/** The props that hold the identity of the object defining the uniqueness scope for a set of Code values.\n * @public\n */\nexport type CodeScopeProps = Id64String | GuidString;\n\n/** The wire format for a Code\n * @public\n */\nexport interface CodeProps {\n  spec: Id64String;\n  scope: CodeScopeProps;\n  value?: string;\n}\n\n/** A three-part structure containing information about the [Code]($docs/bis/intro/codes) of an Element\n * @public\n */\nexport class Code implements CodeProps {\n  /** The id of the [CodeSpec]($docs/bis/intro/codes.md#codespec) of the Element */\n  public spec: Id64String;\n  /** the [CodeScope]($docs/bis/intro/codes.md#codescope-property) of the Element */\n  public scope: string;\n  /** the [CodeValue]($docs/bis/intro/codes.md#codevalue-property) of the Element */\n  public value?: string;\n\n  constructor(val: CodeProps) {\n    this.spec = Id64.fromJSON(val.spec);\n    this.scope = JsonUtils.asString(val.scope, \"\");\n    this.value = JsonUtils.asString(val.value);\n  }\n\n  /** Create an empty, non-unique code with no special meaning. */\n  public static createEmpty(): Code { const id: Id64String = Id64.fromLocalAndBriefcaseIds(1, 0); return new Code({ spec: id, scope: id }); }\n  public static fromJSON(json?: any): Code { return json ? new Code(json) : Code.createEmpty(); }\n  public getValue(): string { return this.value ? this.value : \"\"; }\n  public equals(other: Code): boolean { return this.spec === other.spec && this.scope === other.scope && this.value === other.value; }\n}\n\n/** Names of the internal BIS CodeSpecs. These names match those specified by the native library.\n * For other domains, the best practice is to include the domain name or alias as part of the CodeSpec name to ensure global uniqueness.\n * @public\n */\nexport enum BisCodeSpec {\n  nullCodeSpec = \"bis:NullCodeSpec\",\n  annotationFrameStyle = \"bis:AnnotationFrameStyle\",\n  annotationLeaderStyle = \"bis:AnnotationLeaderStyle\",\n  annotationTextStyle = \"bis:AnnotationTextStyle\",\n  auxCoordSystem2d = \"bis:AuxCoordSystem2d\",\n  auxCoordSystem3d = \"bis:AuxCoordSystem3d\",\n  auxCoordSystemSpatial = \"bis:AuxCoordSystemSpatial\",\n  categorySelector = \"bis:CategorySelector\",\n  colorBook = \"bis:ColorBook\",\n  displayStyle = \"bis:DisplayStyle\",\n  drawing = \"bis:Drawing\",\n  drawingCategory = \"bis:DrawingCategory\",\n  geometryPart = \"bis:GeometryPart\",\n  graphicalType2d = \"bis:GraphicalType2d\",\n  lineStyle = \"bis:LineStyle\",\n  linkElement = \"bis:LinkElement\",\n  modelSelector = \"bis:ModelSelector\",\n  physicalMaterial = \"bis:PhysicalMaterial\",\n  physicalType = \"bis:PhysicalType\",\n  informationPartitionElement = \"bis:InformationPartitionElement\",\n  renderMaterial = \"bis:RenderMaterial\",\n  sheet = \"bis:Sheet\",\n  spatialCategory = \"bis:SpatialCategory\",\n  spatialLocationType = \"bis:SpatialLocationType\",\n  subCategory = \"bis:SubCategory\",\n  subject = \"bis:Subject\",\n  templateRecipe2d = \"bis:TemplateRecipe2d\",\n  templateRecipe3d = \"bis:TemplateRecipe3d\",\n  textAnnotationSeed = \"bis:TextAnnotationSeed\",\n  texture = \"bis:Texture\",\n  viewDefinition = \"bis:ViewDefinition\",\n}\n\n/** The scope of the Code.\n * @public\n */\nexport namespace CodeScopeSpec {\n  /** The standard ways the CodeScope can be specified.\n   * @public\n   */\n  export enum Type {\n    /** The Code value must be unique within (at least) the iModel repository */\n    Repository = 1,\n    /** The Code value must be unique within the scope of the Model */\n    Model = 2,\n    /** The Code value must be unique among other children of the same parent element */\n    ParentElement = 3,\n    /** The Code value must be unique among other elements also scoped by the same element */\n    RelatedElement = 4,\n  }\n\n  /** Requirements for how the CodeScope Element is identified.\n   * @public\n   */\n  export enum ScopeRequirement {\n    /** The Code is required to have a valid ElementId as its scope */\n    ElementId = 1,\n    /** The Code is required to have a valid FederationGuid as its scope */\n    FederationGuid = 2,\n  }\n}\n\n/** A [Code Specification]($docs/bis/intro/glossary#codespec) captures the rules for encoding and decoding significant business information into\n * and from a Code (string). This specification is used to generate and validate Codes.\n *\n * A CodeSpec defines the format of a Code for a certain type of Element in an IModel.\n * A CodeSpec can identify an external system that maintains and/or assigns Codes.\n * @public\n */\nexport class CodeSpec {\n  /** The iModel holding this CodeSpec. */\n  public iModel: IModel;\n  /** The id of this CodeSpec. */\n  public id: Id64String;\n  public name: string;\n  public specScopeType: CodeScopeSpec.Type;\n  public scopeReq: CodeScopeSpec.ScopeRequirement;\n  public properties: any; // TODO: CodeSpec handlers and custom properties\n\n  public constructor(iModel: IModel, id: Id64String, name: string, specScopeType: CodeScopeSpec.Type, scopeReq?: CodeScopeSpec.ScopeRequirement, properties?: any) {\n    this.iModel = iModel;\n    this.id = id;\n    this.name = name;\n    this.specScopeType = specScopeType;\n    this.scopeReq = (undefined !== scopeReq) ? scopeReq : CodeScopeSpec.ScopeRequirement.ElementId;\n    this.properties = properties;\n  }\n\n  public get isValid(): boolean { return Id64.isValid(this.id); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Symbology */\n\nimport { Geometry } from \"@bentley/geometry-core\";\n\n// spell-checker: disable\n/** A set of known colors by name, as a 32-bit integer in the form 0xBBGGRR (red is the low byte).\n * This is different than color values in #RRGGBB format for HTML pages (red and blue are swapped).\n * @note If your colors don't look right, likely you're using 0xRRGGBB where ColorDef expects 0xBBGGRR.\n * @public\n */\nexport enum ColorByName {\n  aliceBlue = 0xFFF8F0,\n  amber = 0x00BFFF,\n  antiqueWhite = 0xD7EBFA,\n  aqua = 0xFFFF00,\n  aquamarine = 0xD4FF7F,\n  azure = 0xFFFFF0,\n  beige = 0xDCF5F5,\n  bisque = 0xC4E4FF,\n  black = 0x000000,\n  blanchedAlmond = 0xCDEBFF,\n  blue = 0xFF0000,\n  blueViolet = 0xE22B8A,\n  brown = 0x2A2AA5,\n  burlyWood = 0x87B8DE,\n  cadetBlue = 0xA09E5F,\n  chartreuse = 0x00FF7F,\n  chocolate = 0x1E69D2,\n  coral = 0x507FFF,\n  cornflowerBlue = 0xED9564,\n  cornSilk = 0xDCF8FF,\n  crimson = 0x3C14DC,\n  cyan = 0xFFFF00,\n  darkBlue = 0x8B0000,\n  darkBrown = 0x214365,\n  darkCyan = 0x8B8B00,\n  darkGoldenrod = 0x0B86B8,\n  darkGray = 0xA9A9A9,\n  darkGreen = 0x006400,\n  darkGrey = 0xA9A9A9,\n  darkKhaki = 0x6BB7BD,\n  darkMagenta = 0x8B008B,\n  darkOliveGreen = 0x2F6B55,\n  darkOrange = 0x008CFF,\n  darkOrchid = 0xCC3299,\n  darkRed = 0x00008B,\n  darkSalmon = 0x7A96E9,\n  darkSeagreen = 0x8FBC8F,\n  darkSlateBlue = 0x8B3D48,\n  darkSlateGray = 0x4F4F2F,\n  darkSlateGrey = 0x4F4F2F,\n  darkTurquoise = 0xD1CE00,\n  darkViolet = 0xD30094,\n  deepPink = 0x9314FF,\n  deepSkyBlue = 0xFFBF00,\n  dimGray = 0x696969,\n  dimGrey = 0x696969,\n  dodgerBlue = 0xFF901E,\n  fireBrick = 0x2222B2,\n  floralWhite = 0xF0FAFF,\n  forestGreen = 0x228B22,\n  fuchsia = 0xFF00FF,\n  gainsboro = 0xDCDCDC,\n  ghostWhite = 0xFFF8F8,\n  gold = 0x00D7FF,\n  goldenrod = 0x20A5DA,\n  gray = 0x808080,\n  green = 0x008000,\n  greenYellow = 0x2FFFAD,\n  grey = 0x808080,\n  honeydew = 0xF0FFF0,\n  hotPink = 0xB469FF,\n  indianRed = 0x5C5CCD,\n  indigo = 0x82004B,\n  ivory = 0xF0FFFF,\n  khaki = 0x8CE6F0,\n  lavender = 0xFAE6E6,\n  lavenderBlush = 0xF5F0FF,\n  lawnGreen = 0x00FC7C,\n  lemonChiffon = 0xCDFAFF,\n  lightBlue = 0xE6D8AD,\n  lightCoral = 0x8080F0,\n  lightCyan = 0xFFFFE0,\n  lightGoldenrodYellow = 0xD2FAFA,\n  lightGray = 0xD3D3D3,\n  lightGreen = 0x90EE90,\n  lightGrey = 0xD3D3D3,\n  lightPink = 0xC1B6FF,\n  lightSalmon = 0x7AA0FF,\n  lightSeagreen = 0xAAB220,\n  lightSkyBlue = 0xFACE87,\n  lightSlateGray = 0x998877,\n  lightSlateGrey = 0x998877,\n  lightSteelBlue = 0xDEC4B0,\n  lightyellow = 0xE0FFFF,\n  lime = 0x00FF00,\n  limeGreen = 0x32CD32,\n  linen = 0xE6F0FA,\n  magenta = 0xFF00FF,\n  maroon = 0x000080,\n  mediumAquamarine = 0xAACD66,\n  mediumBlue = 0xCD0000,\n  mediumOrchid = 0xD355BA,\n  mediumPurple = 0xDB7093,\n  mediumSeaGreen = 0x71B33C,\n  mediumSlateBlue = 0xEE687B,\n  mediumSpringGreen = 0x9AFA00,\n  mediumTurquoise = 0xCCD148,\n  mediumVioletRed = 0x8515C7,\n  midnightBlue = 0x701919,\n  mintCream = 0xFAFFF5,\n  mistyRose = 0xE1E4FF,\n  moccasin = 0xB5E4FF,\n  navajoWhite = 0xADDEFF,\n  navy = 0x800000,\n  oldLace = 0xE6F5FD,\n  olive = 0x008080,\n  oliveDrab = 0x238E6B,\n  orange = 0x00A5FF,\n  orangeRed = 0x0045FF,\n  orchid = 0xD670DA,\n  paleGoldenrod = 0xAAE8EE,\n  paleGreen = 0x98FB98,\n  paleTurquoise = 0xEEEEAF,\n  paleVioletRed = 0x9370DB,\n  papayaWhip = 0xD5EFFF,\n  peachPuff = 0xB9DAFF,\n  peru = 0x3F85CD,\n  pink = 0xCBC0FF,\n  plum = 0xDDA0DD,\n  powderBlue = 0xE6E0B0,\n  purple = 0x800080,\n  rebeccaPurple = 0x993366,\n  red = 0x0000FF,\n  rosyBrown = 0x8F8FBC,\n  royalBlue = 0xE16941,\n  saddleBrown = 0x13458B,\n  salmon = 0x7280FA,\n  sandyBrown = 0x60A4F4,\n  seaGreen = 0x578B2E,\n  seaShell = 0xEEF5FF,\n  sienna = 0x2D52A0,\n  silver = 0xC0C0C0,\n  skyBlue = 0xEBCE87,\n  slateBlue = 0xCD5A6A,\n  slateGray = 0x908070,\n  slateGrey = 0x908070,\n  snow = 0xFAFAFF,\n  springGreen = 0x7FFF00,\n  steelBlue = 0xB48246,\n  tan = 0x8CB4D2,\n  teal = 0x808000,\n  thistle = 0xD8BFD8,\n  tomato = 0x4763FF,\n  turquoise = 0xD0E040,\n  violet = 0xEE82EE,\n  wheat = 0xB3DEF5,\n  white = 0xFFFFFF,\n  whiteSmoke = 0xF5F5F5,\n  yellow = 0x00FFFF,\n  yellowGreen = 0x32CD9A,\n}\n\n/** @public */\nconst enum HsvConstants {\n  VISIBILITY_GOAL = 40,\n  HSV_SATURATION_WEIGHT = 4,\n  HSV_VALUE_WEIGHT = 2,\n}\n\n/** A color defined by Hue, Saturation, and Lightness.\n * @see [here](https://en.wikipedia.org/wiki/HSL_and_HSV) for difference between HSL and HSV\n * @public\n */\nexport class HSLColor {\n  /** Hue */\n  public h = 0;\n  /** Saturation */\n  public s = 0;\n  /** Lightness */\n  public l = 0;\n  public clone(): HSLColor { const out = new HSLColor(); out.h = this.h; out.s = this.s; out.l = this.l; return out; }\n  public toColorDef(out?: ColorDef): ColorDef { return ColorDef.fromHSL(this.h, this.s, this.l, out); }\n  public static fromColorDef(val: ColorDef, out?: HSLColor) { return val.toHSL(out); }\n}\n\n/** A color defined by Hue, Saturation, and Value\n * @see [here](https://en.wikipedia.org/wiki/HSL_and_HSV) for difference between HSL and HSV\n * @public\n */\nexport class HSVColor {\n  /** Hue */\n  public h = 0;\n  /** Saturation */\n  public s = 0;\n  /** Value */\n  public v = 0;\n  public clone(): HSVColor { const out = new HSVColor(); out.h = this.h; out.s = this.s; out.v = this.v; return out; }\n  public toColorDef(out?: ColorDef): ColorDef { return ColorDef.fromHSV(this, out); }\n  public static fromColorDef(val: ColorDef, out?: HSVColor) { return val.toHSV(out); }\n\n  public adjustColor(darkenColor: boolean, delta: number): void {\n    if (darkenColor) {\n      let weightedDelta = delta * HsvConstants.HSV_VALUE_WEIGHT;\n\n      if (this.v >= weightedDelta) {\n        this.v -= weightedDelta;\n      } else {\n        weightedDelta -= this.v;\n\n        this.v = 0;\n        this.s = this.s + weightedDelta < 100 ? this.s + weightedDelta : 100;\n      }\n    } else {\n      let weightedDelta = delta * HsvConstants.HSV_SATURATION_WEIGHT;\n\n      if (this.s >= weightedDelta) {\n        this.s -= weightedDelta;\n      } else {\n        weightedDelta -= this.s;\n        this.s = 0;\n        this.v = this.v + weightedDelta < 100 ? this.v + weightedDelta : 100;\n      }\n    }\n  }\n}\n\nconst scratchBytes = new Uint8Array(4);\nconst scratchUInt32 = new Uint32Array(scratchBytes.buffer);\n\n/** A number in 0xTTBBGGRR format\n * @public\n */\nexport type ColorDefProps = number | ColorDef;\n\n/** An integer representation of a color.\n *\n * Colors are stored as 4 components: Red, Blue, Green, and Transparency (0=fully opaque). Each is an 8-bit integer between 0-255.\n *\n * Much confusion results from attempting to interpret those 4 one-byte values as a 4 byte integer. There are generally two sources\n * of confusion:\n *  1. The order the Red, Green, Blue bytes\n *  2. Whether to specify transparency or opacity (sometimes referred to as \"alpha\")\n *\n * Generally, iModel.js prefers to use `0xTTBBGGRR` (red in the low byte. 0==fully opaque in high byte), but this class provides methods\n * to convert to `0xRRGGBB` (see [[getRgb]]) and `0xAABBGGRR` (red in the low byte, 0==fully transparent in high byte. see [[getAbgr]]).\n *\n * The constructor also accepts strings in the common HTML formats.\n * @public\n */\nexport class ColorDef {\n  private _tbgr: number;\n\n  /** Swap the red and blue values of a 32-bit integer representing a color. Transparency and green are unchanged. */\n  public static rgb2bgr(val: number): number { scratchUInt32[0] = val; return scratchBytes[3] << 24 + scratchBytes[0] << 16 + scratchBytes[1] << 8 + scratchBytes[2]; }\n\n  /**\n   * Create a new ColorDef.\n   * @param val value to use.\n   * If a number, it is interpreted as a 0xTTBBGGRR (Red in the low byte, high byte is transparency 0==fully opaque) value.\n   *\n   * If a string, must be in one of the following forms:\n   * *\"rgb(255,0,0)\"*\n   * *\"rgba(255,0,0,255)\"*\n   * *\"rgb(100%,0%,0%)\"*\n   * *\"hsl(120,50%,50%)\"*\n   * *\"#rrbbgg\"*\n   * *\"blanchedAlmond\"* (see possible values from [[ColorByName]]). Case insensitve.\n   */\n  public constructor(val?: string | ColorDefProps) {\n    this._tbgr = 0;\n    if (!val) return;\n    if (typeof val === \"number\") { this.tbgr = val; return; }\n    if (val instanceof ColorDef) { this._tbgr = val._tbgr; return; }\n    this.fromString(val);\n  }\n\n  /** Make a copy of this ColorDef */\n  public clone(): ColorDef { return new ColorDef(this._tbgr); }\n\n  /** Set the color of this ColorDef from another ColorDef */\n  public setFrom(other: ColorDef) { this._tbgr = other._tbgr; }\n\n  /** Convert this ColorDef to a 32 bit number representing the 0xTTBBGGRR value */\n  public toJSON(): ColorDefProps { return this._tbgr; }\n\n  /** Create a new ColorDef from a json object. If the json object is a number, it is assumed to be a 0xTTBBGGRR value. */\n  public static fromJSON(json?: any): ColorDef { return new ColorDef(json); }\n\n  /** Initialize or create a ColorDef fromn Red,Green,Blue,Transparency values. All values should be between 0-255 */\n  public static from(red: number, green: number, blue: number, transparency?: number, result?: ColorDef): ColorDef {\n    result = result ? result : new ColorDef();\n    scratchBytes[0] = red;\n    scratchBytes[1] = green;\n    scratchBytes[2] = blue;\n    scratchBytes[3] = transparency || 0;\n    result._tbgr = scratchUInt32[0];\n    return result;\n  }\n\n  /** Get the r,g,b,t values from this ColorDef. Returned as an object with {r, g, b, t} members. Values will be integers between 0-255. */\n  public get colors() { scratchUInt32[0] = this._tbgr; return { b: scratchBytes[2], g: scratchBytes[1], r: scratchBytes[0], t: scratchBytes[3] }; }\n\n  /** The color value of this ColorDef as an integer in the form 0xTTBBGGRR (red in the low byte) */\n  public get tbgr(): number { return this._tbgr; }\n  public set tbgr(tbgr: number) { scratchUInt32[0] = tbgr; this._tbgr = scratchUInt32[0]; } // force to be a 32 bit unsigned integer\n\n  /** Get the value of the color as a number in 0xAABBGGRR format (i.e. red is in low byte). Transparency (0==fully opaque) converted to alpha (0==fully transparent).  */\n  public getAbgr(): number { scratchUInt32[0] = this._tbgr; scratchBytes[3] = 255 - scratchBytes[3]; return scratchUInt32[0]; }\n\n  /** Get the RGB value of the color as a number in 0xRRGGBB format (i.e blue is in the low byte). Transparency is ignored. Value will be from 0 to 2^24 */\n  public getRgb(): number { scratchUInt32[0] = this._tbgr; return (scratchBytes[0] << 16) + (scratchBytes[1] << 8) + scratchBytes[2]; }\n\n  /** Change the alpha value for this ColorDef.\n   * @param alpha the new alpha value. Must be between 0-255.\n   */\n  public setAlpha(alpha: number): void { scratchUInt32[0] = this._tbgr; scratchBytes[3] = 255 - (alpha | 0); this._tbgr = scratchUInt32[0]; }\n  /** Get the alpha value for this ColorDef. Will be between 0-255 */\n  public getAlpha(): number { scratchUInt32[0] = this._tbgr; return 255 - scratchBytes[3]; }\n  /** True if this ColorDef is fully opaque */\n  public get isOpaque(): boolean { return 255 === this.getAlpha(); }\n  /** Change the transparency value for this ColorDef\n   * @param transparency the new transparency value. Must be between 0-255, where 0 means 'fully opaque' and 255 means 'fully transparent'.\n   */\n  public setTransparency(transparency: number): void { this.setAlpha(255 - transparency); }\n\n  /** The \"known name\" for this ColorDef. Will be undefined if color value is not in [[ColorByName]] list */\n  public get name(): string | undefined { return ColorByName[this._tbgr]; }\n\n  /** Convert this ColorDef to a string in the form \"#rrggbb\" where values are hex digits of the respective colors */\n  public toHexString(): string { return \"#\" + (\"000000\" + this.getRgb().toString(16)).slice(-6); }\n\n  /** Convert this ColorDef to a string in the form \"rgb(r,g,b)\" where values are decimal digits of the respective colors */\n  public toRgbString(): string { const c = this.colors; return \"rgb(\" + (c.r | 0) + \",\" + (c.g | 0) + \",\" + (c.b | 0) + \")\"; }\n  private fromString(val: string): ColorDef {\n    if (typeof val !== \"string\")\n      return this;\n\n    val = val.toLowerCase();\n    let m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(val);\n    if (m) { // rgb / hsl\n\n      let color;\n      const name = m[1];\n      const components = m[2];\n\n      switch (name) {\n        case \"rgb\":\n        case \"rgba\":\n          color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\n          if (color) { // rgb(255,0,0) rgba(255,0,0,0.5)\n            return ColorDef.from(\n              Math.min(255, parseInt(color[1], 10)),\n              Math.min(255, parseInt(color[2], 10)),\n              Math.min(255, parseInt(color[3], 10)),\n              color[5] != null ? 255 - Math.min(255, parseInt(color[5], 10)) : 0, this);\n          }\n\n          color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\n          if (color) { // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n            return ColorDef.from(\n              (Math.min(100, parseInt(color[1], 10)) / 100) * 255,\n              (Math.min(100, parseInt(color[2], 10)) / 100) * 255,\n              (Math.min(100, parseInt(color[3], 10)) / 100) * 255,\n              color[5] != null ? 255 - ((Math.min(100, parseInt(color[5], 10)) / 100) * 255) : 0, this);\n          }\n\n          break;\n\n        case \"hsl\":\n        case \"hsla\":\n          color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\n          if (color) {        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n            const h = parseFloat(color[1]) / 360;\n            const s = parseInt(color[2], 10) / 100;\n            const l = parseInt(color[3], 10) / 100;\n            return ColorDef.fromHSL(h, s, l, this);\n          }\n          break;\n      }\n\n      // tslint:disable-next-line:no-conditional-assignment\n    } else if (m = /^\\#([a-f0-9]+)$/.exec(val)) {  // hex color\n      const hex = m[1];\n      const size = hex.length;\n\n      if (size === 3) { // #ff0\n        return ColorDef.from(\n          parseInt(hex.charAt(0) + hex.charAt(0), 16),\n          parseInt(hex.charAt(1) + hex.charAt(1), 16),\n          parseInt(hex.charAt(2) + hex.charAt(2), 16), 0, this);\n      }\n      if (size === 6) {  // #ff0000\n        return ColorDef.from(\n          parseInt(hex.charAt(0) + hex.charAt(1), 16),\n          parseInt(hex.charAt(2) + hex.charAt(3), 16),\n          parseInt(hex.charAt(4) + hex.charAt(5), 16), 0, this);\n      }\n    }\n\n    if (val && val.length > 0) {   // ColorRgb value\n      Object.entries(ColorByName).some((v) => {\n        if (v[1].toLowerCase() !== val)\n          return false;\n        this._tbgr = Number(v[0]);\n        return true;\n      });\n    }\n    return this;\n  }\n\n  /** Create a ColorDef that is the linear interpolation of this ColorDef and another ColorDef, using a weighting factor.\n   * @param color2 The other color\n   * @param weight The weighting factor for color2. 0.0 = this color, 1.0 = color2.\n   * @param result Optional ColorDef to hold result. If undefined, a new ColorDef is created.\n   */\n  public lerp(color2: ColorDef, weight: number, result?: ColorDef): ColorDef {\n    const color = color2.colors;\n    const c = this.colors;\n    c.r += (color.r - c.r) * weight;\n    c.g += (color.g - c.g) * weight;\n    c.b += (color.b - c.b) * weight;\n    return ColorDef.from(c.r, c.g, c.b, c.t, result);\n  }\n\n  /** Create a new ColorDef that is the inverse (all colors set to 255 - this) of this color. */\n  public invert(): ColorDef { const colors = this.colors; return ColorDef.from(255 - colors.r, 255 - colors.g, 255 - colors.b); }\n\n  /** Create a ColorDef from hue, saturation, lightness values */\n  public static fromHSL(h: number, s: number, l: number, out?: ColorDef): ColorDef {\n    const torgb = (p1: number, q1: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p1 + (q1 - p1) * 6 * t;\n      if (t < 1 / 2) return q1;\n      if (t < 2 / 3) return p1 + (q1 - p1) * 6 * (2 / 3 - t);\n      return p1;\n    };\n    const hue2rgb = (p1: number, q1: number, t: number) => Math.round(torgb(p1, q1, t) * 255);\n    const modulo = (n: number, m: number) => ((n % m) + m) % m;\n\n    // h,s,l ranges are in 0.0 - 1.0\n    h = modulo(h, 1);\n    s = Geometry.clamp(s, 0, 1);\n    l = Geometry.clamp(l, 0, 1);\n\n    if (s === 0)\n      return ColorDef.from(l, l, l, 0, out);\n\n    const p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);\n    const q = (2 * l) - p;\n    return ColorDef.from(\n      hue2rgb(q, p, h + 1 / 3),\n      hue2rgb(q, p, h),\n      hue2rgb(q, p, h - 1 / 3), 0, out);\n  }\n\n  /** Create an [[HSLColor]] from this ColorDef */\n  public toHSL(opt?: HSLColor): HSLColor {\n    // h,s,l ranges are in 0.0 - 1.0\n    const col = this.colors;\n    col.r /= 255;\n    col.g /= 255;\n    col.b /= 255;\n    const max = Math.max(col.r, col.g, col.b);\n    const min = Math.min(col.r, col.g, col.b);\n\n    let hue = 0;\n    let saturation;\n    const lightness = (min + max) / 2.0;\n\n    if (min === max) {\n      saturation = 0;\n    } else {\n      const delta = max - min;\n      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n      switch (max) {\n        case col.r: hue = (col.g - col.b) / delta + (col.g < col.b ? 6 : 0); break;\n        case col.g: hue = (col.b - col.r) / delta + 2; break;\n        case col.b: hue = (col.r - col.g) / delta + 4; break;\n      }\n      hue /= 6;\n    }\n\n    const hsl = opt ? opt : new HSLColor();\n    hsl.h = hue;\n    hsl.s = saturation;\n    hsl.l = lightness;\n    return hsl;\n  }\n\n  /** Create an [[HSVColor]] from this ColorDef */\n  public toHSV(out?: HSVColor): HSVColor {\n    const hsv = out ? out : new HSVColor();\n    const { r, g, b } = this.colors;\n    let min = (r < g) ? r : g;\n    if (b < min)\n      min = b;\n\n    let max = (r > g) ? r : g;\n    if (b > max)\n      max = b;\n\n    /* amount of \"blackness\" present */\n    hsv.v = Math.floor((max / 255.0 * 100) + 0.5);\n    const deltaRgb = max - min;\n    hsv.s = (max !== 0.0) ? Math.floor((deltaRgb / max * 100) + 0.5) : 0;\n\n    if (hsv.s) {\n      const redDistance = (max - r) / deltaRgb;\n      const greenDistance = (max - g) / deltaRgb;\n      const blueDistance = (max - b) / deltaRgb;\n\n      let intermediateHue: number;\n      if (r === max)           /* color between yellow & magenta */\n        intermediateHue = blueDistance - greenDistance;\n      else if (g === max)      /* color between cyan & yellow */\n        intermediateHue = 2.0 + redDistance - blueDistance;\n      else                    /* color between magenta & cyan */\n        intermediateHue = 4.0 + greenDistance - redDistance;\n\n      /* intermediate hue is [0..6] */\n      intermediateHue *= 60;\n\n      if (intermediateHue < 0.0)\n        intermediateHue += 360;\n\n      hsv.h = Math.floor(intermediateHue + 0.5);\n\n      if (hsv.h >= 360)\n        hsv.h = 0;\n    } else {\n      hsv.h = 0;\n    }\n    return hsv;\n  }\n\n  /** Create a ColorDef from an HSVColor */\n  public static fromHSV(hsv: HSVColor, out?: ColorDef): ColorDef {\n    // Check for simple case first.\n    if ((!hsv.s) || (hsv.h === -1)) {\n      // hue must be undefined, have no color only white\n      const white = 0xff & Math.floor(((255.0 * hsv.v) / 100.0) + 0.5 + 3.0e-14);\n      return ColorDef.from(white, white, white, 0, out);\n    }\n\n    let dhue = hsv.h, dsaturation = hsv.s, dvalue = hsv.v;\n    if (dhue === 360)\n      dhue = 0.0;\n\n    dhue /= 60; // hue is now [0..6]\n    const hueIntpart = Math.floor(dhue); // convert double -> int\n    const hueFractpart = dhue - hueIntpart;\n    dvalue /= 100;\n    dsaturation /= 100;\n\n    const p = 0xff & Math.floor((dvalue * (1.0 - dsaturation) * 255.0) + 0.5);\n    const q = 0xff & Math.floor((dvalue * (1.0 - (dsaturation * hueFractpart)) * 255.0) + 0.5);\n    const t = 0xff & Math.floor((dvalue * (1.0 - (dsaturation * (1.0 - hueFractpart))) * 255.0) + 0.5);\n    const v = 0xff & Math.floor(dvalue * 255 + 0.5);\n\n    let r = 0, b = 0, g = 0;\n    switch (hueIntpart) {\n      case 0: r = v; g = t; b = p; break; // reddish\n      case 1: r = q, g = v; b = p; break; // yellowish\n      case 2: r = p, g = v; b = t; break; // greenish\n      case 3: r = p, g = q; b = v; break; // cyanish\n      case 4: r = t, g = p; b = v; break; // bluish\n      case 5: r = v, g = p; b = q; break; // magenta-ish\n    }\n    return ColorDef.from(r, g, b, 0, out);\n  }\n\n  private visibilityCheck(other: ColorDef): number {\n    const fg = this.colors;\n    const bg = other.colors;\n    // Compute luminosity\n    const red = Math.abs(fg.r - bg.r);\n    const green = Math.abs(fg.g - bg.g);\n    const blue = Math.abs(fg.b - bg.b);\n    return (0.30 * red) + (0.59 * green) + (0.11 * blue);\n  }\n\n  /**\n   * Create a new ColorDef that is adjusted from this ColorDef for maximum contrast against another color. The color will either be lighter\n   * or darker, depending on which has more visibility against the other color.\n   * @param other the color to contrast with\n   * @param alpha optional alpha value for the adjusted color. If not supplied alpha from this color is used.\n   */\n  public adjustForContrast(other: ColorDef, alpha?: number): ColorDef {\n    const visibility = this.visibilityCheck(other);\n    if (HsvConstants.VISIBILITY_GOAL <= visibility) {\n      const color = this.clone();\n\n      if (undefined !== alpha)\n        color.setAlpha(alpha);\n\n      return color;\n    }\n\n    const adjPercent = Math.floor(((HsvConstants.VISIBILITY_GOAL - visibility) / 255.0) * 100.0);\n    const darkerHSV = this.toHSV();\n    const brightHSV = darkerHSV.clone();\n\n    darkerHSV.adjustColor(true, adjPercent);\n    brightHSV.adjustColor(false, adjPercent);\n\n    if (undefined === alpha)\n      alpha = this.getAlpha();\n\n    const darker = ColorDef.fromHSV(darkerHSV); darker.setAlpha(alpha);\n    const bright = ColorDef.fromHSV(brightHSV); bright.setAlpha(alpha);\n\n    if (bright.getRgb() === other.getRgb()) // Couldn't adjust brighter...\n      return darker;\n\n    if (darker.getRgb() === other.getRgb()) // Couldn't adjust darker...\n      return bright;\n\n    // NOTE: Best choice is the one most visible against the other color...\n    return (bright.visibilityCheck(other) >= darker.visibilityCheck(other)) ? bright : darker;\n  }\n\n  /** True if the value of this ColorDef is the same as another ColorDef. */\n  public equals(other: ColorDef): boolean { return this._tbgr === other._tbgr; }\n  /** A black frozen ColorDef. */\n  public static readonly black = new ColorDef(ColorByName.black);\n  /** A white frozen ColorDef. */\n  public static readonly white = new ColorDef(ColorByName.white);\n  /** A red frozen ColorDef. */\n  public static readonly red = new ColorDef(ColorByName.red);\n  /** A green frozen ColorDef. */\n  public static readonly green = new ColorDef(ColorByName.green);\n  /** A blue frozen ColorDef. */\n  public static readonly blue = new ColorDef(ColorByName.blue);\n}\nObject.freeze(ColorDef.black);\nObject.freeze(ColorDef.white);\nObject.freeze(ColorDef.red);\nObject.freeze(ColorDef.green);\nObject.freeze(ColorDef.blue);\n\n/** An immutable representation of a color with red, green, and blue components each in the integer range [0, 255].\n * @public\n */\nexport class RgbColor {\n  /** Constructs from red, green, and blue components.\n   * @param r Red\n   * @param g Green\n   * @param b Blue\n   */\n  public constructor(public readonly r: number, public readonly g: number, public readonly b: number) {\n    this.r = Math.max(0, Math.min(this.r, 0xff));\n    this.g = Math.max(0, Math.min(this.g, 0xff));\n    this.b = Math.max(0, Math.min(this.b, 0xff));\n  }\n  public equals(other: RgbColor): boolean { return this.r === other.r && this.g === other.g && this.b === other.b; }\n  /** Constructs from the red, green, and blue components of a ColorDef. The alpha component is ignored. */\n  public static fromColorDef(colorDef: ColorDef): RgbColor {\n    const colors = colorDef.colors;\n    return new RgbColor(colors.r, colors.g, colors.b);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module Logging */\r\n\r\n/** Logger categories used by this package\r\n * @see [Logger]($bentley)\r\n * @public\r\n */\r\nexport enum CommonLoggerCategory {\r\n  /** The logger category used by common classes relating to ElementProps. */\r\n  ElementProps = \"imodeljs-common.ElementProps\",\r\n  /** The logger category used by the portions of the RpcInterface framework that run on the backend. */\r\n  RpcInterfaceBackend = \"imodeljs-backend.RpcInterface\",\r\n  /** The logger category used by the portions of the RpcInterface framework that run on the frontend. */\r\n  RpcInterfaceFrontend = \"imodeljs-frontend.RpcInterface\",\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module ECSQL */\n\nimport { assert, Id64String } from \"@bentley/bentleyjs-core\";\n\n/** Describes the different data types an ECSQL value can be of.\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n */\nexport enum ECSqlValueType {\n  // do not change the values of the enum as it must match its counterpart in the addon\n  Blob = 1,\n  Boolean = 2,\n  DateTime = 3,\n  Double = 4,\n  Geometry = 5,\n  Id = 6,\n  Int = 7,\n  Int64 = 8,\n  Point2d = 9,\n  Point3d = 10,\n  String = 11,\n  Navigation = 12,\n  Struct = 13,\n  PrimitiveArray = 14,\n  StructArray = 15,\n  Guid = 16,\n}\n\n/** An ECSQL Navigation value.\n * It is returned from ECSQL SELECT statements for navigation properties.\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n */\nexport interface NavigationValue {\n  /** ECInstanceId of the related instance */\n  id: Id64String;\n  /** Fully qualified class name of the relationship backing the Navigation property */\n  relClassName?: string;\n}\n\n/** An ECSQL Navigation value which can be bound to a navigation property ECSQL parameter\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n */\nexport interface NavigationBindingValue {\n  /** ECInstanceId of the related instance */\n  id: Id64String;\n  /** Fully qualified class name of the relationship backing the Navigation property */\n  relClassName?: string;\n  /** Table space where the relationship's schema is persisted. This is only required\n   * if other ECDb files are attached to the primary one. In case a schema exists in more than one of the files,\n   * pass the table space to disambiguate.\n   */\n  relClassTableSpace?: string;\n}\n\n/** Equivalent of the ECEnumeration OpCode in the **ECDbChange** ECSchema.\n * The enum can be used when programmatically binding values to the InstanceChange.OpCode property of\n * the ECDbChange ECSchema.\n *\n * See also\n * - [ChangeSummary Overview]($docs/learning/ChangeSummaries)\n * @public\n */\nexport enum ChangeOpCode {\n  Insert = 1,\n  Update = 2,\n  Delete = 4,\n}\n\n/** The enum represents the values for the ChangedValueState argument of the ECSQL function **Changes**.\n * The enum can be used when programmatically binding values to the ChangedValueState argument\n * in an ECSQL using the **Changes** ECSQL function.\n *\n * See also\n * - [ChangeSummary Overview]($docs/learning/ChangeSummaries)\n * @public\n */\nexport enum ChangedValueState {\n  AfterInsert = 1,\n  BeforeUpdate = 2,\n  AfterUpdate = 3,\n  BeforeDelete = 4,\n}\n\n/** Defines the ECSQL system properties.\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n */\nexport enum ECSqlSystemProperty {\n  ECInstanceId,\n  ECClassId,\n  SourceECInstanceId,\n  SourceECClassId,\n  TargetECInstanceId,\n  TargetECClassId,\n  NavigationId,\n  NavigationRelClassId,\n  PointX,\n  PointY,\n  PointZ,\n}\n\n/** Utility to format ECProperty names according to the iModel.js formatting rules.\n * See also [ECSQL Row Format]($docs/learning/ECSQLRowFormat).\n * @public\n */\nexport class ECJsNames {\n\n  /** Formats the specified ECProperty name according to the iModel.js formatting rules.\n   *\n   *  See [ECSQL Row Format]($docs/learning/ECSQLRowFormat) which describes the formatting rules.\n   *\n   * @param ecProperty Property name as defined in the ECSchema for regular ECProperties\n   *        or the name of an ECSQL system properties\n   * @param isSystemProperty if omitted, the method will try to find out whether the given property\n   *        is a system property or not. If true is specified, the method will throw if the property name\n   *        is not a known system property. If false is specified, the method will not attempt to recognize\n   *        the property name as system property.\n   */\n  public static toJsName(propName: string, isSystemProperty?: boolean) {\n    assert(propName !== undefined, \"propName must not be undefined\");\n\n    const propTypeUnknown: boolean = isSystemProperty === undefined || isSystemProperty === null;\n\n    const accessStringTokens: string[] = propName.split(\".\");\n    const tokenCount: number = accessStringTokens.length;\n    assert(tokenCount > 0);\n\n    if (tokenCount === 1) {\n      if (propTypeUnknown || isSystemProperty!) {\n        if (propName === \"ECInstanceId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.ECInstanceId);\n\n        if (propName === \"ECClassId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.ECClassId);\n\n        if (propName === \"SourceECInstanceId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.SourceECInstanceId);\n\n        if (propName === \"TargetECInstanceId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.TargetECInstanceId);\n\n        if (propName === \"SourceECClassId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.SourceECClassId);\n\n        if (propName === \"TargetECClassId\")\n          return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.TargetECClassId);\n\n        return ECJsNames.lowerFirstChar(propName);\n      }\n\n      return ECJsNames.lowerFirstChar(propName);\n    }\n\n    // parse access string and convert the leaf tokens if they are system props\n    // The first char of the access string is lowered.\n    let jsName: string = ECJsNames.lowerFirstChar(accessStringTokens[0] + \".\");\n    for (let j = 1; j < tokenCount - 1; j++) {\n      jsName += accessStringTokens[j] + \".\";\n    }\n\n    const leafToken: string = accessStringTokens[tokenCount - 1];\n\n    if (propTypeUnknown || isSystemProperty!) {\n      if (leafToken === \"Id\")\n        jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.NavigationId);\n      else if (leafToken === \"RelECClassId\")\n        jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.NavigationRelClassId);\n      else if (leafToken === \"X\")\n        jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointX);\n      else if (leafToken === \"Y\")\n        jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointY);\n      else if (leafToken === \"Z\")\n        jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointZ);\n      else if (propTypeUnknown)\n        jsName += ECJsNames.lowerFirstChar(leafToken);\n      else\n        throw new Error(`Property ${leafToken} of access string ${propName} is no ECSQL system property.`);\n    } else\n      jsName += leafToken;\n\n    return jsName;\n  }\n\n  /** Returns the name of the specified ECSQL system property according to the\n   *  iModel.js formatting rules.\n   *\n   *  See [ECSQL Row Format]($docs/learning/ECSQLRowFormat) which describes the formatting rules.\n   * @param systemPropertyType System property type\n   */\n  public static systemPropertyToJsName(systemPropertyType: ECSqlSystemProperty): string {\n    switch (systemPropertyType) {\n      case ECSqlSystemProperty.ECInstanceId:\n      case ECSqlSystemProperty.NavigationId:\n        return \"id\";\n      case ECSqlSystemProperty.ECClassId:\n        return \"className\";\n      case ECSqlSystemProperty.SourceECInstanceId:\n        return \"sourceId\";\n      case ECSqlSystemProperty.SourceECClassId:\n        return \"sourceClassName\";\n      case ECSqlSystemProperty.TargetECInstanceId:\n        return \"targetId\";\n      case ECSqlSystemProperty.TargetECClassId:\n        return \"targetClassName\";\n      case ECSqlSystemProperty.NavigationRelClassId:\n        return \"relClassName\";\n      case ECSqlSystemProperty.PointX:\n        return \"x\";\n      case ECSqlSystemProperty.PointY:\n        return \"y\";\n      case ECSqlSystemProperty.PointZ:\n        return \"z\";\n      default:\n        throw new Error(`Unknown ECSqlSystemProperty enum value ${systemPropertyType}.`);\n    }\n  }\n\n  private static lowerFirstChar(name: string): string { return name[0].toLowerCase() + name.substring(1); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module WireFormats */\n\nimport { GuidString, Id64, Id64String, Logger } from \"@bentley/bentleyjs-core\";\nimport { AngleProps, LowAndHighXY, LowAndHighXYZ, XYProps, XYZProps, YawPitchRollProps } from \"@bentley/geometry-core\";\nimport { CodeProps } from \"./Code\";\nimport { EntityProps } from \"./EntityProps\";\nimport { GeometryStreamProps } from \"./geometry/GeometryStream\";\nimport { IModelError, IModelStatus } from \"./IModelError\";\nimport { CommonLoggerCategory } from \"./CommonLoggerCategory\";\nimport { Rank, SubCategoryAppearance } from \"./SubCategoryAppearance\";\n\n/** Properties of a NavigationProperty.\n * @public\n */\nexport interface RelatedElementProps {\n  /** The Id of the element to which this element is related. */\n  id: Id64String;\n  /** The full className of the relationship class. */\n  relClassName?: string;\n}\n\n/** Properties of an [Element]($docs/bis/intro/element-fundamentals)\n * @public\n */\nexport interface ElementProps extends EntityProps {\n  /** The Id of the [Model]($docs/bis/intro/model-fundamentals.md) containing this element */\n  model: Id64String;\n  /** The [Code]($docs/bis/intro/codes.md) for this element */\n  code: CodeProps;\n  /** The Parent of this element, if defined. */\n  parent?: RelatedElementProps;\n  /** A [FederationGuid]($docs/bis/intro/element-fundamentals.md#federationguid) assigned to this element by some other federated database */\n  federationGuid?: GuidString;\n  /** A [user-assigned label]($docs/bis/intro/element-fundamentals.md#userlabel) for this element. */\n  userLabel?: string;\n  /** Optional [json properties]($docs/bis/intro/element-fundamentals.md#jsonproperties) of this element. */\n  jsonProperties?: any;\n}\n\n/** The Id and relationship class of an Element that is somehow related to another Element\n * @public\n */\nexport class RelatedElement implements RelatedElementProps {\n  /** The Id of the element to which this element is related. */\n  public readonly id: Id64String;\n  /** The full className of the relationship class. */\n  public readonly relClassName?: string;\n  constructor(props: RelatedElementProps) { this.id = Id64.fromJSON(props.id); this.relClassName = props.relClassName; }\n  public static fromJSON(json?: RelatedElementProps): RelatedElement | undefined { return json ? new RelatedElement(json) : undefined; }\n\n  /** Accept the value of a navigation property that might be in the shortened format of just an id or might be in the full RelatedElement format. */\n  public static idFromJson(json: any): Id64String {\n    if ((typeof json === \"object\") && (\"id\" in json)) {\n      const r = RelatedElement.fromJSON(json);\n      if (r === undefined)\n        throw new IModelError(IModelStatus.BadArg, \"Problem parsing Id64 from json\", Logger.logWarning, CommonLoggerCategory.ElementProps);\n      return r.id;\n    }\n    return Id64.fromJSON(json);\n  }\n}\n\n/** A [RelatedElement]($common) relationship that describes the [TypeDefinitionElement]($backend) of an element.\n * @public\n */\nexport class TypeDefinition extends RelatedElement {\n}\n\n/** Properties of a [GeometricElement]($backend)\n * @public\n */\nexport interface GeometricElementProps extends ElementProps {\n  /** The id of the category for this geometric element. */\n  category: Id64String;\n  geom?: GeometryStreamProps;\n}\n\n/** Properties of a [[Placement3d]]\n * @public\n */\nexport interface Placement3dProps {\n  origin: XYZProps;\n  angles: YawPitchRollProps;\n  bbox?: LowAndHighXYZ;\n}\n\n/** Properties of a [[Placement2d]]\n * @public\n */\nexport interface Placement2dProps {\n  origin: XYProps;\n  angle: AngleProps;\n  bbox?: LowAndHighXY;\n}\n\n/** @public */\nexport type PlacementProps = Placement2dProps | Placement3dProps;\n\n/** Properties that define a [GeometricElement3d]($backend)\n * @public\n */\nexport interface GeometricElement3dProps extends GeometricElementProps {\n  placement?: Placement3dProps;\n  typeDefinition?: RelatedElementProps;\n}\n\n/** Properties that define a [GeometricElement2d]($backend)\n * @public\n */\nexport interface GeometricElement2dProps extends GeometricElementProps {\n  placement?: Placement2dProps;\n  typeDefinition?: RelatedElementProps;\n}\n\n/** Properties of a [GeometryPart]($backend)\n * @public\n */\nexport interface GeometryPartProps extends ElementProps {\n  geom?: GeometryStreamProps;\n  bbox?: LowAndHighXYZ;\n}\n\n/** Properties for a [ViewAttachment]($backend)\n * @public\n */\nexport interface ViewAttachmentProps extends GeometricElement2dProps {\n  view: RelatedElementProps;\n}\n\n/** Properties of a [Subject]($backend)\n * @public\n */\nexport interface SubjectProps extends ElementProps {\n  description?: string;\n}\n\n/** Properties of a [SheetBorderTemplate]($backend)\n * @beta\n */\nexport interface SheetBorderTemplateProps extends ElementProps {\n  height?: number;\n  width?: number;\n}\n\n/** Properties of a [SheetTemplate]($backend)\n * @beta\n */\nexport interface SheetTemplateProps extends ElementProps {\n  height?: number;\n  width?: number;\n  border?: Id64String;\n}\n\n/** Properties of a [Sheet]($backend)\n * @beta\n */\nexport interface SheetProps extends ElementProps {\n  width?: number;\n  height?: number;\n  scale?: number;\n  sheetTemplate?: Id64String;\n  attachments?: Id64String[];\n}\n\n/** Properties of a [DefinitionElement]($backend)\n * @public\n */\nexport interface DefinitionElementProps extends ElementProps {\n  isPrivate?: boolean;\n}\n\n/** Properties of a [TypeDefinitionElement]($backend)\n * @public\n */\nexport interface TypeDefinitionElementProps extends DefinitionElementProps {\n  recipe?: RelatedElementProps;\n}\n\n/** Properties of a [InformationPartitionElement]($backend)\n * @public\n */\nexport interface InformationPartitionElementProps extends DefinitionElementProps {\n  description?: string;\n}\n\n/** Parameters to specify what element to load for [IModelDb.Elements.getElementProps]($backend).\n * @public\n */\nexport interface ElementLoadProps {\n  id?: Id64String;\n  code?: CodeProps;\n  federationGuid?: GuidString;\n  /** Whether to include geometry stream in GeometricElementProps and GeometryPartProps, false when undefined */\n  wantGeometry?: boolean;\n  /** When including a geometry stream containing brep entries, whether to return the raw brep data or proxy geometry, false when undefined */\n  wantBRepData?: boolean;\n}\n\n/** Properties of an [ElementAspect]($backend)\n * @public\n */\nexport interface ElementAspectProps extends EntityProps {\n  element: RelatedElementProps;\n}\n\n/** Properties of an [ExternalSourceAspect]($backend) that stores synchronization information for an element originating from an external source.\n * @public\n */\nexport interface ExternalSourceAspectProps extends ElementAspectProps {\n  /** An element that scopes the combination of `kind` and `identifier` to uniquely identify the object from the external source. */\n  scope: RelatedElementProps;\n  /** The identifier of the object in the source repository. */\n  identifier: string;\n  /** The kind of object within the source repository. */\n  kind: string;\n  /** An optional value that is typically a version number or a psuedo version number like last modified time.\n   * It will be used by the synchronization process to detect that a source object is unchanged so that computing a cryptographic hash can be avoided.\n   * If present, this value must be guaranteed to change when any of the source object's content changes.\n   */\n  version?: string;\n  /** The cryptographic hash (any algorithm) of the source object's content. It must be guaranteed to change when the source object's content changes. */\n  checksum: string;\n  /** A place where additional JSON properties can be stored. For example, provenance information or properties relating to the synchronization process. */\n  jsonProperties?: any;\n}\n\n/** Properties of a [LineStyle]($backend)\n * @beta\n */\nexport interface LineStyleProps extends ElementProps {\n  description?: string;\n  data: string;\n}\n\n/** Properties of a [LightLocation]($backend)\n * @internal\n */\nexport interface LightLocationProps extends GeometricElement3dProps {\n  enabled?: boolean;\n}\n\n/** Parameters of a [Category]($backend)\n * @public\n */\nexport interface CategoryProps extends ElementProps {\n  rank?: Rank;\n  description?: string;\n}\n\n/** Parameters of a [SubCategory]($backend)\n * @public\n */\nexport interface SubCategoryProps extends ElementProps {\n  appearance?: SubCategoryAppearance.Props;\n  description?: string;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module WireFormats */\n\nimport { Id64String, Id64 } from \"@bentley/bentleyjs-core\";\nimport { Point2d, Point3d } from \"@bentley/geometry-core\";\nimport { RelatedElement } from \"./ElementProps\";\n\n/** The properties of an [Entity]($backend) as they are read/stored from/to the iModel.\n * @public\n */\nexport interface EntityProps {\n  /** The full name of the [ECClass]($docs/bis/intro/glossary/#ecclass) for this entity, in the form \"Schema:ClassName\" */\n  classFullName: string;\n  /** The Id of the entity. Must be present for SELECT, UPDATE, or DELETE, ignored for INSERT. */\n  id?: Id64String;\n\n  [propName: string]: any;\n}\n\n/** Parameters for performing a query on [Entity]($backend) classes.\n * @public\n */\nexport interface EntityQueryParams {\n  /** The sql className, in the form \"Schema.ClassName\", of the class to search. */\n  from?: string;\n  /** Set to true to limit results to *not* include sub-classes of \"from\" class */\n  only?: boolean;\n  /** Optional \"WHERE\" clause to filter entities. Note: do *not* include the \"WHERE\" keyword. */\n  where?: string;\n  /** Optional \"ORDERBY\" clause to sort results. Note: do *not* include the \"ORDERBY\" keyword. */\n  orderBy?: string;\n  /** Optional \"LIMIT\" clause to limit the number of rows returned. */\n  limit?: number;\n  /** Optional \"OFFSET\" clause. Only valid if Limit is also present. */\n  offset?: number;\n}\n\n/** The primitive types of an Entity property.\n * @beta\n */\nexport enum PrimitiveTypeCode {\n  Uninitialized = 0x00,\n  Binary = 0x101,\n  Boolean = 0x201,\n  DateTime = 0x301,\n  Double = 0x401,\n  Integer = 0x501,\n  Long = 0x601,\n  Point2d = 0x701,\n  Point3d = 0x801,\n  String = 0x901,\n}\n\n/** A callback function to process properties of an Entity\n * @beta\n */\nexport type PropertyCallback = (name: string, meta: PropertyMetaData) => void;\n\n/** A custom attribute instance\n * @beta\n */\nexport interface CustomAttribute {\n  /** The class of the CustomAttribute */\n  ecclass: string;\n  /** An object whose properties correspond by name to the properties of this custom attribute instance. */\n  properties: { [propName: string]: any };\n}\n\ntype FactoryFunc = (jsonObj: any) => any;\n\n/** @beta */\nexport interface PropertyMetaDataProps {\n  primitiveType?: number;\n  structName?: string;\n  extendedType?: string;\n  description?: string;\n  displayLabel?: string;\n  minimumValue?: any;\n  maximumValue?: any;\n  minimumLength?: number;\n  maximumLength?: number;\n  readOnly?: boolean;\n  kindOfQuantity?: string;\n  isCustomHandled?: boolean;\n  isCustomHandledOrphan?: boolean;\n  minOccurs?: number;\n  maxOccurs?: number;\n  direction?: string;\n  relationshipClass?: string;\n  customAttributes?: CustomAttribute[];\n}\n\n/** Metadata for a property.\n * @beta\n */\nexport class PropertyMetaData implements PropertyMetaDataProps {\n  public primitiveType?: PrimitiveTypeCode;\n  public structName?: string;\n  public extendedType?: string;\n  public description?: string;\n  public displayLabel?: string;\n  public minimumValue?: any;\n  public maximumValue?: any;\n  public minimumLength?: number;\n  public maximumLength?: number;\n  public readOnly?: boolean;\n  public kindOfQuantity?: string;\n  public isCustomHandled?: boolean;\n  public isCustomHandledOrphan?: boolean;\n  public minOccurs?: number;\n  public maxOccurs?: number;\n  public direction?: string;\n  public relationshipClass?: string;\n  public customAttributes?: CustomAttribute[];\n\n  public constructor(jsonObj: PropertyMetaDataProps) {\n    this.primitiveType = jsonObj.primitiveType;\n    if (jsonObj.structName)\n      this.structName = jsonObj.structName;\n    this.extendedType = jsonObj.extendedType;\n    this.description = jsonObj.description;\n    this.displayLabel = jsonObj.displayLabel;\n    if (undefined !== jsonObj.minimumValue)\n      this.minimumValue = jsonObj.minimumValue;\n    if (undefined !== jsonObj.maximumValue)\n      this.maximumValue = jsonObj.maximumValue;\n    if (undefined !== jsonObj.minimumLength)\n      this.minimumLength = jsonObj.minimumLength;\n    if (undefined !== jsonObj.maximumLength)\n      this.maximumLength = jsonObj.maximumLength;\n    this.readOnly = jsonObj.readOnly;\n    this.kindOfQuantity = jsonObj.kindOfQuantity;\n    this.isCustomHandled = jsonObj.isCustomHandled;\n    if (undefined !== jsonObj.minOccurs)\n      this.minOccurs = jsonObj.minOccurs;\n    if (undefined !== jsonObj.maxOccurs)\n      this.maxOccurs = jsonObj.maxOccurs;\n    this.direction = jsonObj.direction;\n    this.relationshipClass = jsonObj.relationshipClass;\n    this.customAttributes = jsonObj.customAttributes;\n  }\n\n  /** Create a typed value, or array of values, from a factory and an input object */\n  private createValueOrArray(func: FactoryFunc, jsonObj: any) {\n    if (undefined === this.minOccurs)\n      return func(jsonObj); // not an array\n\n    const val: any = [];\n    jsonObj.forEach((element: any) => val.push(func(element)));\n    return val;\n  }\n\n  /** construct a single property from an input object according to this metadata */\n  public createProperty(jsonObj: any): any {\n    if (jsonObj === undefined)\n      return undefined;\n\n    if (undefined !== this.primitiveType) {\n      switch (this.primitiveType) {\n        case PrimitiveTypeCode.Boolean:\n        case PrimitiveTypeCode.Double:\n        case PrimitiveTypeCode.Integer:\n        case PrimitiveTypeCode.String:\n          return jsonObj; // this works even for arrays or strings that are JSON because the parsed JSON is already the right type\n\n        case PrimitiveTypeCode.Point2d:\n          return this.createValueOrArray(Point2d.fromJSON, jsonObj);\n\n        case PrimitiveTypeCode.Point3d:\n          return this.createValueOrArray(Point3d.fromJSON, jsonObj);\n      }\n    }\n    if (this.direction !== undefined)  // the presence of this means it is a navigation property\n      return jsonObj.id !== undefined ? new RelatedElement(jsonObj) : Id64.fromJSON(jsonObj);\n\n    return jsonObj;\n  }\n}\n\n/** @beta */\nexport interface EntityMetaDataProps {\n  ecclass: string;\n  description?: string;\n  modifier?: string;\n  displayLabel?: string;\n  /** The  base classes from which this class derives. If more than one, the first is the super class and the others are [mixins]($docs/bis/ec/ec-mixin-class). */\n  baseClasses: string[];\n  /** The Custom Attributes for this class */\n  customAttributes?: CustomAttribute[];\n  /** An object whose properties correspond by name to the properties of this class. */\n  properties: { [propName: string]: PropertyMetaData };\n}\n\n/** Metadata for an Entity.\n * @beta\n */\nexport class EntityMetaData implements EntityMetaDataProps {\n  /** The Entity name */\n  public readonly ecclass: string;\n  public readonly description?: string;\n  public readonly modifier?: string;\n  public readonly displayLabel?: string;\n  /** The  base class that this class is derives from. If more than one, the first is the actual base class and the others are mixins. */\n  public readonly baseClasses: string[];\n  /** The Custom Attributes for this class */\n  public readonly customAttributes?: CustomAttribute[];\n  /** An object whose properties correspond by name to the properties of this class. */\n  public readonly properties: { [propName: string]: PropertyMetaData };\n\n  public constructor(jsonObj: EntityMetaDataProps) {\n    this.ecclass = jsonObj.ecclass;\n    this.description = jsonObj.description;\n    this.modifier = jsonObj.modifier;\n    this.displayLabel = jsonObj.displayLabel;\n    this.baseClasses = jsonObj.baseClasses;\n    this.customAttributes = jsonObj.customAttributes;\n    this.properties = {};\n    for (const propName in jsonObj.properties) {\n      if (propName)\n        this.properties[propName] = new PropertyMetaData(jsonObj.properties[propName]);\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\nimport { BeEvent } from \"@bentley/bentleyjs-core\";\n\n/** @internal */\nexport type GateValue = number | boolean | string | undefined;\n\n/** A set of \"gates\" that can enable or disable features at runtime.\n * @internal\n */\nexport class FeatureGates {\n  /** Event raised every time any feature changes. */\n  public onChanged = new BeEvent<(feature: string, val: GateValue) => void>();\n\n  /** A map of the current set of features. */\n  public readonly gates = new Map<string, GateValue>();\n\n  /** Get the value of a potentially gated feature.\n   * @param feature The name of the feature to check. May be a \"path\" of period-separated feature sub-groups (e.g. \"feature1.groupA.showMe\").\n   *       Feature names are case-sensitive.\n   * @param defaultVal Optionally, value to return if feature is undefined.\n   */\n  public check(feature: string, defaultVal?: GateValue): GateValue {\n    const val = this.gates.get(feature);\n    return val === undefined ? defaultVal : val;\n  }\n\n  /** Gate access to a feature.\n   * @param feature The name of the feature to gate. May be a \"path\" of period-separated feature sub-groups (e.g. \"feature1.groupA.showMe\").\n   *  Feature names are case-sensitive.\n   * @param val Value to set. If undefined, feature is deleted.\n   */\n  public setGate(feature: string, val: GateValue): void {\n    if (feature.length === 0)\n      return;\n    if (val === undefined)\n      this.gates.delete(feature);\n    else\n      this.gates.set(feature, val);\n\n    this.onChanged.raiseEvent(feature, val);\n  }\n\n  /** Register a listener to be called whenever the value of a specific gate changes.\n   * @param feature The name of the feature to monitor\n   * @param monitor The listener to call when `feature` changes. Receives a single argument holding the new value of the feature (may be undefined).\n   * @returns A function that may be called to remove the listener.\n   * @note Use [[onChanged]] to listen to changes for *all* gates.\n   */\n  public addMonitor(feature: string, monitor: (val: GateValue) => void): () => void { return this.onChanged.addListener((changed, val) => { if (changed === feature) monitor(val); }); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Rendering */\n\nimport { ColorDef } from \"./ColorDef\";\n\n/** @internal */\nexport class NonUniformColor {\n  public readonly colors: Uint32Array;\n  public readonly indices: Uint16Array;\n  public readonly isOpaque: boolean;\n\n  public constructor(colors: Uint32Array, indices: number[], hasAlpha: boolean) {\n    this.colors = new Uint32Array(colors.buffer);\n    this.indices = Uint16Array.from(indices);\n    this.isOpaque = !hasAlpha;\n  }\n}\n\n/** @internal */\nexport class ColorIndex {\n  private _color: ColorDef | NonUniformColor;\n\n  public get hasAlpha() { return !this._color.isOpaque; }\n  public get isUniform() { return this._color instanceof ColorDef; }\n  public get numColors(): number { return this.isUniform ? 1 : this.nonUniform!.colors.length; }\n\n  public constructor() { this._color = ColorDef.white.clone(); }\n\n  public reset() { this._color = ColorDef.white.clone(); }\n\n  public get uniform(): ColorDef | undefined { return this.isUniform ? this._color as ColorDef : undefined; }\n  public initUniform(color: ColorDef | number) { this._color = (\"number\" === typeof color) ? new ColorDef(color) : (color as ColorDef).clone(); }\n\n  public get nonUniform(): NonUniformColor | undefined { return !this.isUniform ? this._color as NonUniformColor : undefined; }\n  public initNonUniform(colors: Uint32Array, indices: number[], hasAlpha: boolean) {\n    this._color = new NonUniformColor(colors, indices, hasAlpha);\n  }\n}\n\n/** @internal */\nexport enum FeatureIndexType {\n  Empty,\n  Uniform,\n  NonUniform,\n}\n\n/** @internal */\nexport class FeatureIndex {\n  public type: FeatureIndexType = FeatureIndexType.Empty;\n  public featureID: number = 0;\n  public featureIDs?: Uint32Array;\n\n  public constructor() {\n    this.reset();\n  }\n\n  public get isUniform(): boolean { return FeatureIndexType.Uniform === this.type; }\n  public get isEmpty(): boolean { return FeatureIndexType.Empty === this.type; }\n  public reset(): void { this.type = FeatureIndexType.Empty; this.featureID = 0; this.featureIDs = undefined; }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Symbology */\n\n/** The type of a font.\n * @public\n */\nexport enum FontType { TrueType = 1, Rsc = 2, Shx = 3 }\n\n/** The properties of a Font. This includes a iModel local id, the font type, and the font name.\n * @public\n */\nexport interface FontProps { id: number; type: FontType; name: string; }\n\n/** The properties of a FontMap\n * @public\n */\nexport interface FontMapProps { fonts: FontProps[]; }\n\n/** A FontMap holds the table of known fonts available in an iModel.\n * A font is referenced by an \"id\" that is local to the iModel. This table maps those local ids to a FontProps.\n * @public\n */\nexport class FontMap {\n  public readonly fonts = new Map<number, FontProps>();\n  constructor(props: FontMapProps) { props.fonts.forEach((font) => this.fonts.set(font.id, font)); }\n  public toJSON(): FontMapProps {\n    const fonts: FontProps[] = [];\n    this.fonts.forEach((font) => fonts.push(font));\n    return { fonts };\n  }\n  /** look up a font by name or number and return its FontProps */\n  public getFont(arg: string | number): FontProps | undefined {\n    if (typeof arg === \"number\") return this.fonts.get(arg);\n    for (const font of this.fonts.values())\n      if (font.name === arg) return font;\n    return undefined;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Views */\n\nimport { Vector3d, Point3d, LowAndHighXYZ, LowAndHighXY, Range3d, Transform, Geometry, Map4d, ConvexClipPlaneSet, ClipPlane } from \"@bentley/geometry-core\";\n\n/** The 8 corners of the [Normalized Plane Coordinate]($docs/learning/glossary.md#npc) cube.\n * @public\n */\nexport enum Npc {\n  /** Left bottom rear */\n  _000 = 0,\n  /** Right bottom rear */\n  _100 = 1,\n  /** Left top rear */\n  _010 = 2,\n  /** Right top rear */\n  _110 = 3,\n  /** Left bottom front */\n  _001 = 4,\n  /** Right bottom front */\n  _101 = 5,\n  /** Left top front */\n  _011 = 6,\n  /** Right top front */\n  _111 = 7,\n\n  LeftBottomRear = 0,\n  RightBottomRear = 1,\n  LeftTopRear = 2,\n  RightTopRear = 3,\n  LeftBottomFront = 4,\n  RightBottomFront = 5,\n  LeftTopFront = 6,\n  RightTopFront = 7,\n  /** useful for sizing arrays */\n  CORNER_COUNT = 8,\n}\n\n/** The 8 corners of an [[Npc]] Frustum.\n * @public\n */\nexport const NpcCorners = [ // tslint:disable-line:variable-name\n  new Point3d(0.0, 0.0, 0.0),\n  new Point3d(1.0, 0.0, 0.0),\n  new Point3d(0.0, 1.0, 0.0),\n  new Point3d(1.0, 1.0, 0.0),\n  new Point3d(0.0, 0.0, 1.0),\n  new Point3d(1.0, 0.0, 1.0),\n  new Point3d(0.0, 1.0, 1.0),\n  new Point3d(1.0, 1.0, 1.0),\n];\nNpcCorners.forEach((corner) => Object.freeze(corner));\nObject.freeze(NpcCorners);\n\n/** The center point of the [Normalized Plane Coordinate]($docs/learning/glossary.md#npc) cube.\n * @public\n */\nexport const NpcCenter = new Point3d(.5, .5, .5); // tslint:disable-line:variable-name\nObject.freeze(NpcCenter);\n\n/** The region of physical (3d) space that appears in a view. It forms the field-of-view of a camera.\n * It is stored as 8 points, in [[Npc]] order, that must define a truncated pyramid.\n * @public\n */\nexport class Frustum {\n  /** Array of the 8 points of this Frustum. */\n  public readonly points: Point3d[] = [];\n  /** Constructor for Frustum. Members are initialized to the Npc cube. */\n  public constructor() { for (let i = 0; i < 8; ++i) this.points[i] = NpcCorners[i].clone(); }\n  /** Initialize this Frustum to the 8 corners of the NPC cube. */\n  public initNpc() { for (let i = 0; i < 8; ++i) Point3d.createFrom(NpcCorners[i], this.points[i]); return this; }\n  /** Get a corner Point from this Frustum. */\n  public getCorner(i: number) { return this.points[i]; }\n  /** Get the point at the center of this Frustum (halfway between RightTopFront and LeftBottomRear. */\n  public getCenter(): Point3d { return this.getCorner(Npc.RightTopFront).interpolate(0.5, this.getCorner(Npc.LeftBottomRear)); }\n  /** Get the distance between two corners of this Frustum. */\n  public distance(corner1: number, corner2: number): number { return this.getCorner(corner1).distance(this.getCorner(corner2)); }\n  /** Get the ratio of the length of the diagonal of the front plane to the diagonal of the back plane. */\n  public getFraction(): number { return Geometry.safeDivideFraction(this.distance(Npc.LeftTopFront, Npc.RightBottomFront), this.distance(Npc.LeftTopRear, Npc.RightBottomRear), 0); }\n  /** Multiply all the points of this Frustum by a Transform, in place. */\n  public multiply(trans: Transform): void { trans.multiplyPoint3dArrayInPlace(this.points); }\n  /** Offset all of the points of this Frustum by a vector. */\n  public translate(offset: Vector3d): void { for (const pt of this.points) pt.plus(offset); }\n  /** Transform all the points of this Frustum and return the result in another Frustum. */\n  public transformBy(trans: Transform, result?: Frustum): Frustum { result = result ? result : new Frustum(); trans.multiplyPoint3dArray(this.points, result.points); return result; }\n  /** Calculate a bounding range from the 8 points in this Frustum. */\n  public toRange(range?: Range3d): Range3d { range = range ? range : new Range3d(); Range3d.createArray(this.points, range); return range; }\n  /** Make a copy of this Frustum.\n   * @param result Optional Frustum for copy. If undefined allocate a new Frustum.\n   */\n  public clone(result?: Frustum): Frustum { result = result ? result : new Frustum(); result.setFrom(this); return result; }\n  /** Set the points of this Frustum to be copies of the points in another Frustum. */\n  public setFrom(other: Frustum) { for (let i = 0; i < 8; ++i) { this.points[i].setFrom(other.points[i]); } }\n  /** Scale this Frustum, in place, about its center by a scale factor. */\n  public scaleAboutCenter(scale: number): void {\n    const orig = this.clone();\n    const f = 0.5 * (1.0 + scale);\n    orig.points[Npc._111].interpolate(f, orig.points[Npc._000], this.points[Npc._000]);\n    orig.points[Npc._011].interpolate(f, orig.points[Npc._100], this.points[Npc._100]);\n    orig.points[Npc._101].interpolate(f, orig.points[Npc._010], this.points[Npc._010]);\n    orig.points[Npc._001].interpolate(f, orig.points[Npc._110], this.points[Npc._110]);\n    orig.points[Npc._110].interpolate(f, orig.points[Npc._001], this.points[Npc._001]);\n    orig.points[Npc._010].interpolate(f, orig.points[Npc._101], this.points[Npc._101]);\n    orig.points[Npc._100].interpolate(f, orig.points[Npc._011], this.points[Npc._011]);\n    orig.points[Npc._000].interpolate(f, orig.points[Npc._111], this.points[Npc._111]);\n  }\n\n  /** Create a Map4d that converts world coordinates to/from [[Npc]] coordinates of this Frustum. */\n  public toMap4d(): Map4d | undefined {\n    const org = this.getCorner(Npc.LeftBottomRear);\n    const xVec = org.vectorTo(this.getCorner(Npc.RightBottomRear));\n    const yVec = org.vectorTo(this.getCorner(Npc.LeftTopRear));\n    const zVec = org.vectorTo(this.getCorner(Npc.LeftBottomFront));\n    return Map4d.createVectorFrustum(org, xVec, yVec, zVec, this.getFraction());\n  }\n\n  /** Invalidate this Frustum by setting all 8 points to zero. */\n  public invalidate(): void { for (let i = 0; i < 8; ++i) this.points[i].set(0, 0, 0); }\n  /** Return true if this Frustum is equal to another Frustum */\n  public equals(rhs: Frustum): boolean {\n    for (let i = 0; i < 8; ++i) {\n      if (!this.points[i].isExactEqual(rhs.points[i]))\n        return false;\n    }\n    return true;\n  }\n  /** Return true if all of the points in this Frustum are *almost* the same as the points in another Frustum.\n   * @see [[equals]], [XYZ.isAlmostEqual]($geometry)\n   */\n  public isSame(other: Frustum): boolean { for (let i = 0; i < 8; ++i) { if (!this.points[i].isAlmostEqual(other.points[i])) return false; } return true; }\n\n  /** Initialize this Frustum from a Range */\n  public initFromRange(range: LowAndHighXYZ | LowAndHighXY): void {\n    const getZ = (arg: any): number => arg.z !== undefined ? arg.z : 0;\n    const pts = this.points;\n    pts[0].x = pts[2].x = pts[4].x = pts[6].x = range.low.x;\n    pts[1].x = pts[3].x = pts[5].x = pts[7].x = range.high.x;\n    pts[0].y = pts[1].y = pts[4].y = pts[5].y = range.low.y;\n    pts[2].y = pts[3].y = pts[6].y = pts[7].y = range.high.y;\n    pts[0].z = pts[1].z = pts[2].z = pts[3].z = getZ(range.low);\n    pts[4].z = pts[5].z = pts[6].z = pts[7].z = getZ(range.high);\n  }\n\n  /** Create a new Frustum from a Range3d */\n  public static fromRange(range: LowAndHighXYZ | LowAndHighXY, out?: Frustum): Frustum {\n    const frustum = undefined !== out ? out : new Frustum();\n    frustum.initFromRange(range);\n    return frustum;\n  }\n\n  /** Return true if this Frustum has a mirror (is not in the correct order.) */\n  public get hasMirror(): boolean {\n    const pts = this.points;\n    const u = pts[Npc._000].vectorTo(pts[Npc._001]);\n    const v = pts[Npc._000].vectorTo(pts[Npc._010]);\n    const w = pts[Npc._000].vectorTo(pts[Npc._100]);\n    return (u.tripleProduct(v, w) > 0);\n  }\n  /** Make sure the frustum point order does not include mirroring. If so, reverse the order. */\n  public fixPointOrder(): void {\n    if (!this.hasMirror)\n      return;\n\n    // frustum has mirroring, reverse points\n    const pts = this.points;\n    for (let i = 0; i < 8; i += 2) {\n      const tmpPoint = pts[i];\n      pts[i] = pts[i + 1];\n      pts[i + 1] = tmpPoint;\n    }\n  }\n\n  /** Get a convex set of clipping planes bounding the region contained by this Frustum. */\n  public getRangePlanes(clipFront: boolean, clipBack: boolean, expandPlaneDistance: number): ConvexClipPlaneSet {\n    const convexSet = ConvexClipPlaneSet.createEmpty();\n    const scratchNormal = Vector3d.create();\n    Vector3d.createCrossProductToPoints(this.points[5], this.points[3], this.points[1], scratchNormal);\n    if (scratchNormal.normalizeInPlace())\n      convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[1]) - expandPlaneDistance));\n    Vector3d.createCrossProductToPoints(this.points[2], this.points[4], this.points[0], scratchNormal);\n    if (scratchNormal.normalizeInPlace())\n      convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[0]) - expandPlaneDistance));\n    Vector3d.createCrossProductToPoints(this.points[3], this.points[6], this.points[2], scratchNormal);\n    if (scratchNormal.normalizeInPlace())\n      convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[2]) - expandPlaneDistance));\n    Vector3d.createCrossProductToPoints(this.points[4], this.points[1], this.points[0], scratchNormal);\n    if (scratchNormal.normalizeInPlace())\n      convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[0]) - expandPlaneDistance));\n\n    if (clipBack) {\n      Vector3d.createCrossProductToPoints(this.points[1], this.points[2], this.points[0], scratchNormal);\n      if (scratchNormal.normalizeInPlace())\n        convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[0]) - expandPlaneDistance));\n    }\n    if (clipFront) {\n      Vector3d.createCrossProductToPoints(this.points[6], this.points[5], this.points[4], scratchNormal);\n      if (scratchNormal.normalizeInPlace())\n        convexSet.addPlaneToConvexSet(ClipPlane.createNormalAndDistance(scratchNormal, scratchNormal.dotProduct(this.points[4]) - expandPlaneDistance));\n    }\n    return convexSet;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module Views */\r\n\r\nimport { XYZProps } from \"@bentley/geometry-core\";\r\n\r\n/** @public */\r\nexport enum GeoCoordStatus {\r\n  Success = 0,\r\n  NoGCSDefined = 100,\r\n  OutOfUsefulRange = 1,\r\n  OutOfMathematicalDomain = 2,\r\n  NoDatumConverter = 25,\r\n  VerticalDatumConvertError = 26,\r\n  CSMapError = 4096,\r\n  Pending = -41556,\r\n}\r\n\r\n/** Information required to request conversion of an array of Geographic coordinates (Longitude/Latitude) to iModel coordinates\r\n * @beta\r\n */\r\nexport interface IModelCoordinatesRequestProps {\r\n  sourceDatum: string;\r\n  geoCoords: XYZProps[];\r\n}\r\n\r\n/** Information returned from a request to convert an array of Geographic coordinates (Longitude/Latitude) to iModel coordinates\r\n * @beta\r\n */\r\nexport interface PointWithStatus {\r\n  p: XYZProps;\r\n  s: GeoCoordStatus;\r\n}\r\n\r\n/** @beta */\r\nexport interface IModelCoordinatesResponseProps {\r\n  iModelCoords: PointWithStatus[];\r\n  fromCache: number;    // the number that were read from the cache rather than calculated.\r\n}\r\n\r\n/** Information required to request conversion of an array of iModel coordinates to Geographic Coordinates (longitude and latitude)\r\n * @beta\r\n */\r\nexport interface GeoCoordinatesRequestProps {\r\n  targetDatum: string;\r\n  iModelCoords: XYZProps[];\r\n}\r\n\r\n/** Information returned from a request to convert an array of iModel coordinates to Geographic Coordinates (longitude and latitude)\r\n * @beta\r\n */\r\nexport interface GeoCoordinatesResponseProps {\r\n  geoCoords: PointWithStatus[];\r\n  fromCache: number;    // the number that were read from the cache rather than calculated.\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module iModels */\n\nimport { GuidString, Id64, Id64String, IModelStatus, OpenMode } from \"@bentley/bentleyjs-core\";\nimport { AxisOrder, Matrix3d, Point3d, Range3dProps, Transform, Vector3d, XYAndZ, XYZProps, YawPitchRollAngles, YawPitchRollProps, Range3d } from \"@bentley/geometry-core\";\nimport { Cartographic } from \"./geometry/Cartographic\";\nimport { AxisAlignedBox3d } from \"./geometry/Placement\";\nimport { IModelError } from \"./IModelError\";\nimport { ThumbnailProps } from \"./Thumbnail\";\n\n/** The properties of IModelToken.\n * @public\n */\nexport interface IModelTokenProps {\n  /** Key used for identifying the iModel on the backend */\n  readonly key?: string;\n  /** Context (Project, Asset, or other infrastructure) in which the iModel exists - must be defined if the iModel exists in the Hub or in a non-Connect infrastructure. */\n  readonly contextId?: string;\n  /** Guid of the iModel - must be defined if the iModel exists in the Hub */\n  readonly iModelId?: string;\n  /** Id of the last ChangeSet that was applied to the iModel - must be defined if the iModel exists in the Hub. An empty string indicates the first version */\n  changeSetId?: string;\n  /** Mode used to open the iModel */\n  openMode?: OpenMode;\n}\n\n/** A token that identifies a specific instance of an iModel to be operated on\n * @public\n */\nexport class IModelToken implements IModelTokenProps {\n  /** Constructs an IModelToken from a props object. */\n  public static fromJSON(props: IModelTokenProps): IModelToken {\n    return new IModelToken(props.key, props.contextId, props.iModelId, props.changeSetId, props.openMode);\n  }\n  /** Key used for identifying the iModel on the backend */\n  public readonly key?: string;\n  /** Context (Project, Asset, or other infrastructure) in which the iModel exists - must be defined if the iModel exists in the Hub or in a non-Connect infrastructure. */\n  public readonly contextId?: string;\n  /** Guid of the iModel - must be defined if the iModel exists in the Hub */\n  public readonly iModelId?: string;\n  /** Id of the last ChangeSet that was applied to the iModel - must be defined if the iModel exists in the Hub. An empty string indicates the first version */\n  public changeSetId?: string;\n  /** Mode used to open the iModel */\n  public openMode?: OpenMode;\n\n  /** Constructor */\n  public constructor(key?: string, contextId?: string, iModelid?: string, changesetId?: string, openMode?: OpenMode) {\n    this.key = key;\n    this.contextId = contextId;\n    this.iModelId = iModelid;\n    this.changeSetId = changesetId;\n    this.openMode = openMode;\n  }\n\n  /** Creates a props object for this IModelToken. */\n  public toJSON(): IModelTokenProps {\n    return {\n      key: this.key,\n      contextId: this.contextId,\n      iModelId: this.iModelId,\n      changeSetId: this.changeSetId,\n      openMode: this.openMode,\n    };\n  }\n}\n\n/** Properties that position an iModel on the earth via [ECEF](https://en.wikipedia.org/wiki/ECEF) (Earth Centered Earth Fixed) coordinates\n * @public\n */\nexport interface EcefLocationProps {\n  /** The Origin of an iModel on the earth in ECEF coordinates */\n  origin: XYZProps;\n  /** The [orientation](https://en.wikipedia.org/wiki/Geographic_coordinate_conversion) of an iModel on the earth. */\n  orientation: YawPitchRollProps;\n}\n\n/** The position and orientation of an iModel on the earth in [ECEF](https://en.wikipedia.org/wiki/ECEF) (Earth Centered Earth Fixed) coordinates\n * @public\n */\nexport class EcefLocation implements EcefLocationProps {\n  /** The origin of the ECEF transform. */\n  public readonly origin: Point3d;\n  /** The orientation of the ECEF transform */\n  public readonly orientation: YawPitchRollAngles;\n  /** Get the transform from iModel Spatial coordinates to ECEF from this EcefLocation */\n  public getTransform(): Transform { return Transform.createOriginAndMatrix(this.origin, this.orientation.toMatrix3d()); }\n\n  /** Construct a new EcefLocation. Once constructed, it is frozen and cannot be modified. */\n  constructor(props: EcefLocationProps) {\n    this.origin = Point3d.fromJSON(props.origin);\n    this.orientation = YawPitchRollAngles.fromJSON(props.orientation);\n    this.origin.freeze(); // may not be modified\n    this.orientation.freeze(); // may not be modified\n  }\n  /** Construct ECEF Location from cartographic origin.   */\n  public static createFromCartographicOrigin(origin: Cartographic) {\n    const ecefOrigin = origin.toEcef();\n    const zVector = Vector3d.createFrom(ecefOrigin).normalize();\n    const xVector = Vector3d.create(-Math.sin(origin.longitude), Math.cos(origin.latitude), 0.0);\n    const matrix = Matrix3d.createRigidFromColumns(zVector!, xVector, AxisOrder.ZXY);\n    return new EcefLocation({ origin: ecefOrigin, orientation: YawPitchRollAngles.createFromMatrix3d(matrix!)! });\n  }\n}\n\n/** Properties of the [Root Subject]($docs/bis/intro/glossary#subject-root).\n * @public\n */\nexport interface RootSubjectProps {\n  /** The name of the root subject. */\n  name: string;\n  /** Description of the root subject (optional). */\n  description?: string;\n}\n\n/** Properties that are about an iModel.\n * @public\n */\nexport interface IModelProps {\n  /** The name and description of the root subject of this iModel */\n  rootSubject: RootSubjectProps;\n  /** The volume of the entire project, in spatial coordinates */\n  projectExtents?: Range3dProps;\n  /** An offset to be applied to all spatial coordinates. This is normally used to transform spatial coordinates into the Cartesian coordinate system of a Geographic Coordinate System. */\n  globalOrigin?: XYZProps;\n  /** The location of the iModel in Earth Centered Earth Fixed coordinates. iModel units are always meters */\n  ecefLocation?: EcefLocationProps;\n  /** The name of the iModel. */\n  name?: string;\n  /** The token of the iModel. */\n  iModelToken?: IModelTokenProps;\n}\n\n/** The properties that can be supplied when creating a *new* iModel.\n * @public\n */\nexport interface CreateIModelProps extends IModelProps {\n  /** The GUID of new iModel. If not present, a GUID will be generated. */\n  guid?: GuidString;\n  /** Client name for new iModel */\n  client?: string;\n  /** Thumbnail for new iModel\n   * @alpha\n   */\n  thumbnail?: ThumbnailProps;\n}\n\n/** @public */\nexport interface FilePropertyProps {\n  namespace: string;\n  name: string;\n  id?: number | string;\n  subId?: number | string;\n}\n\n/** Represents an iModel in JavaScript.\n * @public\n */\nexport abstract class IModel implements IModelProps {\n  /** The Id of the repository model. */\n  public static readonly repositoryModelId: Id64String = \"0x1\";\n  /** The Id of the root subject element. */\n  public static readonly rootSubjectId: Id64String = \"0x1\";\n  /** The Id of the dictionary model. */\n  public static readonly dictionaryId: Id64String = \"0x10\";\n  /** Name of the iModel */\n  public name!: string;\n  /** The name and description of the root subject of this iModel */\n  public rootSubject!: RootSubjectProps;\n\n  private _projectExtents!: AxisAlignedBox3d;\n  /**\n   * The volume, in spatial coordinates, inside which the entire project is contained.\n   * @note The object returned from this method is frozen. You *must* make a copy before you do anything that might attempt to modify it.\n   */\n  public get projectExtents() { return this._projectExtents; }\n  public set projectExtents(extents: AxisAlignedBox3d) {\n    this._projectExtents = extents.clone();\n    this._projectExtents.ensureMinLengths(1.0);  // don't allow any axis of the project extents to be less than 1 meter.\n    this._projectExtents.freeze();\n  }\n\n  private _globalOrigin!: Point3d;\n  /** An offset to be applied to all spatial coordinates. */\n  public get globalOrigin(): Point3d { return this._globalOrigin; }\n\n  private _ecefLocation?: EcefLocation;\n  private _ecefTrans?: Transform;\n\n  /** The [EcefLocation]($docs/learning/glossary#ecefLocation) of the iModel in Earth Centered Earth Fixed coordinates. */\n  public get ecefLocation(): EcefLocation | undefined { return this._ecefLocation; }\n\n  /** Set the [EcefLocation]($docs/learning/glossary#ecefLocation) for this iModel. */\n  public setEcefLocation(ecef: EcefLocationProps) {\n    this._ecefLocation = new EcefLocation(ecef);\n    this._ecefTrans = undefined;\n  }\n\n  /** @internal */\n  public toJSON(): IModelProps {\n    const out: any = {};\n    out.name = this.name;\n    out.rootSubject = this.rootSubject;\n    out.projectExtents = this.projectExtents.toJSON();\n    out.globalOrigin = this.globalOrigin.toJSON();\n    out.ecefLocation = this.ecefLocation;\n    out.iModelToken = this.iModelToken;\n    return out;\n  }\n\n  /** @internal */\n  protected _token: IModelToken;\n\n  /** The token that can be used to find this iModel instance. */\n  public get iModelToken(): IModelToken { return this._token; }\n\n  /** @internal */\n  protected constructor(iModelToken: IModelToken) { this._token = iModelToken; }\n\n  /** @internal */\n  protected initialize(name: string, props: IModelProps) {\n    this.name = name;\n    this.rootSubject = props.rootSubject;\n    this.projectExtents = Range3d.fromJSON(props.projectExtents);\n    this._globalOrigin = Point3d.fromJSON(props.globalOrigin);\n    this._globalOrigin.freeze(); // cannot be modified\n    if (props.ecefLocation)\n      this.setEcefLocation(props.ecefLocation);\n  }\n\n  /** Get the default subCategoryId for the supplied categoryId */\n  public static getDefaultSubCategoryId(categoryId: Id64String): Id64String {\n    return Id64.isValid(categoryId) ? Id64.fromLocalAndBriefcaseIds(Id64.getLocalId(categoryId) + 1, Id64.getBriefcaseId(categoryId)) : Id64.invalid;\n  }\n\n  /** True if this iModel has an [EcefLocation]($docs/learning/glossary#ecefLocation). */\n  public get isGeoLocated() { return undefined !== this._ecefLocation; }\n\n  /** Get the Transform from this iModel's Spatial coordinates to ECEF coordinates using its [[IModel.ecefLocation]].\n   * @throws IModelError if [[isGeoLocated]] is false.\n   */\n  public getEcefTransform(): Transform {\n    if (undefined === this._ecefLocation)\n      throw new IModelError(IModelStatus.NoGeoLocation, \"iModel is not GeoLocated\");\n\n    if (this._ecefTrans === undefined) {\n      this._ecefTrans = this._ecefLocation.getTransform();\n      this._ecefTrans.freeze();\n    }\n\n    return this._ecefTrans;\n  }\n\n  /**\n   * Convert a point in this iModel's Spatial coordinates to an ECEF point using its [[IModel.ecefLocation]].\n   * @param spatial A point in the iModel's spatial coordinates\n   * @param result If defined, use this for output\n   * @returns A Point3d in ECEF coordinates\n   * @throws IModelError if [[isGeoLocated]] is false.\n   */\n  public spatialToEcef(spatial: XYAndZ, result?: Point3d): Point3d { return this.getEcefTransform().multiplyPoint3d(spatial, result)!; }\n\n  /**\n   * Convert a point in ECEF coordinates to a point in this iModel's Spatial coordinates using its [[ecefLocation]].\n   * @param ecef A point in ECEF coordinates\n   * @param result If defined, use this for output\n   * @returns A Point3d in this iModel's spatial coordinates\n   * @throws IModelError if [[isGeoLocated]] is false.\n   * @note The resultant point will only be meaningful if the ECEF coordinate is close on the earth to the iModel.\n   */\n  public ecefToSpatial(ecef: XYAndZ, result?: Point3d): Point3d { return this.getEcefTransform().multiplyInversePoint3d(ecef, result)!; }\n\n  /**\n   * Convert a point in this iModel's Spatial coordinates to a [[Cartographic]] using its [[IModel.ecefLocation]].\n   * @param spatial A point in the iModel's spatial coordinates\n   * @param result If defined, use this for output\n   * @returns A Cartographic location\n   * @throws IModelError if [[isGeoLocated]] is false.\n   */\n  public spatialToCartographicFromEcef(spatial: XYAndZ, result?: Cartographic): Cartographic { return Cartographic.fromEcef(this.spatialToEcef(spatial), result)!; }\n\n  /**\n   * Convert a [[Cartographic]] to a point in this iModel's Spatial coordinates using its [[IModel.ecefLocation]].\n   * @param cartographic A cartographic location\n   * @param result If defined, use this for output\n   * @returns A point in this iModel's spatial coordinates\n   * @throws IModelError if [[isGeoLocated]] is false.\n   * @note The resultant point will only be meaningful if the ECEF coordinate is close on the earth to the iModel.\n   */\n  public cartographicToSpatialFromEcef(cartographic: Cartographic, result?: Point3d) { return this.ecefToSpatial(cartographic.toEcef(result), result); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module iModels */\n\nimport { BentleyStatus, BentleyError, IModelStatus, BriefcaseStatus, GetMetaDataFunction, LogFunction, DbResult, AuthStatus, RepositoryStatus, ChangeSetStatus, RpcInterfaceStatus } from \"@bentley/bentleyjs-core\";\nexport { BentleyStatus, BentleyError, IModelStatus, BriefcaseStatus, GetMetaDataFunction, LogFunction, DbResult, AuthStatus, RepositoryStatus, ChangeSetStatus, RpcInterfaceStatus } from \"@bentley/bentleyjs-core\";\n\n/** The error type thrown by this module. See [[IModelStatus]] for `errorNumber` values.\n * @public\n */\nexport class IModelError extends BentleyError {\n  public constructor(errorNumber: number | IModelStatus | DbResult | BentleyStatus | BriefcaseStatus | RepositoryStatus | ChangeSetStatus | RpcInterfaceStatus | AuthStatus, message: string, log?: LogFunction, category?: string, getMetaData?: GetMetaDataFunction) {\n    super(errorNumber, message, log, category, getMetaData);\n  }\n}\n\n/** @public */\nexport class ServerError extends IModelError {\n  public constructor(errorNumber: number, message: string, log?: LogFunction) {\n    super(errorNumber, message, log);\n    this.name = \"Server error (\" + errorNumber + \")\";\n  }\n}\n\n/** @public */\nexport class ServerTimeoutError extends ServerError {\n  public constructor(message: string, log?: LogFunction) {\n    super(IModelStatus.ServerTimeout, message, log);\n    this.name = \"Server timeout error\";\n  }\n}\n\n/** @public */\nexport class BackendError extends IModelError {\n  public constructor(errorNumber: number, name: string, message: string, log?: LogFunction, category?: string, getMetaData?: GetMetaDataFunction) {\n    super(errorNumber, message, log, category, getMetaData);\n    this.name = name;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module iModels */\r\n\r\nimport { IModelClient, ChangeSet, ChangeSetQuery, VersionQuery, AuthorizedClientRequestContext } from \"@bentley/imodeljs-clients\";\r\nimport { IModelError } from \"./IModelError\";\r\nimport { BentleyStatus, GuidString } from \"@bentley/bentleyjs-core\";\r\n\r\n/** Option to specify the version of the iModel to be acquired and used\r\n * @public\r\n */\r\nexport class IModelVersion {\r\n  private _first?: boolean;\r\n  private _latest?: boolean;\r\n  private _afterChangeSetId?: GuidString;\r\n  private _versionName?: string;\r\n\r\n  private constructor() { }\r\n\r\n  /** Describes the first version of the iModel */\r\n  public static first(): IModelVersion {\r\n    const version = new IModelVersion();\r\n    version._first = true;\r\n    return version;\r\n  }\r\n\r\n  /** Describes the latest version of the iModel  */\r\n  public static latest(): IModelVersion {\r\n    const version = new IModelVersion();\r\n    version._latest = true;\r\n    return version;\r\n  }\r\n\r\n  /** Describes a version of the iModel by the last change set that needs\r\n   * to be applied or merged to the iModel.\r\n   * Note that all ChangeSets up to and and including the specified ChangeSet\r\n   * needs to be applied.\r\n   * If the changeSetId is an empty string, it is assumed to be the first version\r\n   * before any change sets have been applied.\r\n   */\r\n  public static asOfChangeSet(changeSetId: GuidString): IModelVersion {\r\n    const version = new IModelVersion();\r\n\r\n    if (changeSetId === \"\") {\r\n      version._first = true;\r\n      return version;\r\n    }\r\n\r\n    version._afterChangeSetId = changeSetId;\r\n    return version;\r\n  }\r\n\r\n  /** Describes a version of the iModel with the specified version name  */\r\n  public static named(versionName: string): IModelVersion {\r\n    const version = new IModelVersion();\r\n    version._versionName = versionName;\r\n    return version;\r\n  }\r\n\r\n  /** Creates a version from an untyped JSON object */\r\n  public static fromJson(jsonObj: any): IModelVersion {\r\n    const version = new IModelVersion();\r\n    Object.assign(version, jsonObj);\r\n    return version;\r\n  }\r\n\r\n  /** Returns true if this describes the first version */\r\n  public get isFirst(): boolean { return !!this._first; }\r\n\r\n  /** Returns true if this describes the latest version */\r\n  public get isLatest(): boolean { return !!this._latest; }\r\n\r\n  /** Returns the last change set id to be applied to the iModel\r\n   * to get to this specified version. @see asOfChangeSet().\r\n   * Note that this method does not attempt to resolve the change set\r\n   * if this describes the first version, last version, named version, etc.\r\n   * @see evaluateChangeSet() for those use cases.\r\n   */\r\n  public getAsOfChangeSet(): GuidString | undefined { return this._afterChangeSetId; }\r\n\r\n  /** Returns the name of the version if this describes a named version. @see named() */\r\n  public getName(): string | undefined { return this._versionName; }\r\n\r\n  /** Evaluate the ChangeSet Id corresponding to the version. All change sets up to and including\r\n   * the returned ChangeSet Id need to be applied to update the iModel to this version.\r\n   * Returns an empty string if this contains the first version (before any change sets). If the\r\n   * version was already specified as of a ChangeSet, the method simply returns\r\n   * that Id without any validation.\r\n   */\r\n  public async evaluateChangeSet(requestContext: AuthorizedClientRequestContext, iModelId: GuidString, imodelClient: IModelClient): Promise<GuidString> {\r\n    if (this._first)\r\n      return Promise.resolve(\"\");\r\n\r\n    if (this._afterChangeSetId) {\r\n      return Promise.resolve(this._afterChangeSetId);\r\n    }\r\n\r\n    if (this._latest) {\r\n      return IModelVersion.getLatestChangeSetId(requestContext, imodelClient, iModelId);\r\n    }\r\n\r\n    if (this._versionName) {\r\n      return IModelVersion.getChangeSetFromNamedVersion(requestContext, imodelClient, iModelId, this._versionName);\r\n    }\r\n\r\n    return Promise.reject(new IModelError(BentleyStatus.ERROR, \"Invalid version\"));\r\n  }\r\n\r\n  /** Gets the last change set that was applied to the imodel */\r\n  private static async getLatestChangeSetId(requestContext: AuthorizedClientRequestContext, imodelClient: IModelClient, iModelId: GuidString): Promise<GuidString> {\r\n    const changeSets: ChangeSet[] = await imodelClient.changeSets.get(requestContext, iModelId, new ChangeSetQuery().top(1).latest());\r\n    return (changeSets.length === 0) ? \"\" : changeSets[changeSets.length - 1].wsgId;\r\n  }\r\n\r\n  /** Get the change set from the specified named version */\r\n  private static async getChangeSetFromNamedVersion(requestContext: AuthorizedClientRequestContext, imodelClient: IModelClient, iModelId: GuidString, versionName: string): Promise<GuidString> {\r\n    const versions = await imodelClient.versions.get(requestContext, iModelId, new VersionQuery().select(\"ChangeSetId\").byName(versionName));\r\n\r\n    if (!versions[0] || !versions[0].changeSetId)\r\n      return Promise.reject(new IModelError(BentleyStatus.ERROR, \"Problem getting versions\"));\r\n\r\n    return versions[0].changeSetId!;\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Rendering */\n\n/** Format of an [[ImageBuffer]].\n * The format determines how many bytes are allocated for each pixel in the buffer and the semantics of each byte.\n * @see [[ImageBuffer.getNumBytesPerPixel]]\n * @public\n */\nexport enum ImageBufferFormat {\n  /** RGBA format - 4 bytes per pixel. */\n  Rgba = 0,\n  /** RGB format - 3 bytes per pixel. */\n  Rgb = 2,\n  /** 1 byte per pixel. */\n  Alpha = 5,\n}\n\n/** Uncompressed rectangular bitmap image data.\n * @public\n */\nexport class ImageBuffer {\n  /** Image data in which each pixel occupies 1 or more bytes depending of the [[ImageBufferFormat]]. */\n  public readonly data: Uint8Array;\n  /** Format of the bytes in the image. */\n  public readonly format: ImageBufferFormat;\n  /** Width of image in pixels */\n  public readonly width: number;\n\n  /** Return the number of bytes allocated for each pixel. */\n  public get numBytesPerPixel(): number { return ImageBuffer.getNumBytesPerPixel(this.format); }\n\n  /** Determine the number of bytes allocated to a single pixel for the specified format. */\n  public static getNumBytesPerPixel(format: ImageBufferFormat): number {\n    switch (format) {\n      case ImageBufferFormat.Alpha: return 1;\n      case ImageBufferFormat.Rgb: return 3;\n      default: return 4;\n    }\n  }\n\n  /** Get the height of this image in pixels. */\n  public get height(): number { return ImageBuffer.computeHeight(this.data, this.format, this.width); }\n\n  /** Create a new ImageBuffer.\n   * @note The ImageBuffer takes ownership of the input Uint8Array.\n   * @param data The uncompressed image bytes. Must be a multiple of the width times the number of bytes per pixel specified by the format.\n   * @param format The format of the image.\n   * @param width The width of the image in pixels.\n   * @returns A new ImageBuffer, or undefined if the length of the Uint8Array is not appropriate for the specified width and format.\n   */\n  public static create(data: Uint8Array, format: ImageBufferFormat, width: number): ImageBuffer | undefined {\n    return this.isValidData(data, format, width) ? new ImageBuffer(data, format, width) : undefined;\n  }\n\n  /** @internal */\n  protected static isValidData(data: Uint8Array, format: ImageBufferFormat, width: number): boolean {\n    const height = this.computeHeight(data, format, width);\n    return width > 0 && height > 0 && Math.floor(width) === width && Math.floor(height) === height;\n  }\n\n  /** @internal */\n  protected static computeHeight(data: Uint8Array, format: ImageBufferFormat, width: number): number {\n    return data.length / (width * this.getNumBytesPerPixel(format));\n  }\n\n  /** @internal */\n  protected constructor(data: Uint8Array, format: ImageBufferFormat, width: number) {\n    this.data = data;\n    this.format = format;\n    this.width = width;\n  }\n}\n\n/** Returns whether the input is a power of two.\n * @note Floating point inputs are truncated.\n * @public\n */\nexport function isPowerOfTwo(num: number): boolean { return 0 === (num & (num - 1)); }\n\n/** Returns the first power-of-two value greater than or equal to the input.\n * @note Floating point inputs are truncated.\n * @public\n */\nexport function nextHighestPowerOfTwo(num: number): number {\n  --num;\n  for (let i = 1; i < 32; i <<= 1)\n    num = num | num >> i;\n\n  return num + 1;\n}\n\n/** The format of an ImageSource.\n * @public\n */\nexport enum ImageSourceFormat {\n  /** Image data is stored with JPEG compression. */\n  Jpeg = 0,\n  /** Image data is stored with PNG compression. */\n  Png = 2,\n  /** Image is stored as an Svg stream.\n   * @note SVG is only valid for ImageSources in JavaScript. It *may not* be used for persistent textures.\n   */\n  Svg = 3,\n}\n\n/** @internal */\nexport function isValidImageSourceFormat(format: ImageSourceFormat): boolean {\n  switch (format) {\n    case ImageSourceFormat.Jpeg:\n    case ImageSourceFormat.Png:\n    case ImageSourceFormat.Svg:\n      return true;\n    default:\n      return false;\n  }\n}\n\n/** Image data encoded and compressed in either Jpeg or Png format.\n * @public\n */\nexport class ImageSource {\n  /** The content of the image, compressed */\n  public readonly data: Uint8Array | string;\n  /** The compression type. */\n  public readonly format: ImageSourceFormat;\n\n  /** Construct a new ImageSource, which takes ownership of the Uint8Array. */\n  public constructor(data: Uint8Array | string, format: ImageSourceFormat) {\n    this.data = data;\n    this.format = format;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Views */\n\nimport { JsonUtils } from \"@bentley/bentleyjs-core\";\nimport { Angle, AngleProps } from \"@bentley/geometry-core\";\nimport { ColorDef, ColorDefProps } from \"./ColorDef\";\n\n/** The type of a [[Light]]\n * @internal\n */\nexport enum LightType {\n  Invalid = 0,\n  Solar = 1,     // Sunlight\n  Ambient = 2,   // ambient light\n  Flash = 3,     // flash bulb at camera\n  Portrait = 4,  // over the shoulder (left and right)\n  Point = 5,     // non directional point light source\n  Spot = 6,\n  Area = 7,\n  Distant = 8,\n  SkyOpening = 9,\n}\n\n/** Parameters to create a [[Light]]\n * @internal\n */\nexport interface LightProps {\n  lightType?: LightType;  // the type of light from LightType enum\n  intensity?: number;     // intensity of the light\n  color?: ColorDefProps;  // color of the light. ColorDef as integer\n  intensity2?: number;    // for portrait lights, intensity of the \"over the left shoulder\" light (intensity is the right shoulder light).\n  color2?: ColorDefProps; // for left portrait light\n  kelvin?: number;        // color temperature, in kelvins. Note that color and kelvins are not independent. Useful for UI, I guess?\n  shadows?: number;       // the number of shadow samples\n  bulbs?: number;         // number of bulbs\n  lumens?: number;\n}\n\n/** A light to illuminate the contents of a scene.\n * @internal\n */\nexport class Light {\n  public lightType: LightType;\n  public intensity: number;\n  public color: ColorDef;\n  public intensity2?: number;\n  public color2?: ColorDef;\n  public kelvin: number;\n  public shadows: number;\n  public bulbs: number;\n  public lumens: number;\n\n  constructor(opts?: LightProps) {\n    opts = opts ? opts : {};\n    this.lightType = JsonUtils.asInt(opts.lightType);\n    this.intensity = JsonUtils.asDouble(opts.intensity);\n    this.kelvin = JsonUtils.asDouble(opts.kelvin);\n    this.shadows = JsonUtils.asDouble(opts.shadows);\n    this.bulbs = JsonUtils.asInt(opts.bulbs);\n    this.lumens = JsonUtils.asDouble(opts.lumens);\n    this.color = ColorDef.fromJSON(opts.color);\n    if (opts.intensity2)\n      this.intensity2 = JsonUtils.asDouble(opts.intensity2);\n    if (opts.color2)\n      this.color2 = ColorDef.fromJSON(opts.color2);\n  }\n\n  public get isValid(): boolean { return this.lightType !== LightType.Invalid; }\n  public get isVisible(): boolean { return this.isValid && this.intensity > 0.0; }\n}\n\n/** Properties of a [[LightType.Spot]] light.\n * @internal\n */\nexport interface SpotProps extends LightProps {\n  inner?: AngleProps;\n  outer?: AngleProps;\n}\n\n/** A light from a single location.\n * @internal\n */\nexport class Spot extends Light {\n  public inner: Angle;\n  public outer: Angle;\n\n  constructor(opts?: SpotProps) {\n    opts = opts ? opts : {};\n    super(opts);\n    this.lightType = LightType.Spot;\n    this.inner = Angle.fromJSON(opts.inner);\n    this.outer = Angle.fromJSON(opts.outer);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module WireFormats */\r\n\r\nimport { DefinitionElementProps } from \"./ElementProps\";\r\nimport { TextureMapping } from \"./Render\";\r\nimport { Id64String } from \"@bentley/bentleyjs-core\";\r\n\r\n/** Contains three array entries ordered as red, green, blue containing values 0 to 1\r\n * @beta Is an additional type over those in ColorDef needed?\r\n */\r\nexport type RgbFactorProps = number[];\r\n\r\n/** Contains two array entries orders X, Y containing doubles\r\n * @beta Is an additional type over those in geometry-core needed?\r\n */\r\nexport type DPoint2dProps = number[];\r\n\r\n/** @beta */\r\nexport enum TextureMapUnits { Relative = 0, Meters = 3, Millimeters = 4, Feet = 5, Inches = 6 }\r\n\r\n/** Properties that define how a texture is mapped to a material\r\n * @beta\r\n */\r\nexport interface TextureMapProps {\r\n  /** Angle in degrees to rotate texture when applying; defaults to 0.0 if undefined */\r\n  pattern_angle?: number;\r\n  /** If true, flip the pattern map in U; if undefined, defaults to false */\r\n  pattern_u_flip?: boolean;\r\n  /** If true, flip the pattern map in V; if undefined, defaults to false */\r\n  pattern_flip?: boolean;\r\n  /** X, Y scale to apply to the pattern map; if undefined, defaults to {0,0}, which is almost never useful. */\r\n  pattern_scale?: DPoint2dProps;\r\n  /** X, Y offset to apply to the pattern map; if undefined, defaults to {0,0} */\r\n  pattern_offset?: DPoint2dProps;\r\n  /** Units to use when applying the scaling; if undefined, defaults to TextureMapUnits.Relative */\r\n  pattern_scalemode?: TextureMapUnits;\r\n  /** Mapping mode to use for the texture application; if undefined, defaults to TextureMapping.Mode.Parametric */\r\n  pattern_mapping?: TextureMapping.Mode;\r\n  /** Weight at which to combine diffuse image and color; if undefined, defaults to 1.0 */\r\n  pattern_weight?: number;\r\n  /** The Id of the persistent Texture element defining the texture image. */\r\n  TextureId: Id64String;\r\n}\r\n\r\n/** Properties that define a RenderMaterial\r\n * @beta\r\n */\r\nexport interface RenderMaterialProps extends DefinitionElementProps {\r\n  /** The palette name which categorizes this RenderMaterial */\r\n  paletteName: string;\r\n  /** The optional description for this RenderMaterial */\r\n  description?: string;\r\n  jsonProperties?: {\r\n    materialAssets?: {\r\n      renderMaterial?: {\r\n        /** If true, this material has a fill/diffuse color; if undefined, defaults to false */\r\n        HasBaseColor?: boolean;\r\n        /** Surface color used for fill or diffuse illumination; if undefined, defaults to black */\r\n        color?: RgbFactorProps;\r\n        /** If true, this material has a specular color; if undefined, defaults to false */\r\n        HasSpecularColor?: boolean;\r\n        /** Surface color used for specular illumination; if undefined, defaults to black */\r\n        specular_color?: RgbFactorProps;\r\n        /** If true, this material has a specular exponent; if undefined, defaults to false */\r\n        HasFinish?: boolean;\r\n        /** Specular exponent (surface shininess); range is 0 to 128; if undefined, defaults to 15.0 * 0.9 */\r\n        finish?: number;\r\n        /** If true, this material has surface transparency; if undefined, defaults to false */\r\n        HasTransmit?: boolean;\r\n        /** Surface transparency; if undefined, defaults to 0.0 */\r\n        transmit?: number;\r\n        /** If true, this material has a value for diffuse reflectivity; if undefined, defaults to false */\r\n        HasDiffuse?: boolean;\r\n        /** Surface diffuse reflectivity; if undefined, defaults to 0.6 */\r\n        diffuse?: number;\r\n        /** If true, this material has a value for specular reflectivity; if undefined, defaults to false.  If false, specular value is actually set to 0.0 */\r\n        HasSpecular?: boolean;\r\n        /** Surface specular reflectivity; if undefined, defaults to 0.4 */\r\n        specular?: number;\r\n        /** If true, this material has a value for environmental reflectivity; if undefined, defaults to false */\r\n        HasReflect?: boolean;\r\n        /** Surface environmental reflectivity; stored as fraction of specular in V8 material settings; if undefined defaults to 0.0 */\r\n        reflect?: number;\r\n        /** If true, this material has a surface reflectance color; if undefined, defaults to false.  If false, reflectance color is actually set to specular color */\r\n        HasReflectColor?: boolean;\r\n        /** Surface reflectance color; if undefined, defaults to black */\r\n        reflect_color?: RgbFactorProps;\r\n        /** An optional set of texture maps associated with this material.\r\n         * A large variety of map types may be present (e.g., bump maps, specular maps, fur, etc), but currently only the pattern map is used.\r\n         */\r\n        Map?: {\r\n          /** Optional pattern map. */\r\n          Pattern?: TextureMapProps;\r\n        }\r\n      };\r\n    };\r\n  };\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Rendering */\n\nimport { Vector3d, XYAndZ } from \"@bentley/geometry-core\";\n\n/** @internal */\nexport class OctEncodedNormal {\n  private static _scratchUInt16 = new Uint16Array(1);\n  private static clamp(val: number, minVal: number, maxVal: number): number { return val < minVal ? minVal : (val > maxVal ? maxVal : val); }\n  private static clampUint8(val: number): number { return this.roundUint16(0.5 + (this.clamp(val, -1, 1) * 0.5 + 0.5) * 255); }\n  private static roundUint16(val: number): number { this._scratchUInt16[0] = val; return this._scratchUInt16[0]; }\n  private static signNotZero(val: number): number { return val < 0.0 ? -1.0 : 1.0; }\n  private static encode(vec: XYAndZ): number {\n    const denom = Math.abs(vec.x) + Math.abs(vec.y) + Math.abs(vec.z);\n    let rx = vec.x / denom;\n    let ry = vec.y / denom;\n    if (vec.z < 0) {\n      const x = rx;\n      const y = ry;\n      rx = (1 - Math.abs(y)) * OctEncodedNormal.signNotZero(x);\n      ry = (1 - Math.abs(x)) * OctEncodedNormal.signNotZero(y);\n    }\n    return this.clampUint8(ry) << 8 | this.clampUint8(rx);\n  }\n\n  public readonly value: number;\n  public constructor(val: number) { this.value = OctEncodedNormal.roundUint16(val); }\n\n  public static fromVector(val: XYAndZ) { return new OctEncodedNormal(this.encode(val)); }\n  public decode(): Vector3d | undefined {\n    const val = this.value;\n    let ex = val & 0xff;\n    let ey = val >> 8;\n    ex = ex / 255.0 * 2.0 - 1.0;\n    ey = ey / 255.0 * 2.0 - 1.0;\n    const n = new Vector3d(ex, ey, 1 - (Math.abs(ex) + Math.abs(ey)));\n    if (n.z < 0) {\n      const x = n.x;\n      const y = n.y;\n      n.x = (1 - Math.abs(y)) * OctEncodedNormal.signNotZero(x);\n      n.y = (1 - Math.abs(x)) * OctEncodedNormal.signNotZero(y);\n    }\n    return n.normalize();\n  }\n}\n\n/** @internal */\nexport class OctEncodedNormalPair {\n  constructor(public first: OctEncodedNormal, public second: OctEncodedNormal) { }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module iModels */\r\n/** ECSql query quota constraint. Its not guaranteed exactly but will be meet as accurately as possible\r\n * @internal\r\n */\r\nexport interface QueryQuota {\r\n  /** Maximum time in seconds after which query will be stopped */\r\n  maxTimeAllowed?: number;\r\n  /** Maximum size of result in bytes after which query will be stopped */\r\n  maxMemoryAllowed?: number;\r\n}\r\n\r\n/** ECSql query subset specification\r\n * @public\r\n */\r\nexport interface QueryLimit {\r\n  /** Maximum time in seconds after which query will be stopped */\r\n  maxRowAllowed?: number;\r\n  /** Maximum size of result in bytes after which query will be stopped */\r\n  startRowOffset?: number;\r\n}\r\n/** Queue priority for query and its not guaranteed\r\n * @public\r\n */\r\nexport enum QueryPriority {\r\n  Low = 0,\r\n  Normal = 1,\r\n  High = 2,\r\n}\r\n\r\n/** State of query operations\r\n * @internal\r\n */\r\nexport enum QueryResponseStatus {\r\n  Partial = 3, /** Partial result due to query exceeded allocated quota */\r\n  Done = 2, /** There is no more rows */\r\n  Error = 5, /** Error while preparing or stepping into query */\r\n  Timeout = 4, /** Query time quota while it was in queue */\r\n  PostError = 6, /** Submitting query task failed. May happen if queue size exceeds */\r\n}\r\n/** Result of a query. Its not intended to be used directly by client\r\n * @internal\r\n */\r\nexport interface QueryResponse {\r\n  rows: any[];\r\n  status: QueryResponseStatus;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Rendering */\n\nimport { Range2d, Range3d, Point2d, Point3d } from \"@bentley/geometry-core\";\nimport { assert } from \"@bentley/bentleyjs-core\";\n\n/**\n * Provides facilities for quantizing floating point values within a specified range into 16-bit unsigned integers.\n * This is a lossy compression technique.\n * Given a floating point range [min, max], a floating point value `x` within that range is quantized by subtracting\n * `min`, scaling the result according to `max`, and truncating the result to an integer.\n * Therefore min quantizes to 0, max to 0xffff, (min+max)/2 to 0x7fff, and so on.\n * These routines are chiefly used internally by classes like QPoint2d and QPoint3d.\n * @internal\n */\nexport namespace Quantization {\n  const rangeScale = 0xffff;\n\n  export function computeScale(extent: number): number { return 0.0 === extent ? extent : rangeScale / extent; }\n  export function isInRange(qpos: number) { return qpos >= 0.0 && qpos < rangeScale + 1.0; }\n  export function quantize(pos: number, origin: number, scale: number) { return Math.floor(Math.max(0.0, Math.min(rangeScale, 0.5 + (pos - origin) * scale))); }\n  export function isQuantizable(pos: number, origin: number, scale: number) { return isInRange(quantize(pos, origin, scale)); }\n  export function unquantize(qpos: number, origin: number, scale: number) { return 0.0 === scale ? origin : origin + qpos / scale; }\n  export function isQuantized(qpos: number) { return isInRange(qpos) && qpos === Math.floor(qpos); }\n}\n\n/** Parameters used for quantization of 2d points.\n * @internal\n */\nexport class QParams2d {\n  public readonly origin = new Point2d();\n  public readonly scale = new Point2d();\n\n  private constructor(ox = 0, oy = 0, sx = 0, sy = 0) { this.setFrom(ox, oy, sx, sy); }\n\n  private setFrom(ox: number, oy: number, sx: number, sy: number) {\n    this.origin.x = ox;\n    this.origin.y = oy;\n    this.scale.x = sx;\n    this.scale.y = sy;\n  }\n\n  public copyFrom(src: QParams2d) { this.setFrom(src.origin.x, src.origin.y, src.scale.x, src.scale.y); }\n  public clone(out?: QParams2d) {\n    const result = undefined !== out ? out : new QParams2d();\n    result.copyFrom(this);\n    return result;\n  }\n\n  /** Initialize these parameters to support quantization of values within the specified range. */\n  public setFromRange(range: Range2d) {\n    if (!range.isNull) {\n      this.setFrom(range.low.x, range.low.y, Quantization.computeScale(range.high.x - range.low.x), Quantization.computeScale(range.high.y - range.low.y));\n    } else {\n      this.origin.x = this.origin.y = this.scale.x = this.scale.y = 0;\n    }\n  }\n  /** Creates parameters to support quantization of values within the specified range. */\n  public static fromRange(range: Range2d, out?: QParams2d) {\n    const params = undefined !== out ? out : new QParams2d();\n    params.setFromRange(range);\n    return params;\n  }\n\n  /** Creates parameters supporting quantization of values within the range [-1.0, 1.0]. */\n  public static fromNormalizedRange() { return QParams2d.fromRange(Range2d.createArray([Point2d.create(-1, -1), Point2d.create(1, 1)])); }\n\n  /** Creates parameters supporting quantization of values within the range [0.0, 1.0]. */\n  public static fromZeroToOne() { return QParams2d.fromRange(Range2d.createArray([Point2d.create(0, 0), Point2d.create(1, 1)])); }\n}\n\n/** Represents a quantized 2d point as an (x, y) pair in the integer range [0, 0xffff].\n * @internal\n */\nexport class QPoint2d {\n  private _x: number = 0;\n  private _y: number = 0;\n\n  public get x() { return this._x; }\n  public set x(x: number) { assert(Quantization.isQuantized(x)); this._x = x; }\n  public get y() { return this._y; }\n  public set y(y: number) { assert(Quantization.isQuantized(y)); this._y = y; }\n\n  public constructor() { }\n\n  /** Initialize this point by quantizing the supplied Point2d using the specified params */\n  public init(pos: Point2d, params: QParams2d) {\n    this.x = Quantization.quantize(pos.x, params.origin.x, params.scale.x);\n    this.y = Quantization.quantize(pos.y, params.origin.y, params.scale.y);\n  }\n  /** Creates a quantized point from the supplied Point2d using the specified params */\n  public static create(pos: Point2d, params: QParams2d) {\n    const qpt = new QPoint2d();\n    qpt.init(pos, params);\n    return qpt;\n  }\n\n  public copyFrom(src: QPoint2d) {\n    this.x = src.x;\n    this.y = src.y;\n  }\n  public clone(out?: QPoint2d) {\n    const result = undefined !== out ? out : new QPoint2d();\n    result.copyFrom(this);\n    return result;\n  }\n\n  /**\n   * Sets the x and y components directly.\n   * @param x Must be an integer in the range [0, 0xffff]\n   * @param y Must be an integer in the range [0, 0xffff]\n   */\n  public setFromScalars(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Creates a QPoint2d directly from x and y components.\n   * @param x Must be an integer in the range [0, 0xffff]\n   * @param y Must be an integer in the range [0, 0xffff]\n   */\n  public static fromScalars(x: number, y: number) {\n    const pt = new QPoint2d();\n    pt.setFromScalars(x, y);\n    return pt;\n  }\n\n  /** Returns a Point2d unquantized according to the supplied params. */\n  public unquantize(params: QParams2d, out?: Point2d): Point2d {\n    const pt: Point2d = undefined !== out ? out : new Point2d();\n    pt.x = Quantization.unquantize(this.x, params.origin.x, params.scale.x);\n    pt.y = Quantization.unquantize(this.y, params.origin.y, params.scale.y);\n    return pt;\n  }\n}\n\n/** A list of 2d points all quantized to the same range.\n * @internal\n */\nexport class QPoint2dList {\n  public readonly params: QParams2d;\n  private readonly _list = new Array<QPoint2d>();\n\n  public constructor(params: QParams2d) {\n    this.params = params.clone();\n  }\n\n  /** Clears out the contents of the list */\n  public clear() { this._list.length = 0; }\n  /** Clears out the contents of the list and changes the quantization parameters. */\n  public reset(params: QParams2d) { this.clear(); this.params.copyFrom(params); }\n\n  /** Quantizes the supplied Point2d to this list's range and appends it to the list. */\n  public add(pt: Point2d) { this._list.push(QPoint2d.create(pt, this.params)); }\n  /** Adds a previously-quantized point to this list. */\n  public push(qpt: QPoint2d) { this._list.push(qpt.clone()); }\n\n  /** Returns the number of points in the list. */\n  public get length() { return this._list.length; }\n\n  /** Returns the unquantized value of the point at the specified index in the list. */\n  public unquantize(index: number, out?: Point2d): Point2d {\n    assert(index < this.length);\n    if (index < this.length) {\n      return this._list[index].unquantize(this.params, out);\n    } else {\n      return undefined !== out ? out : new Point2d();\n    }\n  }\n\n  /** Changes the quantization parameters and requantizes all points in the list to the new range. */\n  public requantize(params: QParams2d) {\n    for (let i = 0; i < this.length; i++) {\n      const pt = this.unquantize(i);\n      this._list[i].init(pt, params);\n    }\n\n    this.params.copyFrom(params);\n  }\n\n  /** Extracts the current contents of the list as a Uint16Array. */\n  public toTypedArray(): Uint16Array {\n    const array = new Uint16Array(this.length * 2);\n    const pts = this._list;\n    for (let i = 0; i < this.length; i++) {\n      const pt = pts[i];\n      array[i * 2] = pt.x;\n      array[i * 2 + 1] = pt.y;\n    }\n\n    return array;\n  }\n  /** Construct a QPoint2dList containing all points in the supplied list, quantized to the range of those points. */\n  public static fromPoints(points: Point2d[], out?: QPoint2dList) {\n    let qPoints;\n    const qParams = QParams2d.fromRange(Range2d.createArray(points));\n    if (out) {\n      qPoints = out;\n      qPoints.reset(qParams);\n    } else qPoints = new QPoint2dList(qParams);\n    for (const point of points)\n      qPoints.add(point);\n\n    return qPoints;\n  }\n}\n\n/** Parameters used for quantization of 3d points.\n * @internal\n */\nexport class QParams3d {\n  public readonly origin = new Point3d();\n  public readonly scale = new Point3d();\n\n  private constructor(ox = 0, oy = 0, oz = 0, sx = 0, sy = 0, sz = 0) { this.setFrom(ox, oy, oz, sx, sy, sz); }\n\n  private setFrom(ox: number, oy: number, oz: number, sx: number, sy: number, sz: number) {\n    this.origin.x = ox;\n    this.origin.y = oy;\n    this.origin.z = oz;\n    this.scale.x = sx;\n    this.scale.y = sy;\n    this.scale.z = sz;\n  }\n\n  public copyFrom(src: QParams3d) { this.setFrom(src.origin.x, src.origin.y, src.origin.z, src.scale.x, src.scale.y, src.scale.z); }\n  public clone(out?: QParams3d) {\n    const result = undefined !== out ? out : new QParams3d();\n    result.copyFrom(this);\n    return result;\n  }\n  /** Initialize from origin and scale */\n  public setFromOriginAndScale(origin: Point3d, scale: Point3d) { this.setFrom(origin.x, origin.y, origin.z, scale.x, scale.y, scale.z); }\n\n  /** Initialize these parameters to support quantization of values within the specified range. */\n  public setFromRange(range: Range3d) {\n    if (!range.isNull) {\n      this.setFrom(range.low.x, range.low.y, range.low.z,\n        Quantization.computeScale(range.high.x - range.low.x), Quantization.computeScale(range.high.y - range.low.y), Quantization.computeScale(range.high.z - range.low.z));\n    } else {\n      this.origin.x = this.origin.y = this.origin.z = 0;\n      this.scale.x = this.scale.y = this.scale.z = 0;\n    }\n  }\n  /** Creates parameters to support quantization of values within the specified range. */\n  public static fromRange(range: Range3d, out?: QParams3d) {\n    const params = undefined !== out ? out : new QParams3d();\n    params.setFromRange(range);\n    return params;\n  }\n\n  /** Creates parameters supporting quantization of values within the range [-1.0, 1.0]. */\n  public static fromOriginAndScale(origin: Point3d, scale: Point3d, out?: QParams3d) {\n    const params = undefined !== out ? out : new QParams3d();\n    params.setFromOriginAndScale(origin, scale);\n    return params;\n  }\n\n  /** Creates parameters supporting quantization of values within the range [-1.0, 1.0]. */\n  public static fromNormalizedRange() { return QParams3d.fromRange(Range3d.createArray([Point3d.create(-1, -1, -1), Point3d.create(1, 1, 1)])); }\n\n  /** Creates parameters supporting quantization of values within the range [0.0, 1.0]. */\n  public static fromZeroToOne() { return QParams3d.fromRange(Range3d.createArray([Point3d.create(0, 0, 0), Point3d.create(1, 1, 1)])); }\n}\n\n/** Represents a quantized 3d point as an (x, y, z) triplet in the integer range [0, 0xffff].\n * @internal\n */\nexport class QPoint3d {\n  private _x: number = 0;\n  private _y: number = 0;\n  private _z: number = 0;\n\n  public get x() { return this._x; }\n  public set x(x: number) { assert(Quantization.isQuantized(x)); this._x = x; }\n  public get y() { return this._y; }\n  public set y(y: number) { assert(Quantization.isQuantized(y)); this._y = y; }\n  public get z() { return this._z; }\n  public set z(z: number) { assert(Quantization.isQuantized(z)); this._z = z; }\n\n  private constructor() { }\n\n  /** Initialize this point by quantizing the supplied Point3d using the specified params */\n  public init(pos: Point3d, params: QParams3d) {\n    this.x = Quantization.quantize(pos.x, params.origin.x, params.scale.x);\n    this.y = Quantization.quantize(pos.y, params.origin.y, params.scale.y);\n    this.z = Quantization.quantize(pos.z, params.origin.z, params.scale.z);\n  }\n  /** Creates a quantized point from the supplied Point3d using the specified params */\n  public static create(pos: Point3d, params: QParams3d) {\n    const qpt = new QPoint3d();\n    qpt.init(pos, params);\n    return qpt;\n  }\n\n  public copyFrom(src: QPoint3d) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z;\n  }\n  public clone(out?: QPoint3d) {\n    const result = undefined !== out ? out : new QPoint3d();\n    result.copyFrom(this);\n    return result;\n  }\n\n  /**\n   * Sets the x, y, and z components directly.\n   * @param x Must be an integer in the range [0, 0xffff]\n   * @param y Must be an integer in the range [0, 0xffff]\n   * @param z Must be an integer in the range [0, 0xffff]\n   */\n  public setFromScalars(x: number, y: number, z: number) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Creates a QPoint3d directly from x, y, and z components.\n   * @param x Must be an integer in the range [0, 0xffff]\n   * @param y Must be an integer in the range [0, 0xffff]\n   * @param z Must be an integer in the range [0, 0xffff]\n   */\n  public static fromScalars(x: number, y: number, z: number, out?: QPoint3d) {\n    const pt = undefined === out ? new QPoint3d() : out;\n    pt.setFromScalars(x, y, z);\n    return pt;\n  }\n\n  /** Returns a Point3d unquantized according to the supplied params. */\n  public unquantize(params: QParams3d, out?: Point3d): Point3d {\n    const pt: Point3d = undefined !== out ? out : new Point3d();\n    pt.x = Quantization.unquantize(this.x, params.origin.x, params.scale.x);\n    pt.y = Quantization.unquantize(this.y, params.origin.y, params.scale.y);\n    pt.z = Quantization.unquantize(this.z, params.origin.z, params.scale.z);\n    return pt;\n  }\n\n  public equals(other: QPoint3d) {\n    return this.x === other.x && this.y === other.y && this.z === other.z;\n  }\n\n  public compare(rhs: QPoint3d) {\n    let diff = this.x - rhs.x;\n    if (0 === diff) {\n      diff = this.y - rhs.y;\n      if (0 === diff) {\n        diff = this.z - rhs.z;\n      }\n    }\n\n    return diff;\n  }\n}\n\n/** A list of 3d points all quantized to the same range.\n * @internal\n */\nexport class QPoint3dList {\n  private readonly _list: QPoint3d[] = [];\n  public readonly params: QParams3d;\n  public get list(): QPoint3d[] { return this._list; }\n\n  public constructor(paramsIn?: QParams3d) {\n    this.params = paramsIn ? paramsIn.clone() : QParams3d.fromRange(Range3d.createNull());\n  }\n\n  /** Construct a QPoint3dList containing all points in the supplied list, quantized to the range of those points. */\n  public static fromPoints(points: Point3d[], out?: QPoint3dList) {\n    let qPoints;\n    const qParams = QParams3d.fromRange(Range3d.createArray(points));\n    if (out) {\n      qPoints = out;\n      qPoints.reset(qParams);\n    } else qPoints = new QPoint3dList(qParams);\n    for (const point of points)\n      qPoints.add(point);\n\n    return qPoints;\n  }\n\n  /** Clears out the contents of the list */\n  public clear() { this._list.length = 0; }\n  /** Clears out the contents of the list and changes the quantization parameters. */\n  public reset(params: QParams3d) { this.clear(); this.params.copyFrom(params); }\n\n  /** Quantizes the supplied Point3d to this list's range and appends it to the list. */\n  public add(pt: Point3d) { this._list.push(QPoint3d.create(pt, this.params)); }\n  /** Adds a previously-quantized point to this list. */\n  public push(qpt: QPoint3d) { this._list.push(qpt.clone()); }\n\n  /** Returns the number of points in the list. */\n  public get length() { return this._list.length; }\n\n  /** Returns the unquantized value of the point at the specified index in the list. */\n  public unquantize(index: number, out?: Point3d): Point3d {\n    assert(index < this.length);\n    if (index < this.length) {\n      return this._list[index].unquantize(this.params, out);\n    } else {\n      return undefined !== out ? out : new Point3d();\n    }\n  }\n\n  /** Changes the quantization parameters and requantizes all points in the list to the new range. */\n  public requantize(params: QParams3d) {\n    for (let i = 0; i < this.length; i++) {\n      const pt = this.unquantize(i);\n      this._list[i].init(pt, params);\n    }\n\n    this.params.copyFrom(params);\n  }\n\n  /** Extracts the current contents of the list as a Uint16Array. */\n  public toTypedArray(): Uint16Array {\n    const array = new Uint16Array(this.length * 3);\n    const pts = this._list;\n    for (let i = 0; i < this.length; i++) {\n      const pt = pts[i];\n      array[i * 3 + 0] = pt.x;\n      array[i * 3 + 1] = pt.y;\n      array[i * 3 + 2] = pt.z;\n    }\n\n    return array;\n  }\n\n  public static createFrom(points: Point3d[], params: QParams3d): QPoint3dList {\n    const list = new QPoint3dList(params);\n    for (const point of points) list.add(point);\n    return list;\n  }\n\n  public [Symbol.iterator]() {\n    let key = 0;\n    return { next: (): IteratorResult<QPoint3d> => { const result = key < this._list.length ? { value: this._list[key], done: false } : { value: this._list[key - 1], done: true }; key++; return result; } };\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Rendering */\n\nimport { Id64, Id64String, JsonUtils, assert, IndexMap, IndexedValue, compareNumbers, compareStrings, IDisposable } from \"@bentley/bentleyjs-core\";\nimport { ColorDef, ColorDefProps, ColorByName } from \"./ColorDef\";\nimport { Light } from \"./Lighting\";\nimport { IModel } from \"./IModel\";\nimport { Point3d, XYAndZ, Transform, Angle, AngleProps, Vector3d, ClipPlane, Point2d, IndexedPolyfaceVisitor, PolyfaceVisitor, Range1d, Range1dProps } from \"@bentley/geometry-core\";\nimport { LineStyle } from \"./geometry/LineStyle\";\nimport { CameraProps, ViewFlagProps, GroundPlaneProps, SolarShadowProps } from \"./ViewProps\";\nimport { OctEncodedNormalPair } from \"./OctEncodedNormal\";\nimport { AreaPattern } from \"./geometry/AreaPattern\";\nimport { Frustum } from \"./Frustum\";\nimport { ImageBuffer, ImageBufferFormat } from \"./Image\";\n\n/** Flags indicating whether and how the interiors of closed planar regions is displayed within a view.\n * @public\n */\nexport enum FillFlags {\n  /** No fill */\n  None = 0,\n  /** Use the element's fill color when fill is enabled in the view's [[ViewFlags]]. */\n  ByView = 1 << 0,\n  /** Use the element's fill color even when fill is disabled in the view's [[ViewFlags]]. */\n  Always = 1 << 1,\n  /** Render the fill behind other geometry belonging to the same element.\n   * For example if an element's geometry contains text with background fill, the text always renders in front of the fill.\n   */\n  Behind = 1 << 2,\n  /** Combines Behind and Always flags. */\n  Blanking = Behind | Always,\n  /** Use the view's background color instead of the element's fill color. */\n  Background = 1 << 3,\n}\n\n/** @internal */\nexport enum PolylineTypeFlags {\n  Normal = 0,      // Just an ordinary polyline\n  Edge = 1 << 0, // A polyline used to define the edges of a planar region.\n  Outline = 1 << 1, // Like Edge, but the edges are only displayed in wireframe mode when surface fill is undisplayed.\n}\n\n/** Flags describing a polyline. A polyline may represent a continuous line string, or a set of discrete points.\n * @internal\n */\nexport class PolylineFlags {\n  public isDisjoint: boolean;\n  public isPlanar: boolean;\n  public is2d: boolean;\n  public type: PolylineTypeFlags;\n\n  public constructor(is2d = false, isPlanar = false, isDisjoint = false, type = PolylineTypeFlags.Normal) {\n    this.isDisjoint = isDisjoint;\n    this.isPlanar = isPlanar;\n    this.is2d = is2d;\n    this.type = type;\n  }\n\n  public clone(): PolylineFlags { return new PolylineFlags(this.is2d, this.isPlanar, this.isDisjoint, this.type); }\n\n  /** Create a PolylineFlags from a serialized numeric representation. */\n  public static unpack(value: number): PolylineFlags {\n    const isDisjoint = 0 !== (value & 1);\n    const isPlanar = 0 !== (value & 2);\n    const is2d = 0 !== (value & 4);\n    const type: PolylineTypeFlags = (value >> 3);\n    assert(type === PolylineTypeFlags.Normal || type === PolylineTypeFlags.Edge || type === PolylineTypeFlags.Outline);\n\n    return new PolylineFlags(is2d, isPlanar, isDisjoint, type);\n  }\n\n  public initDefaults() {\n    this.isDisjoint = this.isPlanar = this.is2d = false;\n    this.type = PolylineTypeFlags.Normal;\n  }\n\n  public get isOutlineEdge(): boolean { return PolylineTypeFlags.Outline === this.type; }\n  public get isNormalEdge(): boolean { return PolylineTypeFlags.Edge === this.type; }\n  public get isAnyEdge(): boolean { return PolylineTypeFlags.Normal !== this.type; }\n  public setIsNormalEdge(): void { this.type = PolylineTypeFlags.Edge; }\n  public setIsOutlineEdge(): void { this.type = PolylineTypeFlags.Outline; }\n\n  /** Convert these flags to a numeric representation for serialization. */\n  public pack(): number {\n    let val: number = 0;\n    if (this.isDisjoint)\n      val += 1;\n    if (this.isPlanar)\n      val += 1 << 1;\n    if (this.is2d)\n      val += 1 << 2;\n    val += (this.type as number) << 3;\n    return val;\n  }\n\n  public equals(other: PolylineFlags) {\n    return this.type === other.type && this.is2d === other.is2d && this.isPlanar === other.isPlanar && this.isDisjoint === other.isDisjoint;\n  }\n}\n\n/** @internal */\nexport class PolylineData {\n  public vertIndices: number[];\n  public numIndices: number;\n  public constructor(vertIndices: number[] = [], numIndices = 0) {\n    this.vertIndices = vertIndices;\n    this.numIndices = numIndices;\n  }\n  public get isValid(): boolean { return 0 < this.numIndices; }\n  public reset(): void { this.numIndices = 0; this.vertIndices = []; }\n  public init(polyline: MeshPolyline) {\n    this.numIndices = polyline.indices.length;\n    this.vertIndices = 0 < this.numIndices ? polyline.indices : [];\n    return this.isValid;\n  }\n}\n\n/** @internal */\nexport class MeshPolyline {\n  public readonly indices: number[];\n  public constructor(indices: number[] = []) {\n    this.indices = indices.slice();\n  }\n  public addIndex(index: number) {\n    const { indices } = this;\n    if (indices.length === 0 || indices[indices.length - 1] !== index)\n      indices.push(index);\n  }\n  public clear() { this.indices.length = 0; }\n}\n\n/** @internal */\nexport class MeshPolylineList extends Array<MeshPolyline> { constructor(...args: MeshPolyline[]) { super(...args); } }\n\n/** @internal */\nexport class MeshEdge {\n  public indices = [0, 0];\n  public constructor(index0?: number, index1?: number) {\n    if (undefined === index0 || undefined === index1)\n      return;\n    if (index0 < index1) {\n      this.indices[0] = index0;\n      this.indices[1] = index1;\n    } else {\n      this.indices[0] = index1;\n      this.indices[1] = index0;\n    }\n  }\n}\n\n/** @internal */\nexport class MeshEdges {\n  public visible: MeshEdge[] = [];\n  public silhouette: MeshEdge[] = [];\n  public polylines: MeshPolylineList = new MeshPolylineList();\n  public silhouetteNormals: OctEncodedNormalPair[] = [];\n  public constructor() { }\n}\n\n/** @internal */\nexport class EdgeArgs {\n  public edges?: MeshEdge[];\n\n  public init(meshEdges?: MeshEdges): boolean {\n    this.clear();\n    if (undefined !== meshEdges && 0 < meshEdges.visible.length)\n      this.edges = meshEdges.visible;\n\n    return this.isValid;\n  }\n\n  public clear(): void { this.edges = undefined; }\n  public get isValid(): boolean { return 0 < this.numEdges; }\n  public get numEdges() { return undefined !== this.edges ? this.edges.length : 0; }\n}\n\n/** @internal */\nexport class SilhouetteEdgeArgs extends EdgeArgs {\n  public normals?: OctEncodedNormalPair[];\n\n  public init(meshEdges?: MeshEdges) {\n    this.clear();\n    if (undefined !== meshEdges && 0 < meshEdges.silhouette.length) {\n      this.edges = meshEdges.silhouette;\n      this.normals = meshEdges.silhouetteNormals;\n    }\n\n    return this.isValid;\n  }\n\n  public clear() { this.normals = undefined; super.clear(); }\n}\n\n/** @internal */\nexport class PolylineEdgeArgs {\n  public lines?: PolylineData[];\n\n  public constructor(lines?: PolylineData[]) { this.init(lines); }\n\n  public init(lines?: PolylineData[]): boolean {\n    this.lines = undefined !== lines && 0 < lines.length ? lines : undefined;\n    return this.isValid;\n  }\n\n  public get numLines() { return undefined !== this.lines ? this.lines.length : 0; }\n  public get isValid() { return this.numLines > 0; }\n  public clear() { this.lines = undefined; }\n}\n\n/** Represents a texture image applied to a surface during rendering.\n * A RenderTexture is typically - but not always - associated with a [[RenderMaterial]].\n * @see [[RenderSystem]] for functions used to create RenderTextures.\n * @beta\n */\nexport abstract class RenderTexture implements IDisposable {\n  /** A string uniquely identifying this texture within the context of an [[IModelConnection]]. Typically this is the element Id of the corresponding Texture element in the [[IModelDb]].\n   * Textures created on the front-end generally have no key.\n   */\n  public readonly key: string | undefined;\n  /** Indicates the type of texture. */\n  public readonly type: RenderTexture.Type;\n  /** Indicates that some object is managing the lifetime of this texture and will take care of calling its dispose function appropriately.\n   * An unowned texture associated with a [[RenderGraphic]] will be disposed when the RenderGraphic is disposed.\n   */\n  public readonly isOwned: boolean;\n\n  public get isTileSection(): boolean { return RenderTexture.Type.TileSection === this.type; }\n  public get isGlyph(): boolean { return RenderTexture.Type.Glyph === this.type; }\n  public get isSkyBox(): boolean { return RenderTexture.Type.SkyBox === this.type; }\n\n  protected constructor(params: RenderTexture.Params) {\n    this.key = params.key;\n    this.type = params.type;\n    this.isOwned = params.isOwned;\n  }\n\n  /** Releases any WebGL resources owned by this texture.\n   * If [[RenderTexture.isOwned]] is true, then whatever object claims ownership of the texture is responsible for disposing of it when it is no longer needed.\n   * Otherwise, imodeljs will handle its disposal.\n   */\n  public abstract dispose(): void;\n}\n\n/** Represents a texture image applied to a surface during rendering.\n * A RenderTexture is typically - but not always - associated with a [[RenderMaterial]].\n * @see [[RenderSystem]] for functions used to create RenderTextures.\n * @beta\n */\nexport namespace RenderTexture {\n  /** Enumerates the types of [[RenderTexture]]s. */\n  export const enum Type { // tslint:disable-line:no-const-enum\n    /** An image applied to a surface, with support for mip-mapping and repeating. */\n    Normal,\n    /** An image containing any number of text glyphs, used for efficiently rendering readable small text. */\n    Glyph,\n    /** A non-repeating image with no mip-maps, used for example for tiled map imagery. */\n    TileSection,\n    /** A three-dimensional texture used for rendering a skybox. */\n    SkyBox,\n  }\n\n  /** Parameters used to construct a [[RenderTexture]]. */\n  export class Params {\n    /** A string uniquely identifying this texture within the context of an [[IModelConnection]]. Typically this is the element Id of the corresponding Texture element in the [[IModelDb]].\n     * Textures created on the front-end generally have no key.\n     */\n    public readonly key?: string;\n    /** Indicates the type of texture. */\n    public readonly type: Type;\n    /** Indicates that some object is managing the lifetime of this texture and will take care of calling its dispose function appropriately.\n     * An unowned texture associated with a [[RenderGraphic]] will be disposed when the RenderGraphic is disposed.\n     */\n    public readonly isOwned: boolean; // For unnamed textures\n\n    public constructor(key?: string, type: Type = Type.Normal, isOwned: boolean = false) {\n      this.key = key;\n      this.type = type;\n      this.isOwned = isOwned;\n    }\n\n    public get isTileSection(): boolean { return Type.TileSection === this.type; }\n    public get isGlyph(): boolean { return Type.Glyph === this.type; }\n    public get isSkyBox(): boolean { return Type.SkyBox === this.type; }\n\n    /** Obtain a RenderTexture params object with default values. */\n    public static readonly defaults = new Params();\n  }\n}\n\n/** Represents a material which can be applied to a surface to control aspects of its appearance such as color, reflectivity, texture, and so on.\n * @beta\n */\nexport abstract class RenderMaterial {\n  /** If the material originated from a Material element in the [[IModelDb]], the Id of that element. */\n  public readonly key?: string;\n  /** Describes how to map an image to a surface to which this material is applied. */\n  public readonly textureMapping?: TextureMapping;\n\n  protected constructor(params: RenderMaterial.Params) {\n    this.key = params.key;\n    this.textureMapping = params.textureMapping;\n  }\n\n  public get hasTexture(): boolean { return this.textureMapping !== undefined && this.textureMapping.texture !== undefined; }\n}\n\n/** Represents a material which can be applied to a surface to control aspects of its appearance such as color, reflectivity, and so on.\n * @beta\n */\nexport namespace RenderMaterial {\n  /** Parameters used to construct a [[RenderMaterial]] */\n  export class Params {\n    /** If the material originates from a Material element in the [[IModelDb]], the Id of that element. */\n    public key?: string;\n    public diffuseColor?: ColorDef;\n    public specularColor?: ColorDef;\n    public emissiveColor?: ColorDef;\n    public reflectColor?: ColorDef;\n    public textureMapping?: TextureMapping;\n    public diffuse: number = 0.6;\n    public specular: number = .4;\n    public specularExponent: number = 13.5;\n    public reflect: number = 0.0;\n    public transparency: number = 0.0;\n    public refract: number = 1.0;\n    public ambient: number = .3;\n    public shadows = true;\n\n    public constructor(key?: string) { this.key = key; }\n\n    /** Obtain an immutable instance of a RenderMaterial with all default properties. */\n    public static readonly defaults = new Params();\n\n    /** Create a RenderMaterial params object using specified key and ColorDef values, as well as an optional texture mapping. */\n    public static fromColors(key?: string, diffuseColor?: ColorDef, specularColor?: ColorDef, emissiveColor?: ColorDef, reflectColor?: ColorDef, textureMap?: TextureMapping): Params {\n      const materialParams = new Params();\n      materialParams.key = key;\n      materialParams.diffuseColor = diffuseColor;\n      materialParams.specularColor = specularColor;\n      materialParams.emissiveColor = emissiveColor;\n      materialParams.reflectColor = reflectColor;\n      materialParams.textureMapping = textureMap;\n      return materialParams;\n    }\n  }\n}\nObject.freeze(RenderMaterial.Params.defaults);\n\n/** @internal */\nexport namespace ImageLight {\n  export class Solar {\n    constructor(public direction: Vector3d = new Vector3d(),\n      public color: ColorDef = ColorDef.white,\n      public intensity: number = 0) { }\n  }\n}\n\n/** The \"cooked\" material and symbology for a [[RenderGraphic]]. This determines the appearance\n * (e.g. texture, color, width, linestyle, etc.) used to draw Geometry.\n * @beta\n */\nexport class GraphicParams {\n  public fillFlags = FillFlags.None;\n  public linePixels = LinePixels.Solid;\n  public rasterWidth = 1;\n  public readonly lineColor = new ColorDef();\n  public readonly fillColor = new ColorDef();\n  public trueWidthStart = 0;\n  public trueWidthEnd = 0;\n  public lineTexture?: RenderTexture;\n  public material?: RenderMaterial;\n  public gradient?: Gradient.Symb;\n\n  /** set the line color\n   *  @param lineColor the new line color for this GraphicParams.\n   */\n  public setLineColor(lineColor: ColorDef) { this.lineColor.setFrom(lineColor); }\n  public setLineTransparency(transparency: number) { this.lineColor.setAlpha(transparency); }\n\n  /**\n   * Set the current fill color for this GraphicParams.\n   * @param fillColor the new fill color for this GraphicParams.\n   */\n  public setFillColor(fillColor: ColorDef) { this.fillColor.setFrom(fillColor); }\n  public setFillTransparency(transparency: number) { this.fillColor.setAlpha(transparency); }\n\n  /** Set the linear pixel pattern for this GraphicParams. This is only valid for overlay decorators in pixel mode. */\n  public setLinePixels(code: LinePixels) { this.linePixels = code; this.lineTexture = undefined; }\n\n  public static fromSymbology(lineColor: ColorDef, fillColor: ColorDef, lineWidth: number, linePixels = LinePixels.Solid): GraphicParams {\n    const graphicParams = new GraphicParams();\n    graphicParams.setLineColor(lineColor);\n    graphicParams.setFillColor(fillColor);\n    graphicParams.rasterWidth = lineWidth;\n    graphicParams.setLinePixels(linePixels);\n    return graphicParams;\n  }\n\n  public static fromBlankingFill(fillColor: ColorDef): GraphicParams {\n    const graphicParams = new GraphicParams();\n    graphicParams.setFillColor(fillColor);\n    graphicParams.fillFlags = FillFlags.Blanking;\n    return graphicParams;\n  }\n}\n\n/** @internal */\nexport const enum AntiAliasPref { Detect = 0, On = 1, Off = 2 } // tslint:disable-line:no-const-enum\n\n/** Enumerates the available rendering modes. The rendering mode chiefly controls whether and how surfaces and their edges are drawn.\n * Generally speaking,\n *  - Wireframe draws only edges.\n *  - SmoothShade draws only surfaces.\n *  - HiddenLine and SolidFill draw both surfaces and edges.\n *  - Lighting is only applied in SmoothShade mode.\n *\n * The [[FillFlags]] associated with planar regions controls whether and how the region's interior area is displayed in Wireframe mode.\n * [[ViewFlags]] has options for enabling display of visible and/or hidden edges in SmoothShade mode.\n * [[HiddenLine.Settings]] allow aspects of edge and surface symbology to be overridden within a view.\n * @public\n */\nexport enum RenderMode {\n  /** Render only edges, no surfaces, with exceptions for planar regions with [[FillFlags]] set up to render the surface in wireframe mode. */\n  Wireframe = 0,\n  /** Render only surfaces, no edges, with lighting. */\n  SmoothShade = 6,\n  /** Render edges and surfaces. Surfaces are drawn using the view's background color instead of the element's fill color. */\n  HiddenLine = 3,\n  /** Render edges and surfaces. */\n  SolidFill = 4,\n}\n\n/** The current position (eyepoint), lens angle, and focus distance of a camera.\n * @public\n */\nexport class Camera implements CameraProps {\n  public readonly lens: Angle;\n  public focusDist: number;\n  public readonly eye: Point3d;\n\n  public static isValidLensAngle(val: Angle) { return val.radians > (Math.PI / 8.0) && val.radians < Math.PI; }\n  public static validateLensAngle(val: Angle) { if (!this.isValidLensAngle(val)) val.setRadians(Math.PI / 2.0); }\n  public invalidateFocus() { this.focusDist = 0.0; }\n  public get isFocusValid() { return this.focusDist > 0.0 && this.focusDist < 1.0e14; }\n  public getFocusDistance() { return this.focusDist; }\n  public setFocusDistance(dist: number) { this.focusDist = dist; }\n  public get isLensValid() { return Camera.isValidLensAngle(this.lens); }\n  public validateLens() { Camera.validateLensAngle(this.lens); }\n  public getLensAngle() { return this.lens; }\n  public setLensAngle(angle: Angle) { this.lens.setFrom(angle); }\n  public getEyePoint() { return this.eye; }\n  public setEyePoint(pt: XYAndZ) { this.eye.setFrom(pt); }\n  public get isValid() { return this.isLensValid && this.isFocusValid; }\n  public equals(other: Camera) { return this.lens === other.lens && this.focusDist === other.focusDist && this.eye.isExactEqual(other.eye); }\n  public clone() { return new Camera(this); }\n  public setFrom(rhs: Camera) {\n    this.lens.setFrom(rhs.lens);\n    this.focusDist = rhs.focusDist;\n    this.eye.setFrom(rhs.eye);\n  }\n\n  /** Construct a Camera\n   * @param props The properties of the new camera. If undefined, create a camera with eye at {0,0,0}, 90 degree lens, 1 meter focus distance.\n   */\n  public constructor(props?: CameraProps) {\n    if (props !== undefined) {\n      this.lens = Angle.fromJSON(props.lens);\n      this.focusDist = JsonUtils.asDouble(props.focusDist);\n      this.eye = Point3d.fromJSON(props.eye);\n      return;\n    }\n    this.lens = Angle.createRadians(Math.PI / 2.0);\n    this.focusDist = 1;\n    this.eye = new Point3d();\n  }\n}\n\n/** Flags for controlling how graphics appear within a View.\n * @public\n */\nexport class ViewFlags {\n  /** The [[RenderMode]] of the view. */\n  public renderMode: RenderMode = RenderMode.Wireframe;\n  /** Shows or hides dimensions. */\n  public dimensions: boolean = true;\n  /** Shows or hides pattern geometry. */\n  public patterns: boolean = true;\n  /** Controls whether non-zero line weights are used or display using weight 0. */\n  public weights: boolean = true;\n  /** Controls whether custom line styles are used (e.g. control whether elements with custom line styles draw normally, or as solid lines). */\n  public styles: boolean = true;\n  /** Controls whether element transparency is used (e.g. control whether elements with transparency draw normally, or as opaque). */\n  public transparency: boolean = true;\n  /** @internal This doesn't belong here - it is not persistent. */\n  public continuousRendering: boolean = false;\n  /** Controls whether the fills on filled elements are displayed. */\n  public fill: boolean = true;\n  /** Controls whether to display texture maps for material assignments. When off only material color is used for display. */\n  public textures: boolean = true;\n  /** Controls whether materials are used (e.g. control whether geometry with materials draw normally, or as if it has no material). */\n  public materials: boolean = true;\n  /** Shows or hides the ACS triad. */\n  public acsTriad: boolean = false;\n  /** Shows or hides the grid. The grid settings are a design file setting. */\n  public grid: boolean = false;\n  /** Shows or hides visible edges in the shaded render mode. */\n  public visibleEdges: boolean = false;\n  /** Shows or hides hidden edges in the shaded render mode. */\n  public hiddenEdges: boolean = false;\n  /** Controls whether the source lights in spatial models are used */\n  public sourceLights: boolean = false;\n  /** Controls whether camera (ambient, portrait, flashbulb) lights are used. */\n  public cameraLights: boolean = false;\n  /** Controls whether sunlight used */\n  public solarLight: boolean = false;\n  /** Shows or hides shadows. */\n  public shadows: boolean = false;\n  /** Controls whether the clip volume is applied. */\n  public clipVolume: boolean = true;\n  /** Shows or hides construction class geometry. */\n  public constructions: boolean = false;\n  /** Draw all graphics in a single color */\n  public monochrome: boolean = false;\n  /** @internal unused Ignore geometry maps */\n  public noGeometryMap: boolean = false;\n  /** Display background map */\n  public backgroundMap: boolean = false;\n  /** Use material colors for hidden lines */\n  public hLineMaterialColors: boolean = false;\n  /** @internal 0=none, 1=generate mask, 2=use mask */\n  public edgeMask: number = 0;\n  /** Controls whether ambient occlusion is used. */\n  public ambientOcclusion: boolean = false;\n  /** Controls whether surface discard is always applied regardless of other ViewFlags.\n   * Surface shaders contain complicated logic to ensure that the edges of a surface always draw in front of the surface, and that planar surfaces sketched coincident with\n   * non-planar surfaces always draw in front of those non-planar surfaces.\n   * When this view flag is set to false (the default), then for 3d views if the render mode is wireframe (only edges are displayed) or smooth shader with visible edges turned off (only surfaces are displayed),\n   * that logic does not execute, potentially improving performance for no degradation in visual quality. In some scenarios - such as wireframe views containing many planar regions with interior fill, or smooth views containing many coincident planar and non-planar surfaces - enabling this view flag improves display quality by forcing that logic to execute.\n   */\n  public forceSurfaceDiscard: boolean = false;\n\n  public clone(out?: ViewFlags): ViewFlags { return ViewFlags.createFrom(this, out); }\n  public static createFrom(other?: ViewFlags, out?: ViewFlags): ViewFlags {\n    const val = undefined !== out ? out : new ViewFlags();\n    if (other) {\n      val.renderMode = other.renderMode;\n      val.dimensions = other.dimensions;\n      val.patterns = other.patterns;\n      val.weights = other.weights;\n      val.styles = other.styles;\n      val.transparency = other.transparency;\n      val.continuousRendering = other.continuousRendering;\n      val.fill = other.fill;\n      val.textures = other.textures;\n      val.materials = other.materials;\n      val.acsTriad = other.acsTriad;\n      val.grid = other.grid;\n      val.visibleEdges = other.visibleEdges;\n      val.hiddenEdges = other.hiddenEdges;\n      val.sourceLights = other.sourceLights;\n      val.cameraLights = other.cameraLights;\n      val.solarLight = other.solarLight;\n      val.shadows = other.shadows;\n      val.clipVolume = other.clipVolume;\n      val.constructions = other.constructions;\n      val.monochrome = other.monochrome;\n      val.noGeometryMap = other.noGeometryMap;\n      val.hLineMaterialColors = other.hLineMaterialColors;\n      val.backgroundMap = other.backgroundMap;\n      val.edgeMask = other.edgeMask;\n      val.ambientOcclusion = other.ambientOcclusion;\n      val.forceSurfaceDiscard = other.forceSurfaceDiscard;\n    }\n    return val;\n  }\n\n  /** @internal */\n  public hiddenEdgesVisible(): boolean {\n    switch (this.renderMode) {\n      case RenderMode.SolidFill:\n      case RenderMode.HiddenLine:\n        return this.hiddenEdges;\n      case RenderMode.SmoothShade:\n        return this.visibleEdges && this.hiddenEdges;\n    }\n    return true;\n  }\n  /** @internal */\n  public edgesRequired(): boolean {\n    switch (this.renderMode) {\n      case RenderMode.SolidFill:\n      case RenderMode.HiddenLine:\n      case RenderMode.Wireframe:\n        return true;\n      case RenderMode.SmoothShade:\n        return this.visibleEdges;\n    }\n  }\n\n  public toJSON(): ViewFlagProps {\n    const out: ViewFlagProps = {};\n    if (!this.constructions) out.noConstruct = true;\n    if (!this.dimensions) out.noDim = true;\n    if (!this.patterns) out.noPattern = true;\n    if (!this.weights) out.noWeight = true;\n    if (!this.styles) out.noStyle = true;\n    if (!this.transparency) out.noTransp = true;\n    if (this.continuousRendering) out.contRend = true;\n    if (!this.fill) out.noFill = true;\n    if (this.grid) out.grid = true;\n    if (this.acsTriad) out.acs = true;\n    if (!this.textures) out.noTexture = true;\n    if (!this.materials) out.noMaterial = true;\n    if (!this.cameraLights) out.noCameraLights = true;\n    if (!this.sourceLights) out.noSourceLights = true;\n    if (!this.solarLight) out.noSolarLight = true;\n    if (this.visibleEdges) out.visEdges = true;\n    if (this.hiddenEdges) out.hidEdges = true;\n    if (this.shadows) out.shadows = true;\n    if (this.clipVolume) out.clipVol = true;\n    if (this.hLineMaterialColors) out.hlMatColors = true;\n    if (this.monochrome) out.monochrome = true;\n    if (this.backgroundMap) out.backgroundMap = true;\n    if (this.edgeMask !== 0) out.edgeMask = this.edgeMask;\n    if (this.ambientOcclusion) out.ambientOcclusion = true;\n    if (this.forceSurfaceDiscard) out.forceSurfaceDiscard = true;\n\n    out.renderMode = this.renderMode;\n    return out;\n  }\n\n  public static fromJSON(json?: ViewFlagProps): ViewFlags {\n    const val = new ViewFlags();\n    if (!json)\n      return val;\n\n    val.constructions = !JsonUtils.asBool(json.noConstruct);\n    val.dimensions = !JsonUtils.asBool(json.noDim);\n    val.patterns = !JsonUtils.asBool(json.noPattern);\n    val.weights = !JsonUtils.asBool(json.noWeight);\n    val.styles = !JsonUtils.asBool(json.noStyle);\n    val.transparency = !JsonUtils.asBool(json.noTransp);\n    val.continuousRendering = JsonUtils.asBool(json.contRend);\n    val.fill = !JsonUtils.asBool(json.noFill);\n    val.grid = JsonUtils.asBool(json.grid);\n    val.acsTriad = JsonUtils.asBool(json.acs);\n    val.textures = !JsonUtils.asBool(json.noTexture);\n    val.materials = !JsonUtils.asBool(json.noMaterial);\n    val.cameraLights = !JsonUtils.asBool(json.noCameraLights);\n    val.sourceLights = !JsonUtils.asBool(json.noSourceLights);\n    val.solarLight = !JsonUtils.asBool(json.noSolarLight);\n    val.visibleEdges = JsonUtils.asBool(json.visEdges);\n    val.hiddenEdges = JsonUtils.asBool(json.hidEdges);\n    val.shadows = JsonUtils.asBool(json.shadows);\n    val.clipVolume = JsonUtils.asBool(json.clipVol);\n    val.monochrome = JsonUtils.asBool(json.monochrome);\n    val.edgeMask = JsonUtils.asInt(json.edgeMask);\n    val.hLineMaterialColors = JsonUtils.asBool(json.hlMatColors);\n    val.backgroundMap = JsonUtils.asBool(json.backgroundMap);\n    val.ambientOcclusion = JsonUtils.asBool(json.ambientOcclusion);\n    val.forceSurfaceDiscard = JsonUtils.asBool(json.forceSurfaceDiscard);\n\n    const renderModeValue = JsonUtils.asInt(json.renderMode);\n    if (renderModeValue < RenderMode.HiddenLine)\n      val.renderMode = RenderMode.Wireframe;\n    else if (renderModeValue > RenderMode.SolidFill)\n      val.renderMode = RenderMode.SmoothShade;\n    else\n      val.renderMode = renderModeValue;\n\n    return val;\n  }\n\n  public equals(other: ViewFlags): boolean {\n    return this.renderMode === other.renderMode\n      && this.dimensions === other.dimensions\n      && this.patterns === other.patterns\n      && this.weights === other.weights\n      && this.styles === other.styles\n      && this.transparency === other.transparency\n      && this.continuousRendering === other.continuousRendering\n      && this.fill === other.fill\n      && this.textures === other.textures\n      && this.materials === other.materials\n      && this.acsTriad === other.acsTriad\n      && this.grid === other.grid\n      && this.visibleEdges === other.visibleEdges\n      && this.hiddenEdges === other.hiddenEdges\n      && this.sourceLights === other.sourceLights\n      && this.cameraLights === other.cameraLights\n      && this.solarLight === other.solarLight\n      && this.shadows === other.shadows\n      && this.clipVolume === other.clipVolume\n      && this.constructions === other.constructions\n      && this.monochrome === other.monochrome\n      && this.noGeometryMap === other.noGeometryMap\n      && this.hLineMaterialColors === other.hLineMaterialColors\n      && this.backgroundMap === other.backgroundMap\n      && this.edgeMask === other.edgeMask\n      && this.ambientOcclusion === other.ambientOcclusion\n      && this.forceSurfaceDiscard === other.forceSurfaceDiscard;\n  }\n}\n\n/** @alpha */\nexport namespace ViewFlag {\n  /** @alpha */\n  export const enum PresenceFlag { // tslint:disable-line:no-const-enum\n    kRenderMode,\n    kText,\n    kDimensions,\n    kPatterns,\n    kWeights,\n    kStyles,\n    kTransparency,\n    kContinuousRendering,\n    kFill,\n    kTextures,\n    kMaterials,\n    kVisibleEdges,\n    kHiddenEdges,\n    kSourceLights,\n    kCameraLights,\n    kSolarLight,\n    kShadows,\n    kClipVolume,\n    kConstructions,\n    kMonochrome,\n    kGeometryMap,\n    kHlineMaterialColors,\n    kEdgeMask,\n    kBackgroundMap,\n    kForceSurfaceDiscard,\n  }\n\n  /** Overrides a subset of ViewFlags.\n   * @alpha\n   */\n  export class Overrides {\n    private _present = 0;\n    private readonly _values = new ViewFlags();\n\n    public setPresent(flag: PresenceFlag) { this._present |= (1 << flag); }\n    public isPresent(flag: PresenceFlag): boolean { return 0 !== (this._present & (1 << flag)); }\n\n    /** Construct a ViewFlagsOverrides which overrides all flags to match the specified ViewFlags, or overrides nothing if no ViewFlags are supplied. */\n    constructor(flags?: ViewFlags) {\n      if (undefined !== flags)\n        this.overrideAll(flags);\n    }\n\n    public overrideAll(flags?: ViewFlags) {\n      ViewFlags.createFrom(flags, this._values);\n      this._present = 0xffffffff;\n    }\n\n    public clone(out?: Overrides) {\n      const result = undefined !== out ? out : new Overrides();\n      result.copyFrom(this);\n      return result;\n    }\n    public copyFrom(other: Overrides): void {\n      other._values.clone(this._values);\n      this._present = other._present;\n    }\n\n    public setShowDimensions(val: boolean) { this._values.dimensions = val; this.setPresent(PresenceFlag.kDimensions); }\n    public setShowPatterns(val: boolean) { this._values.patterns = val; this.setPresent(PresenceFlag.kPatterns); }\n    public setShowWeights(val: boolean) { this._values.weights = val; this.setPresent(PresenceFlag.kWeights); }\n    public setShowStyles(val: boolean) { this._values.styles = val; this.setPresent(PresenceFlag.kStyles); }\n    public setShowTransparency(val: boolean) { this._values.transparency = val; this.setPresent(PresenceFlag.kTransparency); }\n    public setShowFill(val: boolean) { this._values.fill = val; this.setPresent(PresenceFlag.kFill); }\n    public setShowTextures(val: boolean) { this._values.textures = val; this.setPresent(PresenceFlag.kTextures); }\n    public setShowMaterials(val: boolean) { this._values.materials = val; this.setPresent(PresenceFlag.kMaterials); }\n    public setShowSourceLights(val: boolean) { this._values.sourceLights = val; this.setPresent(PresenceFlag.kSourceLights); }\n    public setShowCameraLights(val: boolean) { this._values.cameraLights = val; this.setPresent(PresenceFlag.kCameraLights); }\n    public setShowSolarLight(val: boolean) { this._values.solarLight = val; this.setPresent(PresenceFlag.kSolarLight); }\n    public setShowVisibleEdges(val: boolean) { this._values.visibleEdges = val; this.setPresent(PresenceFlag.kVisibleEdges); }\n    public setShowHiddenEdges(val: boolean) { this._values.hiddenEdges = val; this.setPresent(PresenceFlag.kHiddenEdges); }\n    public setShowShadows(val: boolean) { this._values.shadows = val; this.setPresent(PresenceFlag.kShadows); }\n    public setShowClipVolume(val: boolean) { this._values.clipVolume = val; this.setPresent(PresenceFlag.kClipVolume); }\n    public setShowConstructions(val: boolean) { this._values.constructions = val; this.setPresent(PresenceFlag.kConstructions); }\n    public setMonochrome(val: boolean) { this._values.monochrome = val; this.setPresent(PresenceFlag.kMonochrome); }\n    public setIgnoreGeometryMap(val: boolean) { this._values.noGeometryMap = val; this.setPresent(PresenceFlag.kGeometryMap); }\n    public setShowBackgroundMap(val: boolean) { this._values.backgroundMap = val; this.setPresent(PresenceFlag.kBackgroundMap); }\n    public setUseHlineMaterialColors(val: boolean) { this._values.hLineMaterialColors = val; this.setPresent(PresenceFlag.kHlineMaterialColors); }\n    public setForceSurfaceDiscard(val: boolean) { this._values.forceSurfaceDiscard = val; this.setPresent(PresenceFlag.kForceSurfaceDiscard); }\n    public setEdgeMask(val: number) { this._values.edgeMask = val; this.setPresent(PresenceFlag.kEdgeMask); }\n    public setRenderMode(val: RenderMode) { this._values.renderMode = val; this.setPresent(PresenceFlag.kRenderMode); }\n    public anyOverridden() { return 0 !== this._present; }\n    public clear() { this._present = 0; }\n\n    /** If ViewFlags.clipVolume is overridden, return the override value; else return undefined.\n     * @internal\n     */\n    public get clipVolumeOverride(): boolean | undefined {\n      return this.isPresent(PresenceFlag.kClipVolume) ? this._values.clipVolume : undefined;\n    }\n\n    /** Apply these overrides to the supplied ViewFlags */\n    public apply(base: ViewFlags): ViewFlags {\n      if (!this.anyOverridden())\n        return base;\n\n      if (this.isPresent(PresenceFlag.kDimensions)) base.dimensions = this._values.dimensions;\n      if (this.isPresent(PresenceFlag.kPatterns)) base.patterns = this._values.patterns;\n      if (this.isPresent(PresenceFlag.kWeights)) base.weights = this._values.weights;\n      if (this.isPresent(PresenceFlag.kStyles)) base.styles = this._values.styles;\n      if (this.isPresent(PresenceFlag.kTransparency)) base.transparency = this._values.transparency;\n      if (this.isPresent(PresenceFlag.kFill)) base.fill = this._values.fill;\n      if (this.isPresent(PresenceFlag.kTextures)) base.textures = this._values.textures;\n      if (this.isPresent(PresenceFlag.kMaterials)) base.materials = this._values.materials;\n      if (this.isPresent(PresenceFlag.kSolarLight)) base.solarLight = this._values.solarLight;\n      if (this.isPresent(PresenceFlag.kCameraLights)) base.cameraLights = this._values.cameraLights;\n      if (this.isPresent(PresenceFlag.kSourceLights)) base.sourceLights = this._values.sourceLights;\n      if (this.isPresent(PresenceFlag.kVisibleEdges)) base.visibleEdges = this._values.visibleEdges;\n      if (this.isPresent(PresenceFlag.kHiddenEdges)) base.hiddenEdges = this._values.hiddenEdges;\n      if (this.isPresent(PresenceFlag.kShadows)) base.shadows = this._values.shadows;\n      if (this.isPresent(PresenceFlag.kClipVolume)) base.clipVolume = this._values.clipVolume;\n      if (this.isPresent(PresenceFlag.kConstructions)) base.constructions = this._values.constructions;\n      if (this.isPresent(PresenceFlag.kMonochrome)) base.monochrome = this._values.monochrome;\n      if (this.isPresent(PresenceFlag.kGeometryMap)) base.noGeometryMap = this._values.noGeometryMap;\n      if (this.isPresent(PresenceFlag.kBackgroundMap)) base.backgroundMap = this._values.backgroundMap;\n      if (this.isPresent(PresenceFlag.kHlineMaterialColors)) base.hLineMaterialColors = this._values.hLineMaterialColors;\n      if (this.isPresent(PresenceFlag.kForceSurfaceDiscard)) base.forceSurfaceDiscard = this._values.forceSurfaceDiscard;\n      if (this.isPresent(PresenceFlag.kEdgeMask)) base.edgeMask = this._values.edgeMask;\n      if (this.isPresent(PresenceFlag.kRenderMode)) base.renderMode = this._values.renderMode;\n      return base;\n    }\n  }\n}\n\n/** Enumerates the available patterns for drawing patterned lines.\n * Each is a 32-bit pattern in which each bit specifies the on- or off-state of a pixel along the line. The pattern repeats along the length of the entire line.\n * @public\n */\nexport enum LinePixels {\n  /** A solid line. */\n  Solid = 0,\n  /** A solid line. */\n  Code0 = Solid,\n  /** 1 lit pixel followed by 7 unlit pixels: =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= */\n  Code1 = 0x80808080,\n  /** 5 lit pixels followed by 3 unlit pixels: =====&nbsp;&nbsp;&nbsp;=====&nbsp;&nbsp;&nbsp;===== */\n  Code2 = 0xf8f8f8f8,\n  /** 11 lit pixels followed by 5 unlit pixels: ===========&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=========== */\n  Code3 = 0xffe0ffe0,\n  /** 7 lit pixels followed by 4 unlit pixels followed by 1 lit pixel followed by 1 lit pixel: =======&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;&nbsp;=======&nbsp;&nbsp;&nbsp;&nbsp;= */\n  Code4 = 0xfe10fe10,\n  /** 3 lit pixels followed by 5 unlit pixels: ===&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;===&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=== */\n  Code5 = 0xe0e0e0e0,\n  /** 5 lit pixels followed by 3 unlit followed by 1 lit followed by 3 unlit followed by 1 lit followed by 3 unlit: =====&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;&nbsp;===== */\n  Code6 = 0xf888f888,\n  /** 8 lit pixels followed by 3 unlit followed by 2 lit followed by 3 unlit: ========&nbsp;&nbsp;&nbsp;==&nbsp;&nbsp;&nbsp;======== */\n  Code7 = 0xff18ff18,\n  /** 2 lit pixels followed by 2 unlit pixels - default style for drawing hidden edges: ==&nbsp;&nbsp;==&nbsp;&nbsp;==&nbsp;&nbsp;== */\n  HiddenLine = 0xcccccccc,\n  /** Barely visible - 1 lit pixel followed by 31 unlit pixels. */\n  Invisible = 0x00000001,\n  /** Indicates no valid line style or none specified, depending on context. */\n  Invalid = -1,\n}\n\n/** Represents a bounding sphere.  Optional optimization for FrustumPlane containment test.\n * @internal\n */\nexport class BoundingSphere {\n  public center: Point3d;\n  public radius: number;\n  constructor(center?: Point3d, radius?: number) { this.center = center ? center : Point3d.createZero(); this.radius = undefined === radius ? 0.0 : radius; }\n  public init(center: Point3d, radius: number) { this.center = center; this.radius = radius; }\n  public transformBy(transform: Transform, result: BoundingSphere) {\n    transform.multiplyPoint3d(this.center, result.center);\n    result.radius = this.radius * Math.max(transform.matrix.columnXMagnitude(), Math.max(transform.matrix.columnYMagnitude(), (transform.matrix.columnZMagnitude())));\n    return result;\n  }\n}\n\n/** Represents a frustum as 6 planes and provides containment and intersection testing\n * @internal\n */\nexport class FrustumPlanes {\n  private _planes?: ClipPlane[];\n\n  public constructor(frustum?: Frustum) {\n    if (undefined !== frustum) {\n      this.init(frustum);\n    }\n  }\n\n  public get isValid(): boolean { return undefined !== this._planes; }\n\n  public init(frustum: Frustum) {\n    if (undefined === this._planes) {\n      this._planes = [];\n    } else {\n      this._planes.length = 0;\n    }\n\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 1, 3, 5);  // right\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 0, 4, 2);  // left\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 2, 6, 3);  // top\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 0, 1, 4);  // bottom\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 0, 2, 1);  // back\n    FrustumPlanes.addPlaneFromPoints(this._planes, frustum.points, 4, 5, 6);  // front\n  }\n\n  public computeFrustumContainment(box: Frustum, sphere?: BoundingSphere): FrustumPlanes.Containment { return this.computeContainment(box.points, sphere); }\n  public intersectsFrustum(box: Frustum): boolean { return FrustumPlanes.Containment.Outside !== this.computeFrustumContainment(box); }\n  public containsPoint(point: Point3d, tolerance: number = 1.0e-8): boolean { return FrustumPlanes.Containment.Outside !== this.computeContainment([point], undefined, tolerance); }\n\n  public computeContainment(points: Point3d[], sphere?: BoundingSphere, tolerance: number = 1.0e-8): FrustumPlanes.Containment {\n    assert(this.isValid);\n    if (undefined === this._planes) {\n      return FrustumPlanes.Containment.Outside;\n    }\n\n    let allInside = true;\n    for (const plane of this._planes) {\n      if (sphere) { // if sphere provide detect total inside and outside without using corners.\n        const centerDistance = plane.evaluatePoint(sphere.center);\n        const tolerancePlusRadius = tolerance + sphere.radius;\n        if (centerDistance < -tolerancePlusRadius)\n          return FrustumPlanes.Containment.Outside;\n        if (centerDistance > tolerancePlusRadius)\n          continue;\n      }\n      let nOutside = 0;\n      for (const point of points) {\n        if (plane.evaluatePoint(point) + tolerance < 0.0) {\n          ++nOutside;\n          allInside = false;\n        }\n      }\n\n      if (nOutside === points.length) {\n        return FrustumPlanes.Containment.Outside;\n      }\n    }\n\n    return allInside ? FrustumPlanes.Containment.Inside : FrustumPlanes.Containment.Partial;\n  }\n\n  public intersectsRay(origin: Point3d, direction: Vector3d): boolean {\n    assert(this.isValid);\n    if (undefined === this._planes) {\n      return false;\n    }\n\n    let tFar = 1e37;\n    let tNear = -tFar;\n\n    for (const plane of this._planes) {\n      const vD = plane.dotProductVector(direction);\n      const vN = plane.evaluatePoint(origin);\n      if (0.0 === vD) {\n        // ray is parallel... no need to continue testing if outside halfspace.\n        if (vN < 0.0) {\n          return false;\n        }\n      } else {\n        const rayDistance = -vN / vD;\n        if (vD < 0.0) {\n          tFar = Math.min(rayDistance, tFar);\n        } else {\n          tNear = Math.max(rayDistance, tNear);\n        }\n      }\n    }\n\n    return tNear <= tFar;\n  }\n}\n\n/** @internal */\nexport namespace FrustumPlanes {\n  /** @internal */\n  export const enum Containment { // tslint:disable-line:no-const-enum\n    Outside = 0,\n    Partial = 1,\n    Inside = 2,\n  }\n\n  /** @internal */\n  export function addPlaneFromPoints(planes: ClipPlane[], points: Point3d[], i0: number, i1: number, i2: number, expandPlaneDistance: number = 1.0e-6): void {\n    const normal = Vector3d.createCrossProductToPoints(points[i2], points[i1], points[i0]);\n    normal.normalizeInPlace();\n    const plane = ClipPlane.createNormalAndDistance(normal, normal.dotProduct(points[i0]) - expandPlaneDistance);\n    if (undefined !== plane) {\n      planes.push(plane);\n    }\n  }\n}\n\n/** Namespace containing types controlling how ambient occlusion should be drawn.\n * @beta\n */\nexport namespace AmbientOcclusion {\n  /** Describes the properties with which ambient occlusion should be drawn. These properties correspond to a horizon-based ambient occlusion approach. */\n  export interface Props {\n    /** If defined, represents an angle in radians. If the dot product between the normal of the sample and the vector to the camera is less than this value, sampling stops in the current direction. This is used to remove shadows from near planar edges. If undefined, the bias defaults to 0.25. */\n    readonly bias?: number;\n    /** If defined, if the distance in linear depth from the current sample to first sample is greater than this value, sampling stops in the current direction. If undefined, the zLengthCap defaults to 0.0025.  The full range of linear depth is 0 to 1. */\n    readonly zLengthCap?: number;\n    /** If defined, raise the final ambient occlusion to the power of this value. Larger values make the ambient shadows darker. If undefined, the intensity defaults to 2.0. */\n    readonly intensity?: number;\n    /** If defined, indicates the distance to step toward the next texel sample in the current direction. If undefined, texelStepSize defaults to 1.95. */\n    readonly texelStepSize?: number;\n    /** If defined, blurDelta is used to compute the weight of a Gaussian filter. The equation is exp((-0.5 * blurDelta * blurDelta) / (blurSigma * blurSigma)). If undefined, blurDelta defaults to 1.0. */\n    readonly blurDelta?: number;\n    /** If defined, blurSigma is used to compute the weight of a Gaussian filter. The equation is exp((-0.5 * blurDelta * blurDelta) / (blurSigma * blurSigma)). If undefined, blurSigma defaults to 2.0. */\n    readonly blurSigma?: number;\n    /* If defined, blurTexelStepSize indicates the distance to the next texel for blurring. If undefined, blurTexelStepSize defaults to 1.0. */\n    readonly blurTexelStepSize?: number;\n  }\n\n  /** Describes the properties with which ambient occlusion should be drawn. These properties correspond to a horizon-based ambient occlusion approach. */\n  export class Settings implements Props {\n    private static _defaultBias: number = 0.25;\n    private static _defaultZLengthCap: number = 0.0025;\n    private static _defaultIntensity: number = 2.0;\n    private static _defaultTexelStepSize: number = 1.95;\n    private static _defaultBlurDelta: number = 1.0;\n    private static _defaultBlurSigma: number = 2.0;\n    private static _defaultBlurTexelStepSize: number = 1.0;\n\n    public readonly bias?: number;\n    public readonly zLengthCap?: number;\n    public readonly intensity?: number;\n    public readonly texelStepSize?: number;\n    public readonly blurDelta?: number;\n    public readonly blurSigma?: number;\n    public readonly blurTexelStepSize?: number;\n\n    private constructor(json?: Props) {\n      if (undefined === json)\n        return;\n\n      this.bias = JsonUtils.asDouble(json.bias, Settings._defaultBias);\n      this.zLengthCap = JsonUtils.asDouble(json.zLengthCap, Settings._defaultZLengthCap);\n      this.intensity = JsonUtils.asDouble(json.intensity, Settings._defaultIntensity);\n      this.texelStepSize = JsonUtils.asDouble(json.texelStepSize, Settings._defaultTexelStepSize);\n      this.blurDelta = JsonUtils.asDouble(json.blurDelta, Settings._defaultBlurDelta);\n      this.blurSigma = JsonUtils.asDouble(json.blurSigma, Settings._defaultBlurSigma);\n      this.blurTexelStepSize = JsonUtils.asDouble(json.blurTexelStepSize, Settings._defaultBlurTexelStepSize);\n    }\n\n    public static defaults = new Settings({});\n\n    public static fromJSON(json?: Props): Settings { return undefined !== json ? new Settings(json) : this.defaults; }\n\n    public toJSON(): Props {\n      return {\n        bias: this.bias,\n        zLengthCap: this.zLengthCap,\n        intensity: this.intensity,\n        texelStepSize: this.texelStepSize,\n        blurDelta: this.blurDelta,\n        blurSigma: this.blurSigma,\n        blurTexelStepSize: this.blurTexelStepSize,\n      };\n    }\n  }\n}\n\n/** Namespace containing types controlling how edges and surfaces should be drawn in \"hidden line\" and \"solid fill\" [[RenderMode]]s.\n * @beta\n */\nexport namespace HiddenLine {\n  /** Describes the symbology with which edges should be drawn. */\n  export interface StyleProps {\n    /** @internal\n     * This JSON representation is awkward, but it must match that used in the db.\n     * If the JSON came from the db then all members are present and:\n     *  - color is overridden only if ovrColor = true.\n     *  - width is overridden only if width != 0\n     *  - pattern is overridden only if pattern != LinePixels.Invalid\n     * The 'public' JSON representation is more sensible:\n     *  - Color, width, and pattern are each overridden iff they are not undefined.\n     * To make this work for both scenarios, the rules are:\n     *  - color is overridden if color != undefined and ovrColor != false\n     *  - width is overridden if width != undefined and width != 0\n     *  - pattern is overridden if pattern != undefined and pattern != LinePixels.Invalid\n     */\n    readonly ovrColor?: boolean;\n    /** If defined, the color used to draw the edges. If undefined, edges are drawn using the element's line color. */\n    readonly color?: ColorDefProps;\n    /** If defined, the pixel pattern used to draw the edges. If undefined, edges are drawn using the element's line pattern. */\n    readonly pattern?: LinePixels;\n    /** If defined, the width of the edges in pixels. If undefined (or 0), edges are drawn using the element's line width.\n     * @note Non-integer values are truncated, and values are clamped to the range [1, 32].\n     */\n    readonly width?: number;\n  }\n\n  /** Describes the symbology with which edges should be drawn. */\n  export class Style implements StyleProps {\n    /** @internal */\n    public get ovrColor(): boolean { return undefined !== this.color; }\n    /** If defined, the color used to draw the edges. If undefined, edges are drawn using the element's line color. */\n    public readonly color?: ColorDef;\n    /** If defined, the pixel pattern used to draw the edges. If undefined, edges are drawn using the element's line pattern. */\n    public readonly pattern?: LinePixels;\n    /** If defined, the width of the edges in pixels. If undefined (or 0), edges are drawn using the element's line width.\n     * @note Non-integer values are truncated, and values are clamped to the range [1, 32].\n     */\n    public readonly width?: number;\n\n    private constructor(json?: StyleProps, hidden?: true) {\n      if (JsonUtils.isEmptyObjectOrUndefined(json)) {\n        if (hidden)\n          this.pattern = LinePixels.HiddenLine;\n\n        return;\n      }\n\n      json = json as StyleProps; // per JsonUtils.isEmptyObjectOrUndefined()\n      if (undefined !== json.color && false !== json.ovrColor)\n        this.color = ColorDef.fromJSON(json.color);\n\n      if (undefined !== json.pattern) {\n        const pattern = JsonUtils.asInt(json.pattern, hidden ? LinePixels.HiddenLine : LinePixels.Invalid);\n        if (LinePixels.Invalid !== pattern)\n          this.pattern = pattern;\n      } else if (hidden) {\n        this.pattern = LinePixels.HiddenLine;\n      }\n\n      if (undefined !== json.width) {\n        let width = JsonUtils.asInt(json.width, 0);\n        if (0 !== width) {\n          width = Math.max(1, width);\n          this.width = Math.min(32, width);\n        }\n      }\n    }\n\n    public static readonly defaultVisible = new Style({});\n    public static readonly defaultHidden = new Style({}, true);\n\n    public static fromJSON(json?: StyleProps, hidden?: true): Style {\n      if (undefined !== json)\n        return new Style(json, hidden);\n\n      return hidden ? this.defaultHidden : this.defaultVisible;\n    }\n\n    /** Create a Style equivalent to this one but with the specified color override. */\n    public overrideColor(color: ColorDef): Style {\n      if (undefined !== this.color && this.color.equals(color))\n        return this;\n\n      return Style.fromJSON({\n        color,\n        ovrColor: true,\n        pattern: this.pattern,\n        width: this.width,\n      });\n    }\n\n    /** Returns true if this Style is equivalent to the supplied Style. */\n    public equals(other: Style): boolean {\n      if (this === other)\n        return true;\n      else if (this.ovrColor !== other.ovrColor || this.pattern !== other.pattern || this.width !== other.width)\n        return false;\n      else\n        return undefined === this.color || this.color.equals(other.color!);\n    }\n\n    public toJSON(): StyleProps {\n      return {\n        ovrColor: this.ovrColor,\n        color: undefined !== this.color ? this.color : ColorDef.white,\n        pattern: undefined !== this.pattern ? this.pattern : LinePixels.Invalid,\n        width: undefined !== this.width ? this.width : 0,\n      };\n    }\n  }\n\n  /** Describes how visible and hidden edges and transparent surfaces should be rendered in \"hidden line\" and \"solid fill\" [[RenderMode]]s. */\n  export interface SettingsProps {\n    /** Describes how visible edges (those unobscured by other geometry) should be displayed. */\n    readonly visible?: StyleProps;\n    /** Describes how hidden edges (those obscured by other geometry) should be displayed. */\n    readonly hidden?: StyleProps;\n    /** A value in the range [0.0, 1.0] specifying a threshold below which transparent surfaces should not be drawn.\n     * A value of 0.0 indicates any surface that is not 100% opaque should not be drawn.\n     * A value of 0.25 indicates any surface that is less than 25% opaque should not be drawn.\n     * A value of 1.0 indicates that all surfaces should be drawn regardless of transparency.\n     * @note values will be clamped to the range [0.0, 1.0].\n     * @note Defaults to 1.0.\n     */\n    readonly transThreshold?: number;\n  }\n\n  /** Describes how visible and hidden edges and transparent surfaces should be rendered in \"hidden line\" and \"solid fill\" [[RenderMode]]s. */\n  export class Settings {\n    /** Describes how visible edges (those unobscured by other geometry) should be displayed. */\n    public readonly visible: Style;\n    /** Describes how hidden edges (those obscured by other geometry) should be displayed. */\n    public readonly hidden: Style;\n    /** A value in the range [0.0, 1.0] specifying a threshold below which transparent surfaces should not be drawn.\n     * A value of 0.0 indicates any surface that is not 100% opaque should not be drawn.\n     * A value of 0.25 indicates any surface that is less than 25% opaque should not be drawn.\n     * A value of 1.0 indicates that all surfaces should be drawn regardless of transparency.\n     * @note values will be clamped to the range [0.0, 1.0].\n     * @note Defaults to 1.0.\n     */\n    public readonly transparencyThreshold: number;\n    public get transThreshold(): number { return this.transparencyThreshold; }\n\n    /** The default display settings. */\n    public static defaults = new Settings({});\n\n    /** Create a DisplaySettings from its JSON representation. */\n    public static fromJSON(json?: SettingsProps): Settings {\n      if (JsonUtils.isEmptyObjectOrUndefined(json))\n        return this.defaults;\n      else if (json instanceof Settings)\n        return json;\n      else\n        return new Settings(json!);\n    }\n\n    public toJSON(): SettingsProps {\n      return {\n        visible: this.visible.toJSON(),\n        hidden: this.hidden.toJSON(),\n        transThreshold: this.transThreshold,\n      };\n    }\n\n    private constructor(json: SettingsProps) {\n      this.visible = Style.fromJSON(json.visible);\n      this.hidden = Style.fromJSON(json.hidden, true);\n      this.transparencyThreshold = JsonUtils.asDouble(json.transThreshold, 1.0);\n    }\n  }\n}\n\n/** @beta */\nexport namespace Gradient {\n  /** Flags applied to a [[Gradient.Symb]]. */\n  export enum Flags {\n    /** No flags. */\n    None = 0,\n    /** Reverse the order of the gradient keys. */\n    Invert = 1,\n    /** Draw an outline around the surface to which the gradient is applied. */\n    Outline = 2,\n  }\n\n  /** Enumerates the modes by which a [[Gradient.Symb]]'s keys are applied to create an image. */\n  export enum Mode {\n    None = 0,\n    Linear = 1,\n    Curved = 2,\n    Cylindrical = 3,\n    Spherical = 4,\n    Hemispherical = 5,\n    /** @beta */\n    Thematic = 6,\n  }\n\n  /** @beta */\n  export enum ThematicMode {\n    Smooth = 0,\n    Stepped = 1,\n    SteppedWithDelimiter = 2,\n    IsoLines = 3,\n  }\n\n  /** @internal */\n  export enum ThematicColorScheme {\n    BlueRed = 0,\n    RedBlue = 1,\n    Monochrome = 2,\n    Topographic = 3,\n    SeaMountain = 4,\n    Custom = 5,\n  }\n\n  /** @beta */\n  export interface ThematicSettingsProps {\n    mode: ThematicMode;\n    stepCount: number;\n    marginColor: ColorDefProps;\n    colorScheme: number;\n    rangeLow: number;\n    rangeHigh: number;\n  }\n\n  /** Gradient settings specific to thematic mesh display\n   * @beta\n   */\n  export class ThematicSettings implements ThematicSettingsProps {\n    public mode: ThematicMode = ThematicMode.Smooth;\n    public stepCount: number = 10;\n    public marginColor: ColorDef = ColorDef.from(0x3f, 0x3f, 0x3f);\n    public colorScheme: number = ThematicColorScheme.BlueRed;\n    public rangeLow: number = 1.0E200;\n    public rangeHigh: number = -1.0E200;\n    public get range() { return (this.rangeLow > this.rangeHigh) ? Range1d.createNull() : Range1d.createXX(this.rangeLow, this.rangeHigh); }\n    public set range(range: Range1d) { this.rangeLow = range.low; this.rangeHigh = range.high; }\n    public static defaults = new ThematicSettings();\n    public static get margin(): number { return .001; }    // A fixed portion of the gradient for out of range values.\n    public static get contentRange(): number { return 1.0 - 2.0 * ThematicSettings.margin; }\n    public static get contentMax(): number { return 1.0 - ThematicSettings.margin; }\n\n    public static fromJSON(json: ThematicSettingsProps) {\n      const result = new ThematicSettings();\n      result.mode = json.mode;\n      result.stepCount = json.stepCount;\n      result.marginColor = new ColorDef(json.marginColor);\n      result.colorScheme = json.colorScheme;\n      result.rangeLow = json.rangeLow;\n      result.rangeHigh = json.rangeHigh;\n      return result;\n    }\n    public clone(out?: ThematicSettings): ThematicSettings {\n      const result = undefined !== out ? out : new ThematicSettings();\n      result.copyFrom(this);\n      return result;\n    }\n\n    public copyFrom(other: ThematicSettingsProps): void {\n      this.mode = other.mode;\n      this.stepCount = other.stepCount;\n      this.marginColor = new ColorDef(other.marginColor);\n      this.colorScheme = other.colorScheme;\n      this.rangeLow = other.rangeLow;\n      this.rangeHigh = other.rangeHigh;\n    }\n  }\n\n  /** Gradient fraction value to [[ColorDef]] pair */\n  export interface KeyColorProps {\n    /** Fraction from 0.0 to 1.0 to denote position along gradient */\n    value: number;\n    /** Color value for given fraction */\n    color: ColorDefProps;\n  }\n\n  /** Gradient fraction value to [[ColorDef]] pair\n   * @see [[Gradient.KeyColorProps]]\n   */\n  export class KeyColor implements KeyColorProps {\n    public value: number;\n    public color: ColorDef;\n    public constructor(json: KeyColorProps) {\n      this.value = json.value;\n      this.color = new ColorDef(json.color);\n    }\n  }\n\n  /** Multi-color area fill defined by a range of colors that vary by position */\n  export interface SymbProps {\n    /** Gradient type, must be set to something other than [[Gradient.Mode.None]] to display fill */\n    mode: Mode;\n    /** Gradient flags to enable outline display and invert color fractions, Flags.None if undefined */\n    flags?: Flags;\n    /** Gradient rotation angle, 0.0 if undefined */\n    angle?: AngleProps;\n    /** Gradient tint value from 0.0 to 1.0, only used when [[Gradient.KeyColorProps]] size is 1, 0.0 if undefined */\n    tint?: number;\n    /** Gradient shift value from 0.0 to 1.0, 0.0 if undefined */\n    shift?: number;\n    /** Gradient fraction value/color pairs, 1 minimum (uses tint for 2nd color), 8 maximum */\n    keys: KeyColorProps[];\n    /** Settings applicable to meshes and Gradient.Mode.Thematic only\n     * @beta\n     */\n    thematicSettings?: ThematicSettingsProps;\n  }\n\n  /** Multi-color area fill defined by a range of colors that vary by position.\n   * Gradient fill can be applied to planar regions.\n   * @see [[Gradient.SymbProps]]\n   */\n  export class Symb implements SymbProps {\n    public mode = Mode.None;\n    public flags: Flags = Flags.None;\n    public angle?: Angle;\n    public tint?: number;\n    public shift: number = 0;\n    /** @beta */\n    public thematicSettings?: ThematicSettings;\n    public keys: KeyColor[] = [];\n\n    /** create a GradientSymb from a json object. */\n    public static fromJSON(json?: SymbProps) {\n      const result = new Symb();\n      if (!json)\n        return result;\n      result.mode = json.mode;\n      result.flags = (json.flags === undefined) ? Flags.None : json.flags;\n      result.angle = json.angle ? Angle.fromJSON(json.angle) : undefined;\n      result.tint = json.tint;\n      result.shift = json.shift ? json.shift : 0;\n      json.keys.forEach((key) => result.keys.push(new KeyColor(key)));\n      result.thematicSettings = (json.thematicSettings === undefined) ? undefined : ThematicSettings.fromJSON(json.thematicSettings);\n\n      return result;\n    }\n\n    /** @beta */\n    public static createThematic(settings: ThematicSettings) {\n      const result = new Symb();\n      result.mode = Mode.Thematic;\n      result.thematicSettings = settings;\n\n      if (settings.colorScheme < ThematicColorScheme.Custom) {\n        const fixedSchemeKeys = [[[0.0, 0, 255, 0], [0.25, 0, 255, 255], [0.5, 0, 0, 255], [0.75, 255, 0, 255], [1.0, 255, 0, 0]],  // Blue Red.\n        [[0.0, 255, 0, 0], [0.25, 255, 0, 255], [0.5, 0, 0, 255], [0.75, 0, 255, 255], [1.0, 0, 255, 0]], // Red blue.\n        [[0.0, 0, 0, 0], [1.0, 255, 255, 255]], // Monochrome.\n        [[0.0, 152, 148, 188], [0.5, 204, 160, 204], [1.0, 152, 72, 128]], // Based off of the topographic gradients in Point Clouds.\n        [[0.0, 0, 255, 0], [0.2, 72, 96, 160], [0.4, 152, 96, 160], [0.6, 128, 32, 104], [0.7, 148, 180, 128], [1.0, 240, 240, 240]]]; // Based off of the sea-mountain gradient in Point Clouds.\n\n        for (const keyValue of fixedSchemeKeys[settings.colorScheme])\n          result.keys.push(new KeyColor({ value: keyValue[0], color: ColorDef.from(keyValue[1], keyValue[3], keyValue[2]) }));\n      }\n      return result;\n    }\n    public clone(): Symb {\n      return Symb.fromJSON(this);\n    }\n\n    /** Returns true if this symbology is equal to another, false otherwise. */\n    public equals(other: Symb): boolean {\n      return Symb.compareSymb(this, other) === 0;\n    }\n\n    /** Compares two gradient symbologies. Used for ordering Gradient.Symb objects.\n     * @param lhs First gradient to compare\n     * @param rhs Second gradient to compare\n     * @returns 0 if lhs is equivalent to rhs, a negative number if lhs compares less than rhs, or a positive number if lhs compares greater than rhs.\n     */\n    public static compareSymb(lhs: Gradient.Symb, rhs: Gradient.Symb): number {\n      if (lhs === rhs)\n        return 0; // Same pointer\n      if (lhs.mode !== rhs.mode)\n        return lhs.mode - rhs.mode;\n      if (lhs.flags !== rhs.flags)\n        if (lhs.flags === undefined)\n          return -1;\n        else if (rhs.flags === undefined)\n          return 1;\n        else\n          return lhs.flags - rhs.flags;\n      if (lhs.tint !== rhs.tint)\n        if (lhs.tint === undefined)\n          return -1;\n        else if (rhs.tint === undefined)\n          return 1;\n        else\n          return lhs.tint - rhs.tint;\n      if (lhs.shift !== rhs.shift)\n        if (lhs.shift === undefined)\n          return -1;\n        else if (rhs.shift === undefined)\n          return 1;\n        else\n          return lhs.shift - rhs.shift;\n      if ((lhs.angle === undefined) !== (rhs.angle === undefined))\n        if (lhs.angle === undefined)\n          return -1;\n        else\n          return 1;\n      if (lhs.angle && !lhs.angle.isAlmostEqualNoPeriodShift(rhs.angle!))\n        return lhs.angle.radians - rhs.angle!.radians;\n      if (lhs.keys.length !== rhs.keys.length)\n        return lhs.keys.length - rhs.keys.length;\n      for (let i = 0; i < lhs.keys.length; i++) {\n        if (lhs.keys[i].value !== rhs.keys[i].value)\n          return lhs.keys[i].value - rhs.keys[i].value;\n        if (!lhs.keys[i].color.equals(rhs.keys[i].color))\n          return lhs.keys[i].color.tbgr - rhs.keys[i].color.tbgr;\n      }\n      return 0;\n    }\n\n    /** Compare this symbology to another.\n     * @see [[Gradient.Symb.compareSymb]]\n     */\n    public compare(other: Symb): number {\n      return Gradient.Symb.compareSymb(this, other);\n    }\n\n    /**\n     * Ensure the value given is within the range of 0 to 255,\n     * and truncate the value to only the 8 least significant bits.\n     */\n    private roundToByte(num: number): number {\n      return Math.min(num + .5, 255.0) & 0xFF;\n    }\n\n    /** Maps a value to an RGBA value adjusted from a color present in this symbology's array. */\n    private mapColor(value: number) {\n      if (value < 0)\n        value = 0;\n      else if (value > 1)\n        value = 1;\n\n      if ((this.flags & Flags.Invert) !== 0)\n        value = 1 - value;\n\n      let idx = 0;\n      let d;\n      let w0;\n      let w1;\n      if (this.keys.length <= 2) {\n        w0 = 1.0 - value;\n        w1 = value;\n      } else {  // locate value in map, blend corresponding colors\n        while (idx < (this.keys.length - 2) && value > this.keys[idx + 1].value)\n          idx++;\n\n        d = this.keys[idx + 1].value - this.keys[idx].value;\n        w1 = d < 0.0001 ? 0.0 : (value - this.keys[idx].value) / d;\n        w0 = 1.0 - w1;\n      }\n\n      const color0 = this.keys[idx].color;\n      const color1 = this.keys[idx + 1].color;\n      const colors0 = color0.colors;\n      const colors1 = color1.colors;\n      const red = w0 * colors0.r + w1 * colors1.r;\n      const green = w0 * colors0.g + w1 * colors1.g;\n      const blue = w0 * colors0.b + w1 * colors1.b;\n      const transparency = w0 * colors0.t + w1 * colors1.t;\n\n      return ColorDef.from(this.roundToByte(red), this.roundToByte(green), this.roundToByte(blue), this.roundToByte(transparency));\n    }\n\n    public get hasTranslucency(): boolean {\n      for (const key of this.keys) {\n        if (!key.color.isOpaque)\n          return true;\n      }\n\n      return false;\n    }\n\n    /** Returns true if the [[Gradient.Flags.Outline]] flag is set. */\n    public get isOutlined(): boolean { return 0 !== (this.flags & Flags.Outline); }\n\n    /** Applies this gradient's settings to produce a bitmap image. */\n    public getImage(width: number, height: number): ImageBuffer {\n      if (this.mode === Mode.Thematic) {\n        width = 1;\n        height = 8192;    // Thematic image height\n      }\n\n      const hasAlpha = this.hasTranslucency;\n      const thisAngle = (this.angle === undefined) ? 0 : this.angle.radians;\n      const cosA = Math.cos(thisAngle);\n      const sinA = Math.sin(thisAngle);\n      const image = new Uint8Array(width * height * (hasAlpha ? 4 : 3));\n      let currentIdx = image.length - 1;\n      const shift = Math.min(1.0, Math.abs(this.shift));\n\n      switch (this.mode) {\n        case Mode.Linear:\n        case Mode.Cylindrical: {\n          const xs = 0.5 - 0.25 * shift * cosA;\n          const ys = 0.5 - 0.25 * shift * sinA;\n          let dMax;\n          let dMin = dMax = 0.0;\n          let d;\n          for (let j = 0; j < 2; j++) {\n            for (let i = 0; i < 2; i++) {\n              d = (i - xs) * cosA + (j - ys) * sinA;\n              if (d < dMin)\n                dMin = d;\n              if (d > dMax)\n                dMax = d;\n            }\n          }\n          for (let j = 0; j < height; j++) {\n            const y = j / height - ys;\n            for (let i = 0; i < width; i++) {\n              const x = i / width - xs;\n              d = x * cosA + y * sinA;\n              let f;\n              if (this.mode === Mode.Linear) {\n                if (d > 0)\n                  f = 0.5 + 0.5 * d / dMax;\n                else\n                  f = 0.5 - 0.5 * d / dMin;\n              } else {\n                if (d > 0)\n                  f = Math.sin(Math.PI / 2 * (1.0 - d / dMax));\n                else\n                  f = Math.sin(Math.PI / 2 * (1.0 - d / dMin));\n              }\n              const color = this.mapColor(f);\n              if (hasAlpha)\n                image[currentIdx--] = color.getAlpha();\n\n              image[currentIdx--] = color.colors.b;\n              image[currentIdx--] = color.colors.g;\n              image[currentIdx--] = color.colors.r;\n            }\n          }\n          break;\n        }\n        case Mode.Curved: {\n          const xs = 0.5 + 0.5 * sinA - 0.25 * shift * cosA;\n          const ys = 0.5 - 0.5 * cosA - 0.25 * shift * sinA;\n          for (let j = 0; j < height; j++) {\n            const y = j / height - ys;\n            for (let i = 0; i < width; i++) {\n              const x = i / width - xs;\n              const xr = 0.8 * (x * cosA + y * sinA);\n              const yr = y * cosA - x * sinA;\n              const f = Math.sin(Math.PI / 2 * (1 - Math.sqrt(xr * xr + yr * yr)));\n              const color = this.mapColor(f);\n              if (hasAlpha)\n                image[currentIdx--] = color.getAlpha();\n\n              image[currentIdx--] = color.colors.b;\n              image[currentIdx--] = color.colors.g;\n              image[currentIdx--] = color.colors.r;\n            }\n          }\n          break;\n        }\n        case Mode.Spherical: {\n          const r = 0.5 + 0.125 * Math.sin(2.0 * thisAngle);\n          const xs = 0.5 * shift * (cosA + sinA) * r;\n          const ys = 0.5 * shift * (sinA - cosA) * r;\n          for (let j = 0; j < height; j++) {\n            const y = ys + j / height - 0.5;\n            for (let i = 0; i < width; i++) {\n              const x = xs + i / width - 0.5;\n              const f = Math.sin(Math.PI / 2 * (1.0 - Math.sqrt(x * x + y * y) / r));\n              const color = this.mapColor(f);\n              if (hasAlpha)\n                image[currentIdx--] = color.getAlpha();\n\n              image[currentIdx--] = color.colors.b;\n              image[currentIdx--] = color.colors.g;\n              image[currentIdx--] = color.colors.r;\n            }\n          }\n          break;\n        }\n        case Mode.Hemispherical: {\n          const xs = 0.5 + 0.5 * sinA - 0.5 * shift * cosA;\n          const ys = 0.5 - 0.5 * cosA - 0.5 * shift * sinA;\n          for (let j = 0; j < height; j++) {\n            const y = j / height - ys;\n            for (let i = 0; i < width; i++) {\n              const x = i / width - xs;\n              const f = Math.sin(Math.PI / 2 * (1.0 - Math.sqrt(x * x + y * y)));\n              const color = this.mapColor(f);\n              if (hasAlpha)\n                image[currentIdx--] = color.getAlpha();\n\n              image[currentIdx--] = color.colors.b;\n              image[currentIdx--] = color.colors.g;\n              image[currentIdx--] = color.colors.r;\n            }\n          }\n          break;\n        }\n        case Mode.Thematic: {\n          let settings = this.thematicSettings;\n          if (settings === undefined) {\n            settings = ThematicSettings.defaults;\n          }\n\n          // TBD - Stepped and isolines...\n          for (let j = 0; j < height; j++) {\n            let f = 1 - j / height;\n            let color: ColorDef;\n\n            if (f < ThematicSettings.margin || f > ThematicSettings.contentMax) {\n              color = settings.marginColor;\n            } else {\n              f = (f - ThematicSettings.margin) / (ThematicSettings.contentRange);\n              switch (settings.mode) {\n                case ThematicMode.SteppedWithDelimiter:\n                case ThematicMode.Stepped: {\n                  if (settings.stepCount !== 0) {\n                    const fStep = Math.floor(f * settings.stepCount + .99999) / settings.stepCount;\n                    const delimitFraction = 1 / 1024;\n                    if (settings.mode === ThematicMode.SteppedWithDelimiter && Math.abs(fStep - f) < delimitFraction)\n                      color = new ColorDef(0xff000000);\n                    else\n                      color = this.mapColor(fStep);\n                  }\n                  break;\n                }\n                case ThematicMode.Smooth:\n                  color = this.mapColor(f);\n                  break;\n              }\n            }\n            for (let i = 0; i < width; i++) {\n              if (hasAlpha)\n                image[currentIdx--] = color!.getAlpha();\n\n              image[currentIdx--] = color!.colors.b;\n              image[currentIdx--] = color!.colors.g;\n              image[currentIdx--] = color!.colors.r;\n            }\n          }\n        }\n      }\n\n      assert(-1 === currentIdx);\n      const imageBuffer = ImageBuffer.create(image, hasAlpha ? ImageBufferFormat.Rgba : ImageBufferFormat.Rgb, width);\n      assert(undefined !== imageBuffer);\n      return imageBuffer!;\n    }\n  }\n}\n\n/** Whether a closed region should be drawn for wireframe display with its internal area filled or not.\n * @public\n */\nexport enum FillDisplay {\n  /** don't fill, even if fill attribute is on for the viewport */\n  Never = 0,\n  /** fill if the fill attribute is on for the viewport */\n  ByView = 1,\n  /** always fill, even if the fill attribute is off for the viewport */\n  Always = 2,\n  /** always fill, fill will always be behind other geometry */\n  Blanking = 3,\n}\n\n/** Describes how a view's background color affects the interior area of a closed region.\n * @public\n */\nexport enum BackgroundFill {\n  /** single color fill uses the fill color and line color to draw either a solid or outline fill */\n  None = 0,\n  /** single color fill uses the view's background color to draw a solid fill */\n  Solid = 1,\n  /** single color fill uses the view's background color and line color to draw an outline fill */\n  Outline = 2,\n}\n\n/** Categorizes a piece of geometry within a GeometryStream. Visibility of classes of geometry can be toggled\n * within a view using [[ViewFlags]].\n * @see [[GeometryStreamProps]].\n * @see [[Feature]].\n * @public\n */\nexport enum GeometryClass {\n  /** Used to classify the \"real\" geometry within a model. Most geometry falls within this class. */\n  Primary = 0,\n  /** Used to classify geometry used as a drawing aid in constructing the Primary geometry. For example, grid lines. */\n  Construction = 1,\n  /** Used to classify annotations which dimension (measure) the Primary geometry. */\n  Dimension = 2,\n  /** Used to classify geometry used to fill planar regions with a 2d pattern (e.g., hatch lines). */\n  Pattern = 3,\n}\n\n/** @internal */\nexport class SceneLights {\n  private _list: Light[] = [];\n  public get isEmpty(): boolean { return this._list.length === 0; }\n  constructor(public imageBased: { environmentalMap: RenderTexture, diffuseImage: RenderTexture, solar: ImageLight.Solar },\n    public fstop: number = 0, // must be between -3 and +3\n  ) { }\n  public addLight(light: Light): void { if (light.isValid) this._list.push(light); }\n}\n\n/** Describes the display properties of graphics in a persistent element's GeometryStream that aren't inherited from [[SubCategoryAppearance]].\n * @see [[GeometryStreamProps]].\n * @public\n */\nexport class GeometryParams {\n  /** Optional render material to override [[SubCategoryAppearance.materialId]].\n   * Specify an invalid [[Id64]] to override [[SubCategoryAppearance.materialId]] with no material.\n   */\n  public materialId?: Id64String;\n  /** Optional display priority added to [[SubCategoryAppearance.priority]].\n   * The net display priority value is used to control z ordering when drawing to 2d views.\n   */\n  public elmPriority?: number;\n  /** Optional line weight to override [[SubCategoryAppearance.weight]].\n   * The weight is an integer in the range of [0,32] that by default corresponds to a pixel width of weight+1.\n   */\n  public weight?: number;\n  /** Optional line color to override [[SubCategoryAppearance.color]].\n   * The transparency component is ignored and should instead be specified using [[elmTransparency]].\n   */\n  public lineColor?: ColorDef;\n  /** Optional fill color for region interiors. Set the same as [[lineColor]] for an opaque fill.\n   * Valid when [[fillDisplay]] is not [[FillDisplay.Never]], [[gradient]] is undefined, and [[backgroundFill]] is [[BackgroundFill.None]].\n   * The transparency component is ignored and should instead be specified using [[fillTransparency]].\n   */\n  public fillColor?: ColorDef;\n  /** Optional fill using the current view background color for region interiors.\n   * Valid when [[fillDisplay]] is not [[FillDisplay.Never]] and [[gradient]] is undefined. Default is [[BackgroundFill.None]].\n   */\n  public backgroundFill?: BackgroundFill;\n  /** Optional fill specification that determines when and if a region interior will display using [[gradient]], [[backgroundFill]], or [[fillColor]] in that order of preference.\n   * Fill only applies to [[RenderMode.Wireframe]] views. In a [[RenderMode.SmoothShade]] or [[RenderMode.SolidFill]] view, regions will always display as surfaces preferring [[fillColor]] when present over [[lineColor]].\n   * Default is [[FillDisplay.Never]].\n   */\n  public fillDisplay?: FillDisplay;\n  /** Optional line color transparency to combine with [[SubCategoryAppearance.transparency]].\n   * Transparency values are combined by multiplying the opaqueness. A 50% transparent element on a 50% transparent sub-category creates a 75% transparent result (1 - ((1 - .5) * (1 - .5)) = 0.75).\n   * Value range is [0.0,1.0]. Pass 0.0 for completely opaque and 1.0 for completely transparent.\n   */\n  public elmTransparency?: number;\n  /** Optional fill color transparency to combine with [[SubCategoryAppearance.transparency]].\n   * Transparency values are combined by multiplying the opaqueness. A 50% transparent fill on a 50% transparent sub-category creates a 75% transparent result (1 - ((1 - .5) * (1 - .5)) = 0.75).\n   * Value range is [0.0,1.0]. Pass 0.0 for completely opaque, 1.0 for completely transparent, or leave undefined to use [[elmTransparency]].\n   */\n  public fillTransparency?: number;\n  /** Optional geometry classification that can be toggled off with a [[ViewFlags]] independent of [[SubCategoryAppearance.invisible]].\n   * Default is [[GeometryClass.Primary]].\n   */\n  public geometryClass?: GeometryClass;\n  /** Optional line style to override [[SubCategoryAppearance.styleId]] plus modifiers to override the line style definition.\n   * Specify an invalid [[Id64]] to override [[SubCategoryAppearance.styleId]] with a solid line.\n   */\n  public styleInfo?: LineStyle.Info;\n  /** Optional gradient fill settings for region interiors.\n   * Valid when [[fillDisplay]] is not [[FillDisplay.Never]].\n   * @beta\n   */\n  public gradient?: Gradient.Symb;\n  /** Optional area pattern settings for region interiors.\n   * Independent of fill, a region can have both fill and pattern.\n   */\n  public pattern?: AreaPattern.Params;\n\n  /** Create a GeometryParams given a [[Category]] Id for a [[GeometricElement]] and optional [[SubCategory]] Id. The [[SubCategory.appearance]] establishes the non-overriden display properties of\n   * graphics in a GeometricElement's [[GeometryStreamProps]]. A GeometricElement refers to a single Category through [[GeometricElement.category]], while it's graphics can appear on multiple SubCategories\n   * by adding a [[GeometryAppearanceProps]] with a SubCategory change to the GeometryStream.\n   * @note If a valid SubCategory Id is not supplied, the default SubCategory for the parent Category is used. To be considered valid, [[SubCategory.getCategoryId]] must refer to the specified Category Id.\n   */\n  constructor(public categoryId: Id64String, public subCategoryId = Id64.invalid) {\n    if (!Id64.isValid(subCategoryId))\n      this.subCategoryId = IModel.getDefaultSubCategoryId(categoryId);\n  }\n\n  public clone(): GeometryParams {\n    const retVal = new GeometryParams(this.categoryId, this.subCategoryId);\n    retVal.materialId = this.materialId;\n    retVal.elmPriority = this.elmPriority;\n    retVal.weight = this.weight;\n    retVal.lineColor = this.lineColor ? this.lineColor.clone() : undefined;\n    retVal.fillColor = this.fillColor ? this.fillColor.clone() : undefined;\n    retVal.backgroundFill = this.backgroundFill;\n    retVal.fillDisplay = this.fillDisplay;\n    retVal.elmTransparency = this.elmTransparency;\n    retVal.fillTransparency = this.fillTransparency;\n    retVal.geometryClass = this.geometryClass;\n    retVal.styleInfo = this.styleInfo ? this.styleInfo.clone() : undefined;\n    retVal.gradient = this.gradient ? this.gradient.clone() : undefined;\n    retVal.pattern = this.pattern ? this.pattern.clone() : undefined;\n    return retVal;\n  }\n\n  /** Clears [[SubCategoryAppearance]] overrides while preserving [[categoryId]] and [[subCategoryId]]. */\n  public resetAppearance() {\n    this.materialId = undefined;\n    this.elmPriority = undefined;\n    this.weight = undefined;\n    this.lineColor = undefined;\n    this.fillColor = undefined;\n    this.backgroundFill = undefined;\n    this.fillDisplay = undefined;\n    this.elmTransparency = undefined;\n    this.fillTransparency = undefined;\n    this.geometryClass = undefined;\n    this.styleInfo = undefined;\n    this.gradient = undefined;\n    this.pattern = undefined;\n  }\n\n  /** Compare two [[GeometryParams]] for equivalence, i.e. both values are undefined and inherited from [[SubCategoryAppearance]] or have the same override. */\n  public isEquivalent(other: GeometryParams): boolean {\n    if (this === other)\n      return true; // Same pointer\n\n    if (this.categoryId !== other.categoryId)\n      return false;\n    if (this.subCategoryId !== other.subCategoryId)\n      return false;\n    if (this.geometryClass !== other.geometryClass)\n      return false;\n\n    if (this.elmPriority !== other.elmPriority)\n      return false;\n    if (this.elmTransparency !== other.elmTransparency)\n      return false;\n    if (this.fillTransparency !== other.fillTransparency)\n      return false;\n\n    if ((this.lineColor === undefined) !== (other.lineColor === undefined))\n      return false;\n    if (this.lineColor && !this.lineColor.equals(other.lineColor!))\n      return false;\n\n    if (this.weight !== other.weight)\n      return false;\n\n    if ((this.materialId === undefined) !== (other.materialId === undefined))\n      return false;\n    if (this.materialId && this.materialId !== other.materialId!)\n      return false;\n\n    if ((this.styleInfo === undefined) !== (other.styleInfo === undefined))\n      return false;\n    if (this.styleInfo && !this.styleInfo.equals(other.styleInfo!))\n      return false;\n\n    if (this.fillDisplay !== other.fillDisplay)\n      return false;\n\n    if (this.fillDisplay !== undefined && this.fillDisplay !== FillDisplay.Never) {\n      if ((this.gradient === undefined) !== (other.gradient === undefined))\n        return false;\n      if (this.gradient && !this.gradient.equals(other.gradient!))\n        return false;\n      if (this.backgroundFill !== other.backgroundFill)\n        return false;\n      if (this.backgroundFill === undefined || this.backgroundFill === BackgroundFill.None) {\n        if ((this.fillColor === undefined) !== (other.fillColor === undefined))\n          return false;\n        if (this.fillColor && !this.fillColor.equals(other.fillColor!))\n          return false;\n      }\n    }\n\n    if ((this.pattern === undefined) !== (other.pattern === undefined))\n      return false;\n    if (this.pattern && !this.pattern.equals(other.pattern!))\n      return false;\n\n    return true;\n  }\n\n  /** Change [[categoryId]] to the supplied id, [[subCategoryId]] to the supplied category's the default subCategory, and optionally clear any [[SubCategoryAppearance]] overrides. */\n  public setCategoryId(categoryId: Id64String, clearAppearanceOverrides = true) {\n    this.categoryId = categoryId;\n    this.subCategoryId = IModel.getDefaultSubCategoryId(categoryId);\n    if (clearAppearanceOverrides)\n      this.resetAppearance();\n  }\n\n  /** Change [[subCategoryId]] to the supplied id and optionally clear any [[SubCategoryAppearance]] overrides. */\n  public setSubCategoryId(subCategoryId: Id64String, clearAppearanceOverrides = true) {\n    this.subCategoryId = subCategoryId;\n    if (clearAppearanceOverrides)\n      this.resetAppearance();\n  }\n}\n\n/** Contains types related to display of hilited elements within a [[Viewport]].\n * @public\n */\nexport namespace Hilite {\n  /**  Describes the width of the outline applied to hilited geometry. The outline is drawn around the union of all hilited geometry and is visible behind non-hilited geometry.\n   * @see [[Hilite.Settings]]\n   */\n  export enum Silhouette {\n    /** No outline. */\n    None,\n    /** 1-pixel-wide outline. */\n    Thin,\n    /** 2-pixel-wide outline. */\n    Thick,\n  }\n\n  /**\n   * Describes how the hilite effect is applied to elements within a [[Viewport]].\n   * The hilite effect is applied to elements contained in the [[IModelConnection]]'s [[SelectionSet]].\n   * It is designed to draw attention to those elements. The effect is produced as follows:\n   *  1. All hilited elements are drawn as normal, except that their element color is mixed with the hilite color.\n   *  2. The union of the regions of the screen corresponding to hilited elements is computed.\n   *  3. A silhouette is drawn using the hilite color around the boundaries of the hilited region. This silhouette is visible behind other geometry.\n   *  4. The hilite color is mixed with the color of each pixel within the hilited region. This enables surfaces of hilited geometry to be visible behind other geometry.\n   *\n   * The Settings allow an application to customize how this effect is applied.\n   * @see [[Viewport.hilite]]\n   */\n  export class Settings {\n    /** The color that is used to draw the outline and which is mixed with element color. */\n    public readonly color: ColorDef;\n    /** The ratio of hilite color to element color used when drawing unobscured portions of hilited geometry, in the range [0, 1].\n     * A ratio of 0.0 uses only the element color. A ratio of 1.0 uses only the hilite color. A ratio of 0.5 mixes the hilite color and element color evenly.\n     */\n    public readonly visibleRatio: number;\n    /** The ratio of hilite color to screen color used when drawing the hilited region overtop of the screen contents, in the range [0, 1]. */\n    public readonly hiddenRatio: number;\n    /** The type of outline to be drawn around the boundaries of the hilited region. */\n    public silhouette: Silhouette;\n\n    private static clamp(value: number) { return Math.min(1.0, Math.max(0.0, value)); }\n\n    public constructor(color = ColorDef.from(0x23, 0xbb, 0xfc), visibleRatio = 0.25, hiddenRatio = 0.0, silhouette = Silhouette.Thin) {\n      this.color = color;\n      this.silhouette = silhouette;\n      this.visibleRatio = Settings.clamp(visibleRatio);\n      this.hiddenRatio = Settings.clamp(hiddenRatio);\n    }\n  }\n}\n\n/** Describes a \"feature\" within a batched [[RenderGraphic]]. A batched [[RenderGraphic]] can\n * contain multiple features. Each feature is associated with a unique combination of\n * attributes (elementId, subcategory, geometry class). This allows geometry to be\n * more efficiently batched on the GPU, while enabling features to be re-symbolized\n * individually.\n *\n * As a simple example, a single mesh primitive may contain geometry for 3 elements,\n * all belonging to the same subcategory and geometry class. The mesh would therefore\n * contain 3 Features. Each vertex within the mesh would be associated with the\n * index of the Feature to which it belongs, where the index is determined by the\n * FeatureTable associated with the primitive.\n *\n * @see [[FeatureSymbology]] for mechanisms for controlling or overriding the symbology of individual features within a [[ViewState]].\n * @public\n */\nexport class Feature {\n  public readonly elementId: string;\n  public readonly subCategoryId: string;\n  public readonly geometryClass: GeometryClass;\n\n  public constructor(elementId: Id64String = Id64.invalid, subCategoryId: Id64String = Id64.invalid, geometryClass: GeometryClass = GeometryClass.Primary) {\n    this.elementId = elementId;\n    this.subCategoryId = subCategoryId;\n    this.geometryClass = geometryClass;\n  }\n\n  public get isDefined(): boolean { return !Id64.isInvalid(this.elementId) || !Id64.isInvalid(this.subCategoryId) || this.geometryClass !== GeometryClass.Primary; }\n  public get isUndefined(): boolean { return !this.isDefined; }\n\n  /** Returns true if this feature is equivalent to the supplied feature. */\n  public equals(other: Feature): boolean { return 0 === this.compare(other); }\n\n  /** Performs ordinal comparison of this feature with another.\n   * @param rhs The feature to compare with.\n   * @returns zero if the features are equivalent, a negative value if this feature compares as \"less than\" `rhs`, or a positive value if this feature compares \"greater than\" `rhs`.\n   */\n  public compare(rhs: Feature): number {\n    if (this === rhs)\n      return 0;\n\n    let cmp = compareNumbers(this.geometryClass, rhs.geometryClass);\n    if (0 === cmp) {\n      cmp = compareStrings(this.elementId, rhs.elementId);\n      if (0 === cmp) {\n        cmp = compareStrings(this.subCategoryId, rhs.subCategoryId);\n      }\n    }\n\n    return cmp;\n  }\n}\n\n/** Describes the type of a 'batch' of graphics representing multiple [[Feature]]s.\n * The most commonly-encountered batches are Tiles, which can be of either Primary or\n * Classifier type.\n * @beta\n */\nexport enum BatchType {\n  /** This batch contains graphics derived from a model's visible geometry. */\n  Primary,\n  /**\n   * This batch contains colod volumes which are used to classify a model's visible geometry.\n   * The graphics themselves are not rendered to the screen; instead they are rendered to the stencil buffer\n   * to resymbolize the primary geometry.\n   */\n  VolumeClassifier,\n  /**\n   * This batch contains planar graphics which are used to classify a model's visible geometry.\n   * The graphics themselves are not rendered to the screen; instead they are rendered to a texture buffer\n   * to resymbolize the primary geometry.\n   */\n  PlanarClassifier,\n}\n\n/** Defines a look-up table for [[Feature]]s within a batched [[RenderGraphic]]. Consecutive 32-bit\n * indices are assigned to each unique Feature. Primitives within the [[RenderGraphic]] can\n * use per-vertex indices to specify the distribution of Features within the primitive.V\n * A FeatureTable can be shared amongst multiple primitives within a single [[RenderGraphic]], and\n * amongst multiple sub-Graphics of a [[RenderGraphic]].\n * @see [[FeatureSymbology]] for mechanisms for resymbolizing features within a [[ViewState]].\n * @beta\n */\nexport class FeatureTable extends IndexMap<Feature> {\n  public readonly modelId: Id64String;\n  public readonly type: BatchType;\n\n  /** Construct an empty FeatureTable. */\n  public constructor(maxFeatures: number, modelId: Id64String = Id64.invalid, type: BatchType = BatchType.Primary) {\n    super((lhs, rhs) => lhs.compare(rhs), maxFeatures);\n    this.modelId = modelId;\n    this.type = type;\n  }\n\n  /** Returns the maximum number of [[Feature]]s this FeatureTable can contain. */\n  public get maxFeatures(): number { return this._maximumSize; }\n  /** @internal */\n  public get anyDefined(): boolean { return this.length > 1 || (1 === this.length && this._array[0].value.isDefined); }\n  /** Returns true if this FeatureTable contains exactly one [[Feature]]. */\n  public get isUniform(): boolean { return 1 === this.length; }\n  /** If this FeatureTable contains exactly one [[Feature]], returns that Feature; otherwise returns undefined. */\n  public get uniform(): Feature | undefined { return 1 === this.length ? this._array[0].value : undefined; }\n  /** Returns true if this FeatureTable is associated with [[BatchType.VolumeClassifier]] geometry. */\n  public get isVolumeClassifier(): boolean { return BatchType.VolumeClassifier === this.type; }\n  /** Returns true if this FeatureTable is associated with [[BatchType.PlanarClassifier]] geometry. */\n  public get isPlanarClassifier(): boolean { return BatchType.PlanarClassifier === this.type; }\n\n  /** Returns the Feature corresponding to the specified index, or undefined if the index is not present. */\n  public findFeature(index: number): Feature | undefined {\n    for (const entry of this._array)\n      if (entry.index === index)\n        return entry.value;\n\n    return undefined;\n  }\n\n  /** @internal */\n  public insertWithIndex(feature: Feature, index: number): void {\n    const bound = this.lowerBound(feature);\n    assert(!bound.equal);\n    assert(!this.isFull);\n    const entry = new IndexedValue<Feature>(feature, index);\n    this._array.splice(bound.index, 0, entry);\n  }\n\n  /** @internal */\n  public getArray(): Array<IndexedValue<Feature>> { return this._array; }\n}\n\n/** Describes how to map a [[RenderTexture]] image onto a surface.\n * @see [[RenderMaterial]].\n * @beta\n */\nexport class TextureMapping {\n  /** The texture to be mapped to the surface. */\n  public readonly texture: RenderTexture;\n  /** The parameters describing how the texture image is mapped to the surface. */\n  public readonly params: TextureMapping.Params;\n\n  public constructor(tx: RenderTexture, params: TextureMapping.Params) {\n    this.texture = tx;\n    this.params = params;\n  }\n\n  /** @internal */\n  public computeUVParams(visitor: PolyfaceVisitor, transformToImodel: Transform): Point2d[] | undefined {\n    return this.params.computeUVParams(visitor as IndexedPolyfaceVisitor, transformToImodel);\n  }\n}\n\n/** @beta */\nexport namespace TextureMapping {\n  /** Enumerates the possible texture mapping modes. */\n  export enum Mode {\n    None = -1,\n    Parametric = 0,\n    ElevationDrape = 1,\n    Planar = 2,\n    /** @internal */\n    DirectionalDrape = 3,\n    /** @internal */\n    Cubic = 4,\n    /** @internal */\n    Spherical = 5,\n    /** @internal */\n    Cylindrical = 6,\n    /** @internal */\n    Solid = 7,\n    /** @internal Only valid for lights */\n    FrontProject = 8,\n  }\n\n  /** A 2x3 matrix for mapping a texture image to a surface. */\n  export class Trans2x3 {\n    private _vals = new Array<[number, number, number]>(2);\n    private _transform?: Transform;\n\n    public constructor(t00: number = 1, t01: number = 0, t02: number = 0, t10: number = 0, t11: number = 1, t12: number = 0) {\n      const vals = this._vals;\n      vals[0] = [t00, t01, t02]; vals[1] = [t10, t11, t12];\n    }\n\n    public setTransform(): void {\n      const transform = Transform.createIdentity(), vals = this._vals, matrix = transform.matrix;\n\n      for (let i = 0, len = 2; i < 2; ++i)\n        for (let j = 0; j < len; ++j)\n          matrix.setAt(i, j, vals[i][j]);\n\n      transform.origin.x = vals[0][2];\n      transform.origin.y = vals[1][2];\n\n      this._transform = transform;\n    }\n\n    public get transform(): Transform { if (undefined === this._transform) this.setTransform(); return this._transform!; }\n  }\n\n  /** Properties used to construct a [[TextureMapping.Params]]. */\n  export interface ParamProps {\n    /** The matrix used to map the image to a surface. */\n    textureMat2x3?: TextureMapping.Trans2x3;\n    /** The ratio in [0, 1] with which to mix the color sampled from the texture with the element's color.\n     * A value of 0.0 uses only the element color. A value of 1.0 uses only the texture color.\n     * @note Defaults to 1.0\n     */\n    textureWeight?: number;\n    /** The mode by which to map the image to a surface.\n     * @note Defaults to [[TextureMapping.Mode.Parametric]].\n     */\n    mapMode?: TextureMapping.Mode;\n    /** @internal */\n    worldMapping?: boolean;\n  }\n\n  /** Parameters describing how a texture image is mapped to a surface. */\n  export class Params {\n    /** The matrix used to map the image to a surface. */\n    public textureMatrix: TextureMapping.Trans2x3;\n    /** The ratio in [0, 1] with which to mix the color sampled from the texture with the element's color.\n     * A value of 0.0 uses only the element color. A value of 1.0 uses only the texture color.\n     */\n    public weight: number;\n    /** The mode by which to map the image to a surface. */\n    public mode: TextureMapping.Mode;\n    /** @internal */\n    public worldMapping: boolean;\n\n    constructor(props = {} as TextureMapping.ParamProps) {\n      const { textureMat2x3 = new Trans2x3(), textureWeight = 1.0, mapMode = Mode.Parametric, worldMapping = false } = props;\n      this.textureMatrix = textureMat2x3; this.weight = textureWeight; this.mode = mapMode; this.worldMapping = worldMapping;\n    }\n\n    /**\n     * Generates UV parameters for textured surfaces. Returns undefined on failure.\n     * @internal\n     */\n    public computeUVParams(visitor: IndexedPolyfaceVisitor, transformToImodel: Transform): Point2d[] | undefined {\n      switch (this.mode) {\n        default:  // Fall through to parametric in default case\n        case TextureMapping.Mode.Parametric: {\n          return this.computeParametricUVParams(visitor, this.textureMatrix.transform, !this.worldMapping);\n        }\n        case TextureMapping.Mode.Planar: {\n          const normalIndices = visitor.normalIndex;\n          if (!normalIndices)\n            return undefined;\n\n          // Ignore planar mode unless master or sub units for scaleMode and facet is planar\n          if (!this.worldMapping || (visitor.normalIndex !== undefined && (normalIndices[0] !== normalIndices[1] || normalIndices[0] !== normalIndices[2]))) {\n            return this.computeParametricUVParams(visitor, this.textureMatrix.transform, !this.worldMapping);\n          } else {\n            return this.computePlanarUVParams(visitor, this.textureMatrix.transform);\n          }\n        }\n        case TextureMapping.Mode.ElevationDrape: {\n          return this.computeElevationDrapeUVParams(visitor, this.textureMatrix.transform, transformToImodel);\n        }\n      }\n    }\n\n    /** Computes UV parameters given a texture mapping mode of parametric. */\n    private computeParametricUVParams(visitor: IndexedPolyfaceVisitor, uvTransform: Transform, isRelativeUnits: boolean): Point2d[] {\n      const params: Point2d[] = [];\n      for (let i = 0; i < visitor.numEdgesThisFacet; i++) {\n        let param = Point2d.create();\n\n        if (isRelativeUnits || !visitor.tryGetDistanceParameter(i, param)) {\n          if (!visitor.tryGetNormalizedParameter(i, param)) {\n            // If mesh does not have facetFaceData, we still want to use the texture coordinates if they are present\n            param = visitor.getParam(i)!;\n          }\n        }\n\n        params.push(uvTransform.multiplyPoint2d(param));\n      }\n      return params;\n    }\n\n    /** Computes UV parameters given a texture mapping mode of planar. The result is stored in the Point2d array given. */\n    private computePlanarUVParams(visitor: IndexedPolyfaceVisitor, uvTransform: Transform): Point2d[] | undefined {\n      const params: Point2d[] = [];\n      const points = visitor.point;\n      let normal: Vector3d;\n\n      if (visitor.normal === undefined)\n        normal = points.getPoint3dAtUncheckedPointIndex(0).crossProductToPoints(points.getPoint3dAtUncheckedPointIndex(1), points.getPoint3dAtUncheckedPointIndex(2));\n      else\n        normal = visitor.normal.getVector3dAtCheckedVectorIndex(0)!;\n\n      if (!normal.normalize(normal))\n        return undefined;\n\n      // adjust U texture coordinate to be a continuous length starting at the\n      // origin. V coordinate stays the same. This mode assumes Z is up vector\n\n      // Flipping normal puts us in a planar coordinate system consistent with MicroStation's display system\n      normal.scale(-1.0, normal);\n\n      // pick the first vertex normal\n      const sideVector = Vector3d.create(normal.y, -normal.x, 0.0);\n\n      // if the magnitude of the normal is near zero, the real normal points\n      // almost straighten up.. In this case, use Y as the up vector to match QV\n\n      const magnitude = sideVector.magnitude();\n      sideVector.normalize(sideVector); // won't remain undefined if failed due to following check..\n\n      if (magnitude < 1e-3) {\n        normal.set(0, 0, -1);\n        sideVector.set(1, 0, 0);\n      }\n\n      const upVector = sideVector.crossProduct(normal).normalize();\n      if (!upVector)\n        return undefined;\n\n      const numEdges = visitor.numEdgesThisFacet;\n      for (let i = 0; i < numEdges; i++) {\n        const vector = Vector3d.createFrom(points.getPoint3dAtUncheckedPointIndex(i));\n\n        params.push(Point2d.create(vector.dotProduct(sideVector), vector.dotProduct(upVector)));\n        uvTransform.multiplyPoint2d(params[i], params[i]);\n      }\n      return params;\n    }\n\n    /** Computes UV parameters given a texture mapping mode of elevation drape. The result is stored in the Point2d array given. */\n    private computeElevationDrapeUVParams(visitor: IndexedPolyfaceVisitor, uvTransform: Transform, transformToIModel?: Transform): Point2d[] {\n      const params: Point2d[] = [];\n      const numEdges = visitor.numEdgesThisFacet;\n      for (let i = 0; i < numEdges; i++) {\n        const point = visitor.point.getPoint3dAtUncheckedPointIndex(i);\n\n        if (transformToIModel !== undefined)\n          transformToIModel.multiplyPoint3d(point, point);\n\n        params.push(Point2d.createFrom(point));\n        uvTransform.multiplyPoint2d(params[i], params[i]);\n      }\n      return params;\n    }\n  }\n}\n\n/** Properties for display of analysis data\n * @alpha\n */\nexport interface AnalysisStyleProps {\n  inputName?: string;\n  displacementChannelName?: string;\n  scalarChannelName?: string;\n  normalChannelName?: string;\n  displacementScale?: number;\n  scalarRange?: Range1dProps;\n  scalarThematicSettings?: Gradient.ThematicSettingsProps;\n  inputRange?: Range1dProps;\n}\n\n/** @alpha */\nexport class AnalysisStyle implements AnalysisStyleProps {\n  public inputName?: string;\n  public displacementChannelName?: string;\n  public scalarChannelName?: string;\n  public normalChannelName?: string;\n  public displacementScale?: number;\n  public scalarRange?: Range1d;\n  public scalarThematicSettings?: Gradient.ThematicSettings;\n  public inputRange?: Range1d;\n  public scalarThematicTexture?: RenderTexture;\n\n  public static fromJSON(json?: AnalysisStyleProps) {\n    const result = new AnalysisStyle();\n    if (!json)\n      return result;\n\n    result.inputName = json.inputName;\n    result.displacementChannelName = json.displacementChannelName;\n    result.scalarChannelName = json.scalarChannelName;\n    result.normalChannelName = json.normalChannelName;\n    result.displacementScale = json.displacementScale;\n    result.scalarRange = json.scalarRange ? Range1d.fromJSON(json.scalarRange) : undefined;\n    result.scalarThematicSettings = json.scalarThematicSettings ? Gradient.ThematicSettings.fromJSON(json.scalarThematicSettings) : undefined;\n    result.inputRange = json.inputRange ? Range1d.fromJSON(json.inputRange) : undefined;\n    return result;\n  }\n\n  public copyFrom(source: AnalysisStyle) {\n    this.inputName = source.inputName;\n    this.displacementChannelName = source.displacementChannelName;\n    this.scalarChannelName = source.scalarChannelName;\n    this.normalChannelName = source.normalChannelName;\n    this.displacementScale = source.displacementScale;\n    if (source.scalarRange) this.scalarRange = source.scalarRange.clone();\n    if (source.scalarThematicSettings) this.scalarThematicSettings = source.scalarThematicSettings.clone();\n    this.scalarThematicSettings = source.scalarThematicSettings;\n    if (source.inputRange) this.inputRange = source.inputRange.clone();\n  }\n\n  public clone(out?: AnalysisStyle): AnalysisStyle {\n    const result = undefined !== out ? out : new AnalysisStyle();\n    result.copyFrom(this);\n    return result;\n  }\n}\n\n/** A circle drawn at a Z elevation, whose diameter is the the XY diagonal of the project extents, used to represent the ground as a reference point within a spatial view.\n * @public\n */\nexport class GroundPlane implements GroundPlaneProps {\n  /** Whether the ground plane should be displayed. */\n  public display: boolean = false;\n  /** The Z height at which to draw the plane. */\n  public elevation: number = 0.0;\n  /** The color in which to draw the ground plane when viewed from above. */\n  public aboveColor: ColorDef;\n  /** The color in which to draw the ground plane when viewed from below. */\n  public belowColor: ColorDef;\n  private _aboveSymb?: Gradient.Symb;\n  private _belowSymb?: Gradient.Symb;\n\n  public constructor(ground?: GroundPlaneProps) {\n    ground = ground ? ground : {};\n    this.display = JsonUtils.asBool(ground.display, false);\n    this.elevation = JsonUtils.asDouble(ground.elevation, -.01);\n    this.aboveColor = (undefined !== ground.aboveColor) ? ColorDef.fromJSON(ground.aboveColor) : new ColorDef(ColorByName.darkGreen);\n    this.belowColor = (undefined !== ground.belowColor) ? ColorDef.fromJSON(ground.belowColor) : new ColorDef(ColorByName.darkBrown);\n  }\n\n  public toJSON(): GroundPlaneProps {\n    return {\n      display: this.display,\n      elevation: this.elevation,\n      aboveColor: this.aboveColor.toJSON(),\n      belowColor: this.belowColor.toJSON(),\n    };\n  }\n\n  /** Returns and locally stores gradient symbology for the ground plane texture depending on whether we are looking from above or below.\n   * Will store the ground colors used in the optional ColorDef array provided.\n   * @internal\n   */\n  public getGroundPlaneGradient(aboveGround: boolean): Gradient.Symb {\n    let gradient = aboveGround ? this._aboveSymb : this._belowSymb;\n    if (undefined !== gradient)\n      return gradient;\n\n    const values = [0, .25, .5];   // gradient goes from edge of rectangle (0.0) to center (1.0)...\n    const color = aboveGround ? this.aboveColor : this.belowColor;\n    const alpha = aboveGround ? 0x80 : 0x85;\n    const groundColors = [color.clone(), color.clone(), color.clone()];\n    groundColors[0].setTransparency(0xff);\n    groundColors[1].setTransparency(alpha);\n    groundColors[2].setTransparency(alpha);\n\n    // Get the possibly cached gradient from the system, specific to whether or not we want ground from above or below.\n    gradient = new Gradient.Symb();\n    gradient.mode = Gradient.Mode.Spherical;\n    gradient.keys = [{ color: groundColors[0], value: values[0] }, { color: groundColors[1], value: values[1] }, { color: groundColors[2], value: values[2] }];\n\n    // Store the gradient for possible future use\n    if (aboveGround)\n      this._aboveSymb = gradient;\n    else\n      this._belowSymb = gradient;\n\n    return gradient;\n  }\n}\n/** Namespace containing types controlling how solar shadows should be drawn.\n * @beta\n */\nexport namespace SolarShadows {\n  /** JSON representation of a solar shadow settings.\n   * @beta\n   */\n  export interface Props {\n    /** Shadow color */\n    color?: ColorDefProps;\n    /** Shadow bias - a nonzero bias is required to avoid self-shadowing effects. */\n    bias?: number;\n  }\n  /** Solar shadows are imposed as a color scaling on geometry that is occluded from solar lighting.  Shadows are imposed independently\n   * of solar lighting and is applied to unlit geometry such as reality models and map tiles.\n   * @beta\n   */\n  export class Settings implements Props {\n    private static readonly _defaultBias = .001;\n    /** Shadow color */\n    public color: ColorDef;\n    /** Shadow bias - a nonzero bias is required to avoid self-shadowing effects. */\n    public bias: number;\n\n    public constructor(props?: SolarShadowProps) {\n      this.bias = props ? JsonUtils.asDouble(props.bias, SolarShadows.Settings._defaultBias) : SolarShadows.Settings._defaultBias;\n      this.color = (props !== undefined && props.color !== undefined) ? ColorDef.fromJSON(props.color) : new ColorDef(ColorByName.grey);\n    }\n    public clone() { return new SolarShadows.Settings(this); }\n    public static fromJSON(props?: Props): Settings { return new Settings(props); }\n    public toJSON(): Props {\n      return {\n        bias: this.bias,\n        color: this.color,\n      };\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { CURRENT_REQUEST } from \"./rpc/core/RpcRegistry\";\nimport { RpcConfiguration, RpcConfigurationSupplier } from \"./rpc/core/RpcConfiguration\";\nimport * as semver from \"semver\";\nimport { RpcRequest } from \"./rpc/core/RpcRequest\";\n\n/** @public */\nexport interface RpcInterfaceDefinition<T extends RpcInterface = RpcInterface> { prototype: T; interfaceName: string; interfaceVersion: string; }\n\n/** @public */\nexport type RpcInterfaceImplementation<T extends RpcInterface = RpcInterface> = new () => T;\n\n/** An RPC interface is a set of operations exposed by a service that a client can call, using configurable protocols,\n * in a platform-independent way. TheRpcInterface class is the base class for RPC interface definitions and implementations.\n * @public\n */\nexport abstract class RpcInterface {\n  /** Determines whether the backend version of an RPC interface is compatible (according to semantic versioning) with the frontend version of the interface. */\n  public static isVersionCompatible(backend: string, frontend: string): boolean {\n    const difference = semver.diff(backend, frontend);\n    if (semver.prerelease(backend) || semver.prerelease(frontend)) {\n      return difference === null;\n    } else if (semver.major(backend) === 0 || semver.major(frontend) === 0) {\n      return difference === null || (difference === \"patch\" && semver.patch(frontend) < semver.patch(backend));\n    } else {\n      return difference === null || difference === \"patch\" || (difference === \"minor\" && semver.minor(frontend) < semver.minor(backend));\n    }\n  }\n\n  /** The configuration for the RPC interface. */\n  public readonly configuration = RpcConfiguration.supply(this);\n\n  /** Obtains the implementation result for an RPC operation. */\n  public async forward<T = any>(parameters: IArguments): Promise<T> {\n    const parametersCompat = (arguments.length === 1 && typeof (parameters) === \"object\") ? parameters : arguments;\n    const parametersArray = Array.isArray(parametersCompat) ? parametersCompat : Array.prototype.slice.call(parametersCompat);\n    const operationName = parametersArray.pop();\n    const request = new (this.configuration.protocol.requestType as any)(this, operationName, parametersArray) as RpcRequest;\n    request.submit(); // tslint:disable-line:no-floating-promises\n    (this as any)[CURRENT_REQUEST] = request;\n    return request.response;\n  }\n\n  /** @internal */\n  public configurationSupplier: RpcConfigurationSupplier | undefined;\n}\n\nRpcInterface.prototype.configurationSupplier = undefined;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterface, RpcInterfaceDefinition, RpcInterfaceImplementation } from \"./RpcInterface\";\nimport { RpcRegistry } from \"./rpc/core/RpcRegistry\";\n\n/** Describes the endpoints of an RPC interface.\n * @public\n */\nexport interface RpcInterfaceEndpoints {\n  interfaceName: string;\n  interfaceVersion: string;\n  operationNames: string[];\n  compatible: boolean;\n}\n\n/** RPC interface management is concerned with coordination of access and configuration for RPC interfaces.\n * @public\n */\nexport class RpcManager {\n  /** Initializes an RPC interface class.\n   * @note This function must be called on the frontend and on the backend for each RPC interface class used by an application.\n   */\n  public static initializeInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): void {\n    RpcRegistry.instance.initializeRpcInterface(definition);\n  }\n\n  /** Terminates an RPC interface class. */\n  public static terminateInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): void {\n    RpcRegistry.instance.terminateRpcInterface(definition);\n  }\n\n  /** Returns the RPC client instance for the frontend. */\n  public static getClientForInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): T {\n    return RpcRegistry.instance.getClientForInterface(definition);\n  }\n\n  /** Register the RPC implementation class for the backend. */\n  public static registerImpl<TDefinition extends RpcInterface, TImplementation extends TDefinition>(definition: RpcInterfaceDefinition<TDefinition>, implementation: RpcInterfaceImplementation<TImplementation>): void {\n    RpcRegistry.instance.registerImpl(definition, implementation);\n  }\n\n  /** Supply the instance of the RPC interface implementation class for the backend (optional). */\n  public static supplyImplInstance<TDefinition extends RpcInterface, TImplementation extends TDefinition>(definition: RpcInterfaceDefinition<TDefinition>, instance: TImplementation): void {\n    RpcRegistry.instance.supplyImplInstance(definition, instance);\n  }\n\n  /** Unregister the RPC implementation class for the backend. */\n  public static unregisterImpl<TDefinition extends RpcInterface>(definition: RpcInterfaceDefinition<TDefinition>): void {\n    RpcRegistry.instance.unregisterImpl(definition);\n  }\n\n  /** Describes the RPC interfaces and endpoints that are currently available from the backend.\n   * @note Some endpoints may be marked incompatible if the frontend expected a different interface declaration than the backend supplied. RPC operations against an incompatible interface will fail.\n   */\n  public static async describeAvailableEndpoints(): Promise<RpcInterfaceEndpoints[]> {\n    return RpcRegistry.instance.describeAvailableEndpoints();\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module SpatialClassificationProps */\nimport { Id64String } from \"@bentley/bentleyjs-core\";\n\n/** Geometry may be classified by its spatial location.  This is typically used to classify reality models.\n * A volume classifier classifies on all space within a closed mesh.  A planar classifier classifies within a\n * planar region swept perpendicular to its plane.\n * @beta\n */\nexport namespace SpatialClassificationProps {\n  /** Classification Type\n   * @beta\n   */\n  export enum Type { Planar = 0, Volume = 1 }\n\n  /** Display modes\n   * @beta\n   */\n  export enum Display {\n    /** If off, geometry is omitted (invisible) */\n    Off = 0,\n    /** If on geometry is displayed without alteration */\n    On = 1,\n    /** Dimmed geometry is darkened. */\n    Dimmed = 2,\n    /** Display tinted to hilite color */\n    Hilite = 3,\n    /** Display with the classifier color */\n    ElementColor = 4,\n  }\n\n  /** Flag Properties\n   * @beta\n   */\n  export interface FlagsProps {\n    inside: SpatialClassificationProps.Display;\n    outside: SpatialClassificationProps.Display;\n    selected: SpatialClassificationProps.Display;\n    type: number;         // Not currently implemented\n  }\n\n  /** Flags\n   * @beta\n   */\n  export class Flags implements FlagsProps {\n    public inside: Display = Display.ElementColor;\n    public outside: Display = Display.Dimmed;\n    public selected: Display = Display.Hilite;\n    public type: number = 0;         // Not currently implemented\n\n    public constructor(inside = Display.ElementColor, outside = Display.Dimmed) { this.inside = inside; this.outside = outside; }\n  }\n  /** Properties describe a single application of a classifier to a model.\n   * @beta\n   */\n  export interface PropertiesProps {\n    /** The classifier model Id. */\n    modelId: Id64String;\n    /** a distance to expand the classification around the basic geometry.  Curve geometry is expanded to regions, regions are expanded to volumes. */\n    expand: number;\n    flags: FlagsProps;\n    name: string;\n    isActive: boolean;\n  }\n\n  /** Properties describe a single application of a classifier to a model.\n   * @beta\n   */\n  export class Properties implements PropertiesProps {\n    public modelId: Id64String;\n    public expand: number;\n    public flags: Flags;\n    public name: string;\n    public isActive: boolean;\n    constructor(props: PropertiesProps) {\n      this.name = props.name;\n      this.modelId = props.modelId;\n      this.expand = props.expand;\n      this.flags = props.flags ? props.flags : new Flags();\n      this.isActive = props.isActive;\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Views */\n\nimport { Id64, Id64String, JsonUtils } from \"@bentley/bentleyjs-core\";\nimport { ColorDef, ColorDefProps } from \"./ColorDef\";\n\n/** Parameters that define the way geometry on a [[SubCategory]] appears.\n * SubCategoryAppearance describes the intrinsic appearance of geometry belonging to that SubCategory, independent of a particular [[ViewState]].\n * Aspects of a SubCategory's appearance can be overridden in the context of a particular [[ViewState]] through the use of [[SubCategoryOverride]s.\n * @public\n */\nexport class SubCategoryAppearance {\n  /** The color of the geometry.\n   * @note The transparency component of the color is ignored.\n   * @see [[SubCategoryAppearance.transparency]].\n   */\n  public readonly color: ColorDef;\n  /** The line width, in pixels.\n   * @note The renderer will clamp values to the integer range [1, 32].\n   */\n  public readonly weight: number;\n  /** The display priority used to control which geometry draws in front of other geometry within a 2D view.\n   * The priority is a number in the range [-8388576,8388576].\n   * Where two pieces of geometry overlap, the one with the larger priority value draws on top of the one with the smaller priority.\n   * If they have equal priorities, the order in which they draw is undefined, and z-fighting may result.\n   * @note This property has no effect in 3D views.\n   */\n  public readonly priority: number;\n  /** A value in the range [0, 1] indicating the transparency of the geometry where 0.0 means \"fully opaque\" and 1.0 means \"fully transparent\". */\n  public readonly transparency: number;\n  /** If true, geometry belonging to this SubCategory is not drawn. */\n  public readonly invisible: boolean;\n  /** @internal */\n  public readonly dontPlot: boolean;\n  /** @internal */\n  public readonly dontSnap: boolean;\n  /** @internal */\n  public readonly dontLocate: boolean;\n  /** The element ID of the line style used to draw curves, or an invalid ID if no line style is specified. */\n  public readonly styleId: Id64String;\n  /** The element ID of the material applied to surfaces, or an invalid ID if no material is specified. */\n  public readonly materialId: Id64String;\n\n  constructor(props?: SubCategoryAppearance.Props) {\n    if (!props) {\n      this.color = ColorDef.black;\n      this.weight = 0;\n      this.priority = 0;\n      this.transparency = 0;\n      this.invisible = this.dontPlot = this.dontSnap = this.dontLocate = false;\n      this.styleId = Id64.invalid;\n      this.materialId = Id64.invalid;\n      return;\n    }\n\n    this.invisible = JsonUtils.asBool(props.invisible);\n    this.dontSnap = JsonUtils.asBool(props.dontSnap);\n    this.dontLocate = JsonUtils.asBool(props.dontLocate);\n    this.dontPlot = JsonUtils.asBool(props.dontPlot);\n    this.color = ColorDef.fromJSON(props.color);\n    this.weight = JsonUtils.asInt(props.weight);\n    this.styleId = Id64.fromJSON(props.style);\n    this.priority = JsonUtils.asInt(props.priority);\n    this.materialId = Id64.fromJSON(props.material);\n    this.transparency = JsonUtils.asInt(props.transp);\n  }\n\n  public equals(other: SubCategoryAppearance): boolean {\n    return this.invisible === other.invisible &&\n      this.dontPlot === other.dontPlot &&\n      this.dontSnap === other.dontSnap &&\n      this.dontLocate === other.dontLocate &&\n      this.color.equals(other.color) &&\n      this.weight === other.weight &&\n      this.priority === other.priority &&\n      this.styleId === other.styleId &&\n      this.materialId === other.materialId &&\n      this.transparency === other.transparency;\n  }\n\n  /** @internal */\n  public toJSON(): SubCategoryAppearance.Props {\n    const val = { color: this.color.toJSON() } as SubCategoryAppearance.Props;\n    if (this.invisible) val.invisible = true;\n    if (this.dontPlot) val.dontPlot = true;\n    if (this.dontSnap) val.dontSnap = true;\n    if (this.dontLocate) val.dontLocate = true;\n    if (0 !== this.weight) val.weight = this.weight;\n    if (0 !== this.priority) val.priority = this.priority;\n\n    if (Id64.isValid(this.styleId))\n      val.style = this.styleId;\n\n    if (Id64.isValid(this.materialId))\n      val.material = this.materialId;\n\n    if (0.0 !== this.transparency) val.transp = this.transparency;\n    return val;\n  }\n\n  public clone(): SubCategoryAppearance { return new SubCategoryAppearance(this.toJSON()); }\n\n  public static defaults = new SubCategoryAppearance();\n}\n\n/** @public */\nexport namespace SubCategoryAppearance {\n  /** Properties used to create a SubCategoryAppearance\n   * @see [[SubCategoryAppearance]]\n   */\n  export interface Props {\n    /** @see [[SubCategoryAppearance.color]]. Defaults to black. */\n    color?: ColorDefProps;\n    /** @see [[SubCategoryAppearance.invisible]]. Defaults to false. */\n    invisible?: boolean;\n    /** @internal */\n    dontPlot?: boolean;\n    /** @internal */\n    dontSnap?: boolean;\n    /** @internal */\n    dontLocate?: boolean;\n    /** @see [[SubCategoryAppearance.weight]]. Defaults to 0. */\n    weight?: number;\n    /** @see [[SubCategoryAppearance.styleId]]. Defaults to an invalid ID indicating \"no line style\". */\n    style?: Id64String;\n    /** @see [[SubCategoryAppearance.priority]]. Defaults to 0. */\n    priority?: number;\n    /** @see [[SubCategoryAppearance.materialId]]. Defaults to an invalid ID indicating \"no material\". */\n    material?: Id64String;\n    /** @see [[SubCategoryAppearance.transparency]]. Defaults to 0. */\n    transp?: number;\n  }\n}\n\n/** Overrides selected aspects of a [[SubCategoryAppearance]] in the context of a [[ViewState]].\n * When determining how geometry belonging to a [[SubCategory]] will appear when drawn within a view:\n *  1. The base [[SubCategoryAppearance]] associated with that subcategory is obtained.\n *  2. The [[SubCategoryOverride]] associated with that subcategory in the [[ViewState]] is obtained.\n *  3. Any aspects of the appearance overridden by the SubCategoryOverride are replaced with the values from the SubCategoryOverride.\n * An aspect is overridden by virtue of not being set to \"undefined\" in the SubCategoryOverride.\n * @see [[ViewState.overrideSubCategory]]\n * @public\n */\nexport class SubCategoryOverride {\n  /** @see [[SubCategoryAppearance.color]] */\n  public readonly color?: ColorDef;\n  /** @see [[SubCategoryAppearance.invisible]] */\n  public readonly invisible?: boolean;\n  /** @see [[SubCategoryAppearance.weight]] */\n  public readonly weight?: number;\n  /** @internal Overriding with arbitrary custom line style is not supported - overriding with LinePixels enum could be. */\n  public readonly style?: Id64String;\n  /** @see [[SubCategoryAppearance.priority]] */\n  public readonly priority?: number;\n  /** @see [[SubCategoryAppearance.materialId]] */\n  public readonly material?: Id64String;\n  /** @see [[SubCategoryAppearance.transparency]] */\n  public readonly transparency?: number;\n\n  /** Returns true if any aspect of the appearance is overridden (i.e., if any member is not undefined). */\n  public get anyOverridden(): boolean {\n    return undefined !== this.invisible || undefined !== this.color || undefined !== this.weight || undefined !== this.style || undefined !== this.priority || undefined !== this.material || undefined !== this.transparency;\n  }\n\n  /** Returns a SubCategoryAppearance overridden to match the properties defined by this SubCategoryOverride. */\n  public override(appearance: SubCategoryAppearance): SubCategoryAppearance {\n    if (!this.anyOverridden)\n      return appearance;\n\n    const props = appearance.toJSON();\n    const ovrProps = this.toJSON();\n    if (undefined !== ovrProps.invisible) props.invisible = ovrProps.invisible;\n    if (undefined !== ovrProps.weight) props.weight = ovrProps.weight;\n    if (undefined !== ovrProps.style) props.style = ovrProps.style;\n    if (undefined !== ovrProps.material) props.material = ovrProps.material;\n    if (undefined !== ovrProps.priority) props.priority = ovrProps.priority;\n    if (undefined !== ovrProps.transp) props.transp = ovrProps.transp;\n    if (undefined !== ovrProps.color) props.color = ovrProps.color;\n\n    return new SubCategoryAppearance(props);\n  }\n\n  /** Convert this SubCategoryOverride to a JSON object\n   * @internal\n   */\n  public toJSON(): SubCategoryAppearance.Props {\n    const val: SubCategoryAppearance.Props = {\n      invisible: this.invisible,\n      weight: this.weight,\n      style: this.style,\n      material: this.material,\n      priority: this.priority,\n      transp: this.transparency,\n    };\n\n    if (undefined !== this.color)\n      val.color = this.color.toJSON();\n\n    return val;\n  }\n\n  /** Perform equality comparison against another SubCategoryOverride. */\n  public equals(other: SubCategoryOverride): boolean {\n    if (this.invisible !== other.invisible || this.weight !== other.weight || this.style !== other.style\n      || this.priority !== other.priority || this.material !== other.material || this.transparency !== other.transparency)\n      return false;\n\n    if (undefined !== this.color && undefined !== other.color)\n      return this.color.tbgr === other.color.tbgr;\n    else\n      return undefined === this.color && undefined === other.color;\n  }\n\n  /** Create a new SubCategoryOverride from a JSON object */\n  public static fromJSON(json?: SubCategoryAppearance.Props): SubCategoryOverride {\n    return undefined !== json ? new SubCategoryOverride(json) : this.defaults;\n  }\n\n  private constructor(props: SubCategoryAppearance.Props) {\n    if (undefined !== props.invisible) this.invisible = JsonUtils.asBool(props.invisible);\n    if (undefined !== props.color) this.color = ColorDef.fromJSON(props.color);\n    if (undefined !== props.weight) this.weight = JsonUtils.asInt(props.weight);\n    if (undefined !== props.style) this.style = Id64.fromJSON(props.style);\n    if (undefined !== props.material) this.material = Id64.fromJSON(props.material);\n    if (undefined !== props.priority) this.priority = JsonUtils.asInt(props.priority);\n    if (undefined !== props.transp) this.transparency = JsonUtils.asDouble(props.transp);\n  }\n\n  /** A default SubCategoryOverride which overrides nothing. */\n  public static defaults = new SubCategoryOverride({});\n}\n\n/** The *rank* for a Category\n * @public\n */\nexport enum Rank {\n  /** This category is predefined by the system */\n  System = 0,\n  /** This category is defined by a schema. Elements in this category are not recognized by system classes. */\n  Domain = 1,\n  /** This category is defined by an application. Elements in this category are not recognized by system and schema classes. */\n  Application = 2,\n  /** This category is defined by a user. Elements in this category are not recognized by system, schema, and application classes. */\n  User = 3,\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module WireFormats */\r\n\r\nimport { DefinitionElementProps } from \"./ElementProps\";\r\nimport { ImageSourceFormat } from \"./Image\";\r\n\r\n/** @beta */\r\nexport enum TextureFlags { None }\r\n\r\n/** Properties that define a Texture\r\n * @beta\r\n */\r\nexport interface TextureProps extends DefinitionElementProps {\r\n  /** Format of the image data. */\r\n  format: ImageSourceFormat;\r\n  /** The image data stored in a Base64-encoded string according to the specified format. */\r\n  data: string;\r\n  /** The width of the image. */\r\n  width: number;\r\n  /** The height of the image. */\r\n  height: number;\r\n  /** Optional flags.  Currently unused; should always be TextureFlags.None.\r\n   * @beta\r\n   */\r\n  flags: TextureFlags;\r\n  /** An optional description of the texture. */\r\n  description?: string;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Views */\n\nimport { Id64, Id64String, Id64Array, JsonUtils } from \"@bentley/bentleyjs-core\";\nimport { EntityQueryParams } from \"./EntityProps\";\nimport { AngleProps, XYZProps, XYProps, YawPitchRollProps } from \"@bentley/geometry-core\";\nimport { ElementProps, DefinitionElementProps, SheetProps } from \"./ElementProps\";\nimport { ColorDef, ColorDefProps } from \"./ColorDef\";\nimport { ViewFlags, AnalysisStyleProps, HiddenLine, AmbientOcclusion, SolarShadows } from \"./Render\";\nimport { SubCategoryAppearance, SubCategoryOverride } from \"./SubCategoryAppearance\";\nimport { RenderSchedule } from \"./RenderSchedule\";\nimport { SpatialClassificationProps } from \"./SpatialClassificationProps\";\n\n/** Returned from [IModelDb.Views.getViewStateData]($backend)\n * @public\n */\nexport interface ViewStateProps {\n  viewDefinitionProps: ViewDefinitionProps;\n  categorySelectorProps: CategorySelectorProps;\n  modelSelectorProps?: ModelSelectorProps;\n  displayStyleProps: DisplayStyleProps;\n  /** @beta */\n  sheetProps?: SheetProps;\n  /** @beta */\n  sheetAttachments?: Id64Array;\n}\n\n/** Properties that define a ModelSelector\n * @public\n */\nexport interface ModelSelectorProps extends DefinitionElementProps {\n  models: Id64Array;\n}\n\n/** Properties that define a CategorySelector\n * @public\n */\nexport interface CategorySelectorProps extends DefinitionElementProps {\n  categories: Id64Array;\n}\n\n/** Parameters for performing a query on [ViewDefinition]($backend) classes.\n * @public\n */\nexport interface ViewQueryParams extends EntityQueryParams {\n  wantPrivate?: boolean;\n}\n\n/** Parameters used to construct a ViewDefinition\n * @public\n */\nexport interface ViewDefinitionProps extends DefinitionElementProps {\n  categorySelectorId: Id64String;\n  displayStyleId: Id64String;\n  description?: string;\n}\n\n/** JSON representation of [[ViewFlags]]\n * @public\n */\nexport interface ViewFlagProps {\n  /** If true, don't show construction class. */\n  noConstruct?: boolean;\n  /** If true, don't show dimension class. */\n  noDim?: boolean;\n  /** If true, don't show patterns. */\n  noPattern?: boolean;\n  /** If true, don't line weights. */\n  noWeight?: boolean;\n  /** If true, don't line styles. */\n  noStyle?: boolean;\n  /** If true, don't use transparency. */\n  noTransp?: boolean;\n  /** @internal This doesn't belong here - it is not persistent. */\n  contRend?: boolean;\n  /** If true, don't show filled regions. */\n  noFill?: boolean;\n  /** If true, show grids. */\n  grid?: boolean;\n  /** If true, show AuxCoordSystem. */\n  acs?: boolean;\n  /** If true, don't show textures. */\n  noTexture?: boolean;\n  /** If true, don't show materials. */\n  noMaterial?: boolean;\n  /** If true, don't use camera lights. */\n  noCameraLights?: boolean;\n  /** If true, don't use source lights. */\n  noSourceLights?: boolean;\n  /** If true, don't use solar lights. */\n  noSolarLight?: boolean;\n  /** If true, show visible edges. */\n  visEdges?: boolean;\n  /** If true, show hidden edges. */\n  hidEdges?: boolean;\n  /** If true, show shadows. */\n  shadows?: boolean;\n  /** If true, use clipping volume. */\n  clipVol?: boolean;\n  /** If true, use hidden line material colors. */\n  hlMatColors?: boolean;\n  /** If true, show view with monochrome settings. */\n  monochrome?: boolean;\n  /** @internal unused */\n  edgeMask?: number;\n  /** [[RenderMode]] */\n  renderMode?: number;\n  /** Display background map. */\n  backgroundMap?: boolean;\n  /** If true, show ambient occlusion. */\n  ambientOcclusion?: boolean;\n  /** Controls whether surface discard is always applied regardless of other ViewFlags.\n   * Surface shaders contain complicated logic to ensure that the edges of a surface always draw in front of the surface, and that planar surfaces sketched coincident with\n   * non-planar surfaces always draw in front of those non-planar surfaces.\n   * When this view flag is set to false (the default), then for 3d views if the render mode is wireframe (only edges are displayed) or smooth shader with visible edges turned off (only surfaces are displayed),\n   * that logic does not execute, potentially improving performance for no degradation in visual quality. In some scenarios - such as wireframe views containing many planar regions with interior fill, or smooth views containing many coincident planar and non-planar surfaces - enabling this view flag improves display quality by forcing that logic to execute.\n   */\n  forceSurfaceDiscard?: boolean;\n}\n\n/** Describes the [[SubCategoryOverride]]s applied to a [[SubCategory]] by a [[DisplayStyle]].\n * @see [[DisplayStyleSettingsProps]]\n * @public\n */\nexport interface DisplayStyleSubCategoryProps extends SubCategoryAppearance.Props {\n  /** The Id of the [[SubCategory]] whose appearance is to be overridden. */\n  subCategory?: Id64String;\n}\n\n/** Describes the type of background map displayed by a [[DisplayStyle]]\n * @see [[BackgroundMapProps]]\n * @see [[DisplayStyleSettingsProps]]\n * @public\n */\nexport enum BackgroundMapType {\n  Street = 1,\n  Aerial = 2,\n  Hybrid = 3,\n}\n\n/** JSON representation of the settings associated with a background map displayed by a [[DisplayStyle]].\n * @see [[DisplayStyleSettingsProps]]\n * @public\n */\nexport interface BackgroundMapProps {\n  groundBias?: number;\n  /** The Id of a map tile provider. Currently the type should technically be `\"BingProvider\" | \"MapBoxProvider\"`, but support for other providers may be added in the future. */\n  providerName?: string;\n  providerData?: {\n    mapType?: BackgroundMapType;\n  };\n}\n\n/** JSON representation of a [[GroundPlane]].\n * @public\n */\nexport interface GroundPlaneProps {\n  /** Whether the ground plane should be displayed. Defaults to false. */\n  display?: boolean;\n  /** The Z height at which to draw the ground plane. */\n  elevation?: number;\n  /** The color in which to draw the ground plane when viewed from above. */\n  aboveColor?: ColorDefProps;\n  /** The color in which to draw the ground plane when viewed from below. */\n  belowColor?: ColorDefProps;\n}\n\n/** Enumerates the supported types of [SkyBox]($frontend) images.\n * @public\n */\nexport enum SkyBoxImageType {\n  None,\n  /** A single image mapped to the surface of a sphere. @see [[SkySphere]] */\n  Spherical,\n  /** 6 images mapped to the faces of a cube. @see [[SkyCube]] */\n  Cube,\n  /** @internal not yet supported */\n  Cylindrical,\n}\n\n/** JSON representation of a set of images used by a [[SkyCube]]. Each property specifies the element ID of a texture associated with one face of the cube.\n * @public\n */\nexport interface SkyCubeProps {\n  /** Id of a persistent texture element stored in the iModel to use for the front side of the skybox cube. */\n  front?: Id64String;\n  /** Id of a persistent texture element stored in the iModel to use for the back side of the skybox cube. */\n  back?: Id64String;\n  /** Id of a persistent texture element stored in the iModel to use for the top of the skybox cube. */\n  top?: Id64String;\n  /** Id of a persistent texture element stored in the iModel to use for the bottom of the skybox cube. */\n  bottom?: Id64String;\n  /** Id of a persistent texture element stored in the iModel to use for the right side of the skybox cube. */\n  right?: Id64String;\n  /** Id of a persistent texture element stored in the iModel to use for the left side of the skybox cube. */\n  left?: Id64String;\n}\n\n/** JSON representation of an image or images used by a [[SkySphere]] or [[SkyCube]].\n * @public\n */\nexport interface SkyBoxImageProps {\n  /** The type of skybox image. */\n  type?: SkyBoxImageType;\n  /** For [[SkyBoxImageType.Spherical]], the Id of a persistent texture element stored in the iModel to be drawn as the \"sky\". */\n  texture?: Id64String;\n  /** For [[SkyBoxImageType.Cube]], the Ids of persistent texture elements stored in the iModel drawn on each face of the cube. */\n  textures?: SkyCubeProps;\n}\n\n/** JSON representation of a [SkyBox]($frontend).\n * @public\n */\nexport interface SkyBoxProps {\n  /** Whether or not the skybox should be displayed. Defaults to false. */\n  display?: boolean;\n  /** For a [[SkyGradient]], if true, a 2-color gradient skybox is used instead of a 4-color. Defaults to false. */\n  twoColor?: boolean;\n  /** For a 4-color [[SkyGradient]], the color of the sky at the horizon. */\n  skyColor?: ColorDefProps;\n  /** For a 4-color [[SkyGradient]], the color of the ground at the horizon. */\n  groundColor?: ColorDefProps;\n  /** For a 4-color [[SkyGradient]], the color of the sky when looking straight up. For a 2-color [[SkyGradient]], the color of the sky. */\n  zenithColor?: ColorDefProps;\n  /** For a 4-color [[SkyGradient]], the color of the ground when looking straight down. For a 2-color [[SkyGradient]], the color of the ground. */\n  nadirColor?: ColorDefProps;\n  /** For a 4-color [[SkyGradient]], controls speed of change from sky color to zenith color. */\n  skyExponent?: number;\n  /** For a 4-color [[SkyGradient]], controls speed of change from ground color to nadir color. */\n  groundExponent?: number;\n  /** For a [[SkySphere]] or [[SkyCube]], the skybox image(s). */\n  image?: SkyBoxImageProps;\n}\n\n/** JSON representation of a solar shadow settings.\n * @beta\n */\nexport interface SolarShadowProps {\n  /** Shadow color */\n  color?: ColorDefProps;\n  /** Shadow bias - a nonzero bias is required to avoid self-shadowing effects. */\n  bias?: number;\n}\n\n/** JSON representation of the environment setup of a [[DisplayStyle3d]].\n * @public\n */\nexport interface EnvironmentProps {\n  ground?: GroundPlaneProps;\n  sky?: SkyBoxProps;\n}\n\n/** JSON representation of a context reality model\n * @public\n */\nexport interface ContextRealityModelProps {\n  tilesetUrl: string;\n  name?: string;\n  description?: string;\n  /** @beta */\n  classifiers?: SpatialClassificationProps.PropertiesProps[];\n}\n\n/** JSON representation of the settings associated with a [[DisplayStyleProps]].\n * These settings are not stored directly as members of the [[DisplayStyleProps]]. Instead, they are stored\n * as members of `jsonProperties.styles`.\n * @see [[DisplayStyleSettings]].\n * @public\n */\nexport interface DisplayStyleSettingsProps {\n  viewflags?: ViewFlagProps;\n  /** The color displayed in the view background. Defaults to black. */\n  backgroundColor?: ColorDefProps;\n  /** The color used in monochrome mode. Defaults to white. */\n  monochromeColor?: ColorDefProps;\n  /** Settings controlling display of analytical models.\n   * @alpha\n   */\n  analysisStyle?: AnalysisStyleProps;\n  /** Schedule script\n   * @beta\n   */\n  scheduleScript?: RenderSchedule.ElementTimelineProps[];\n  /** Overrides applied to the appearances of subcategories in the view. */\n  subCategoryOvr?: DisplayStyleSubCategoryProps[];\n  /** Settings controlling display of map imagery within views of geolocated models. */\n  backgroundMap?: BackgroundMapProps;\n  /** Contextual Reality Models */\n  ContextRealityModels?: ContextRealityModelProps[];\n  /** List of IDs of excluded elements */\n  excludedElements?: Id64String[];\n}\n\n/** JSON representation of settings associated with a [[DisplayStyle3dProps]].\n * @see [[DisplayStyle3dSettings]].\n * @public\n */\nexport interface DisplayStyle3dSettingsProps extends DisplayStyleSettingsProps {\n  /** Settings controlling display of skybox and ground plane. */\n  environment?: EnvironmentProps;\n  /** Settings controlling display of visible and hidden edges.\n   * @beta\n   */\n  hline?: HiddenLine.SettingsProps;\n  /** Settings controlling display of ambient occlusion, stored in Props.\n   * @beta\n   */\n  ao?: AmbientOcclusion.Props;\n  /** Settings controlling display of solar shadows, stored in Props.\n   * @beta\n   */\n  solarShadows?: SolarShadows.Props;\n}\n\n/** JSON representation of a [[DisplayStyle]] or [[DisplayStyleState]].\n * @public\n */\nexport interface DisplayStyleProps extends DefinitionElementProps {\n  /** Display styles store their settings in a `styles` property within [[ElementProps.jsonProperties]]. */\n  jsonProperties?: {\n    styles?: DisplayStyleSettingsProps;\n  };\n}\n\n/** JSON representation of a [[DisplayStyle3d]] or [[DisplayStyle3dState]].\n * @public\n */\nexport interface DisplayStyle3dProps extends DisplayStyleProps {\n  /** Display styles store their settings in a `styles` property within [[ElementProps.jsonProperties]]. */\n  jsonProperties?: {\n    styles?: DisplayStyle3dSettingsProps;\n  };\n}\n\n/** properties of a camera\n * @public\n */\nexport interface CameraProps {\n  lens: AngleProps;\n  focusDist: number; // NOTE: this is abbreviated, do not change!\n  eye: XYZProps;\n}\n\n/** Parameters to construct a ViewDefinition3d\n * @public\n */\nexport interface ViewDefinition3dProps extends ViewDefinitionProps {\n  /** if true, camera is valid. */\n  cameraOn: boolean;\n  /** The lower left back corner of the view frustum. */\n  origin: XYZProps;\n  /** The extent of the view frustum. */\n  extents: XYZProps;\n  /** Rotation of the view frustum (could be undefined if going Matrix3d -> YawPitchRoll). */\n  angles?: YawPitchRollProps;\n  /** The camera used for this view. */\n  camera: CameraProps;\n}\n\n/** Parameters to construct a SpatialViewDefinition\n * @public\n */\nexport interface SpatialViewDefinitionProps extends ViewDefinition3dProps {\n  modelSelectorId: Id64String;\n}\n\n/** Parameters used to construct a ViewDefinition2d\n * @public\n */\nexport interface ViewDefinition2dProps extends ViewDefinitionProps {\n  baseModelId: Id64String;\n  origin: XYProps;\n  delta: XYProps;\n  angle: AngleProps;\n}\n\n/** @public */\nexport interface AuxCoordSystemProps extends ElementProps {\n  type?: number;\n  description?: string;\n}\n\n/**  Properties of AuxCoordSystem2d\n * @public\n */\nexport interface AuxCoordSystem2dProps extends AuxCoordSystemProps {\n  /** Origin of the AuxCoordSystem2d */\n  origin?: XYProps;\n  /** Rotation angle */\n  angle?: AngleProps;\n}\n\n/** Properties of AuxCoordSystem3d\n * @public\n */\nexport interface AuxCoordSystem3dProps extends AuxCoordSystemProps {\n  /** Origin of the AuxCoordSystem3d */\n  origin?: XYZProps;\n  /** Yaw angle */\n  yaw?: AngleProps;\n  /** Pitch angle */\n  pitch?: AngleProps;\n  /** Roll angle */\n  roll?: AngleProps;\n}\n\n/** Provides access to the settings defined by a [[DisplayStyle]] or [[DisplayStyleState]], and ensures that\n * the style's JSON properties are kept in sync.\n * @beta\n */\nexport class DisplayStyleSettings {\n  protected readonly _json: DisplayStyleSettingsProps;\n  private readonly _viewFlags: ViewFlags;\n  private readonly _background: ColorDef;\n  private readonly _monochrome: ColorDef;\n  private readonly _subCategoryOverrides: Map<string, SubCategoryOverride> = new Map<string, SubCategoryOverride>();\n  private readonly _excludedElements: Set<Id64String> = new Set<Id64String>();\n\n  /** Construct a new DisplayStyleSettings from an [[ElementProps.jsonProperties]].\n   * @param jsonProperties An object with an optional `styles` property containing a display style's settings.\n   * @note When the `DisplayStyleSetting`'s properties are modified by public setters, the `jsonProperties`'s `styles` object will be updated to reflect the change.\n   * @note If `jsonProperties` contains no `styles` member, one will be added as an empty object.\n   * @note Generally there is no reason to create an object of this type directly; a [[DisplayStyle]] or [[DisplayStyleState]] constructs one as part of its own construction.\n   */\n  public constructor(jsonProperties: { styles?: DisplayStyleSettingsProps }) {\n    if (undefined === jsonProperties.styles)\n      jsonProperties.styles = {};\n    this._json = jsonProperties.styles;\n    this._viewFlags = ViewFlags.fromJSON(this._json.viewflags);\n    this._background = ColorDef.fromJSON(this._json.backgroundColor);\n    this._monochrome = undefined !== this._json.monochromeColor ? ColorDef.fromJSON(this._json.monochromeColor) : ColorDef.white.clone();\n\n    const ovrsArray = JsonUtils.asArray(this._json.subCategoryOvr);\n    if (undefined !== ovrsArray) {\n      for (const ovrJson of ovrsArray) {\n        const subCatId = Id64.fromJSON(ovrJson.subCategory);\n        if (Id64.isValid(subCatId)) {\n          const subCatOvr = SubCategoryOverride.fromJSON(ovrJson);\n          if (subCatOvr.anyOverridden)\n            this.changeSubCategoryOverride(subCatId, false, subCatOvr);\n        }\n      }\n    }\n\n    const exElemArray = JsonUtils.asArray(this._json.excludedElements);\n    if (undefined !== exElemArray) {\n      for (const exElemStr of exElemArray) {\n        const exElem = Id64.fromJSON(exElemStr);\n        if (Id64.isValid(exElem)) {\n          this._excludedElements.add(exElem);\n        }\n      }\n    }\n  }\n\n  /** The ViewFlags associated with the display style.\n   * @note If the style is associated with a [[ViewState]] attached to a [[Viewport]], use [[ViewState.viewFlags]] to modify the ViewFlags to ensure\n   * the changes are promptly visible on the screen.\n   * @note Do not modify the ViewFlags in place. Clone them and pass the clone to the setter.\n   */\n  public get viewFlags(): ViewFlags { return this._viewFlags; }\n  public set viewFlags(flags: ViewFlags) {\n    flags.clone(this._viewFlags);\n    this._json.viewflags = flags.toJSON();\n  }\n\n  /** The background color.\n   * @note Do not modify the color in place. Clone it and pass the clone to the setter.\n   */\n  public get backgroundColor(): ColorDef { return this._background; }\n  public set backgroundColor(color: ColorDef) {\n    this._background.setFrom(color);\n    this._json.backgroundColor = color.toJSON();\n  }\n\n  /** The color used to draw geometry in monochrome mode.\n   * @note Do not modify the color in place. Clone it and pass the clone to the setter.\n   * @see [[ViewFlags.monochrome]] for enabling monochrome mode.\n   */\n  public get monochromeColor(): ColorDef { return this._monochrome; }\n  public set monochromeColor(color: ColorDef) {\n    this._monochrome.setFrom(color);\n    this._json.monochromeColor = color.toJSON();\n  }\n\n  /** @alpha */\n  public get backgroundMap(): BackgroundMapProps | undefined {\n    const props = this._json.backgroundMap;\n    return undefined !== props ? props : {};\n  }\n  /** @alpha */\n  public set backgroundMap(map: BackgroundMapProps | undefined) { this._json.backgroundMap = map; }\n\n  /** Customize the way geometry belonging to a [[SubCategory]] is drawn by this display style.\n   * @param id The ID of the SubCategory whose appearance is to be overridden.\n   * @param ovr The overrides to apply to the [[SubCategoryAppearance]].\n   * @note If this style is associated with a [[ViewState]] attached to a [[Viewport]], use [[ViewState.overrideSubCategory]] to ensure\n   * the changes are promptly visible on the screen.\n   * @see [[dropSubCategoryOverride]]\n   */\n  public overrideSubCategory(id: Id64String, ovr: SubCategoryOverride): void { this.changeSubCategoryOverride(id, true, ovr); }\n\n  /** Remove any [[SubCategoryOverride]] applied to a [[SubCategoryAppearance]] by this style.\n   * @param id The ID of the [[SubCategory]].\n   * @note If this style is associated with a [[ViewState]] attached to a [[Viewport]], use [[ViewState.dropSubCategoryOverride]] to ensure\n   * the changes are promptly visible on the screen.\n   * @see [[overrideSubCategory]]\n   */\n  public dropSubCategoryOverride(id: Id64String): void { this.changeSubCategoryOverride(id, true); }\n\n  /** Obtain the overrides applied to a [[SubCategoryAppearance]] by this style.\n   * @param id The ID of the [[SubCategory]].\n   * @returns The corresponding SubCategoryOverride, or undefined if the SubCategory's appearance is not overridden.\n   * @see [[overrideSubCategory]]\n   */\n  public getSubCategoryOverride(id: Id64String): SubCategoryOverride | undefined { return this._subCategoryOverrides.get(id); }\n\n  /** Returns true if an [[SubCategoryOverride]s are defined by this style. */\n  public get hasSubCategoryOverride(): boolean { return this._subCategoryOverrides.size > 0; }\n\n  /** The set of elements that the display style will exclude.\n   * @returns The set of excluded elements.\n   */\n  public get excludedElements(): Set<Id64String> { return this._excludedElements; }\n\n  /** Add an element to the set of excluded elements defined by the display style.\n   * @param id The ID of the element to be excluded.\n   */\n  public addExcludedElements(id: Id64String) {\n    if (Id64.isValid(id)) {\n      if (undefined === this._json.excludedElements)\n        this._json.excludedElements = [];\n      this._json.excludedElements.push(id);\n      this._excludedElements.add(id);\n    }\n  }\n\n  /** Remove an element from the set of excluded elements defined by the display style.\n   * @param id The ID of the element to be removed from the set of excluded elements.\n   */\n  public dropExcludedElement(id: Id64String) {\n    if (this._json.excludedElements !== undefined) {\n      const index = this._json.excludedElements.indexOf(id);\n      if (index > -1)\n        this._json.excludedElements.splice(index, 1);\n      if (this._json.excludedElements.length === 0)\n        this._json.excludedElements = undefined;\n    }\n    this._excludedElements.delete(id);\n  }\n\n  /** @internal */\n  public toJSON(): DisplayStyleSettingsProps { return this._json; }\n\n  private findIndexOfSubCategoryOverrideInJSON(id: Id64String, allowAppend: boolean): number {\n    const ovrsArray = JsonUtils.asArray(this._json.subCategoryOvr);\n    if (undefined === ovrsArray) {\n      if (allowAppend) {\n        this._json.subCategoryOvr = [];\n        return 0;\n      } else {\n        return -1;\n      }\n    } else {\n      for (let i = 0; i < ovrsArray.length; i++) {\n        if (ovrsArray[i].subCategory === id)\n          return i;\n      }\n\n      return allowAppend ? ovrsArray.length : -1;\n    }\n  }\n\n  private changeSubCategoryOverride(id: Id64String, updateJson: boolean, ovr?: SubCategoryOverride): void {\n    if (undefined === ovr) {\n      // undefined => drop the override if present.\n      this._subCategoryOverrides.delete(id);\n      if (updateJson) {\n        const index = this.findIndexOfSubCategoryOverrideInJSON(id, false);\n        if (-1 !== index)\n          this._json.subCategoryOvr!.splice(index, 1);\n      }\n    } else {\n      // add override, or update if present.\n      this._subCategoryOverrides.set(id, ovr);\n      if (updateJson) {\n        const index = this.findIndexOfSubCategoryOverrideInJSON(id, true);\n        this._json.subCategoryOvr![index] = ovr.toJSON();\n        this._json.subCategoryOvr![index].subCategory = id;\n      }\n    }\n  }\n\n  /** @internal */\n  public equalSubCategoryOverrides(other: DisplayStyleSettings): boolean {\n    if (this._subCategoryOverrides.size !== other._subCategoryOverrides.size)\n      return false;\n\n    for (const [key, value] of this._subCategoryOverrides.entries()) {\n      const otherValue = other._subCategoryOverrides.get(key);\n      if (undefined === otherValue || !value.equals(otherValue))\n        return false;\n    }\n\n    return true;\n  }\n}\n\n/** Provides access to the settings defined by a [[DisplayStyle3d]] or [[DisplayStyle3dState]], and ensures that\n * the style's JSON properties are kept in sync.\n * @beta\n */\nexport class DisplayStyle3dSettings extends DisplayStyleSettings {\n  private _hline: HiddenLine.Settings;\n  private _ao: AmbientOcclusion.Settings;\n  private _solarShadows: SolarShadows.Settings;\n  private get _json3d(): DisplayStyle3dSettingsProps { return this._json as DisplayStyle3dSettingsProps; }\n\n  public constructor(jsonProperties: { styles?: DisplayStyle3dSettingsProps }) {\n    super(jsonProperties);\n    this._hline = HiddenLine.Settings.fromJSON(this._json3d.hline);\n    this._ao = AmbientOcclusion.Settings.fromJSON(this._json3d.ao);\n    this._solarShadows = SolarShadows.Settings.fromJSON(this._json3d.solarShadows);\n  }\n\n  /** @internal */\n  public toJSON(): DisplayStyle3dSettingsProps { return this._json3d; }\n\n  /** The settings that control how visible and hidden edges are displayed.\n   * @note Do not modify the settings in place. Clone them and pass the clone to the setter.\n   */\n  public get hiddenLineSettings(): HiddenLine.Settings { return this._hline; }\n  public set hiddenLineSettings(hline: HiddenLine.Settings) {\n    this._hline = hline;\n    this._json3d.hline = hline.toJSON();\n  }\n\n  /** The settings that control how ambient occlusion is displayed.\n   * @note Do not modify the settings in place. Clone them and pass the clone to the setter.\n   */\n  public get ambientOcclusionSettings(): AmbientOcclusion.Settings { return this._ao; }\n  public set ambientOcclusionSettings(ao: AmbientOcclusion.Settings) {\n    this._ao = ao;\n    this._json3d.ao = ao.toJSON();\n  }\n\n  /** The settings that control how solar shadows are displayed.\n   * @note Do not modify the settings in place. Clone them and pass the clone to the setter.\n   */\n  public get solarShadowsSettings(): SolarShadows.Settings { return this._solarShadows; }\n  public set solarShadowsSettings(solarShadows: SolarShadows.Settings) {\n    this._solarShadows = solarShadows;\n    this._json3d.solarShadows = solarShadows.toJSON();\n  }\n  /** @internal */\n  public get environment(): EnvironmentProps {\n    const env = this._json3d.environment;\n    return undefined !== env ? env : {};\n  }\n\n  /** @internal */\n  public set environment(environment: EnvironmentProps) { this._json3d.environment = environment; }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Geometry */\n\nimport { Point2d, Point3d, YawPitchRollAngles, Matrix3d, Transform, YawPitchRollProps, XYZProps, AngleProps, XYProps, Angle, Geometry } from \"@bentley/geometry-core\";\nimport { ColorDef, ColorDefProps } from \"../ColorDef\";\nimport { Id64, Id64String } from \"@bentley/bentleyjs-core\";\n\n/** @public */\nexport namespace AreaPattern {\n  /** Single hatch line definition */\n  export interface HatchDefLineProps {\n    /** Angle of hatch line, 0.0 if undefined */\n    angle?: AngleProps;\n    /** Origin point (relative to placement) the hatch passes through, 0.0,0.0 if undefined */\n    through?: XYProps;\n    /** Offset of successive lines. X offset staggers dashes (ignored for solid lines) and Y offset controls the distance between both solid and dashed lines, 0.0,0.0 if undefined */\n    offset?: XYProps;\n    /** Array of gap and dash lengths for creating non-solid hatch lines, max of 20. A positive value denotes dash, a negative value a gap, solid line if undefined */\n    dashes?: number[];\n  }\n\n  export class HatchDefLine implements HatchDefLineProps {\n    public angle?: Angle;\n    public through?: Point2d;\n    public offset?: Point2d;\n    public dashes?: number[];\n\n    public constructor(json: HatchDefLineProps) {\n      this.angle = json.angle ? Angle.fromJSON(json.angle) : undefined;\n      this.through = json.through ? Point2d.fromJSON(json.through) : undefined;\n      this.offset = json.offset ? Point2d.fromJSON(json.offset) : undefined;\n      if (json.dashes) {\n        const dashes: number[] = [];\n        json.dashes.forEach((dash) => dashes.push(dash));\n        this.dashes = dashes;\n      }\n    }\n  }\n\n  /** Definition of a hatch, cross-hatch, or area pattern that can be applied to the interior of a planar region.\n   * @see [[GeometryStreamEntryProps]]\n   */\n  export interface ParamsProps {\n    /** Pattern offset (relative to placement), 0.0,0.0,0.0 if undefined */\n    origin?: XYZProps;\n    /** Pattern orientation (relative to placement), 0.0,0.0,0.0 if undefined */\n    rotation?: YawPitchRollProps;\n    /** Spacing of first set of parallel lines in a hatch pattern, or row spacing between area pattern tiles, 0.0 if undefined */\n    space1?: number;\n    /** Spacing of second set of parallel lines in a cross-hatch (leave undefined or 0 for a hatch), or column spacing between area pattern tiles, 0.0 if undefined */\n    space2?: number;\n    /** Angle of first set of parallel lines in a hatch pattern or area pattern tile direction, 0.0 if undefined */\n    angle1?: AngleProps;\n    /** Angle of second set of parallel lines in a cross-hatch, 0.0 if undefined */\n    angle2?: AngleProps;\n    /** Scale to apply to area pattern symbol, 1.0 if undefined */\n    scale?: number;\n    /** Pattern color, leave undefined to inherit color from parent element. For area patterns, does not override explicit colors stored in symbol */\n    color?: ColorDefProps;\n    /** Pattern weight, leave undefined to inherit weight from parent element. For area patterns, does not override explicit weights stored in symbol */\n    weight?: number;\n    /** Set to inhibit display of pattern boundary, not applicable when boundary is also filled, false if undefined */\n    invisibleBoundary?: boolean;\n    /** Set to allow snapping to pattern geometry, false if undefined */\n    snappable?: boolean;\n    /** [[GeometryPart]] id to use for tiled area pattern display */\n    symbolId?: Id64String;\n    /** Define an area pattern by supplying hatch line definitions instead of using a [[GeometryPart]] */\n    defLines?: HatchDefLineProps[];\n  }\n\n  /** Defines a hatch, cross hatch, or area pattern. */\n  export class Params implements ParamsProps {\n    public origin?: Point3d;\n    public rotation?: YawPitchRollAngles;\n    public space1?: number;\n    public space2?: number;\n    public angle1?: Angle;\n    public angle2?: Angle;\n    public scale?: number;\n    public color?: ColorDef;\n    public weight?: number;\n    public invisibleBoundary?: boolean;\n    public snappable?: boolean;\n    public symbolId?: Id64String;\n    public defLines?: HatchDefLine[];\n\n    /** create an AreaPattern.Params from a json object. */\n    public static fromJSON(json?: ParamsProps) {\n      const result = new Params();\n      if (!json)\n        return result;\n      result.origin = json.origin ? Point3d.fromJSON(json.origin) : undefined;\n      result.rotation = json.rotation ? YawPitchRollAngles.fromJSON(json.rotation) : undefined;\n      result.space1 = json.space1;\n      result.space2 = json.space2;\n      result.angle1 = json.angle1 ? Angle.fromJSON(json.angle1) : undefined;\n      result.angle2 = json.angle2 ? Angle.fromJSON(json.angle2) : undefined;\n      result.scale = json.scale;\n      result.color = json.color ? ColorDef.fromJSON(json.color) : undefined;\n      result.weight = json.weight;\n      result.invisibleBoundary = json.invisibleBoundary;\n      result.snappable = json.snappable;\n      result.symbolId = json.symbolId ? Id64.fromJSON(json.symbolId) : undefined;\n      if (!json.defLines)\n        return result;\n      const defLines: HatchDefLine[] = [];\n      json.defLines.forEach((defLine) => defLines.push(new HatchDefLine(defLine)));\n      result.defLines = defLines;\n      return result;\n    }\n\n    public clone(): Params {\n      return Params.fromJSON(this);\n    }\n\n    public equals(other: Params): boolean {\n      if (this === other)\n        return true;    // Same pointer\n\n      if (this.scale !== other.scale ||\n        this.space1 !== other.space1 ||\n        this.space2 !== other.space2 ||\n        this.weight !== other.weight ||\n        this.invisibleBoundary !== other.invisibleBoundary ||\n        this.snappable !== other.snappable)\n        return false;\n\n      if ((this.color === undefined) !== (other.color === undefined))\n        return false;\n      if (this.color && !this.color.equals(other.color!))\n        return false;\n\n      if ((this.angle1 === undefined) !== (other.angle1 === undefined))\n        return false;\n      if (this.angle1 && !this.angle1.isAlmostEqualNoPeriodShift(other.angle1!))\n        return false;\n\n      if ((this.angle2 === undefined) !== (other.angle2 === undefined))\n        return false;\n      if (this.angle2 && !this.angle2.isAlmostEqualNoPeriodShift(other.angle2!))\n        return false;\n\n      if ((this.origin === undefined) !== (other.origin === undefined))\n        return false;\n      if (this.origin && !this.origin.isAlmostEqual(other.origin!))\n        return false;\n\n      if ((this.rotation === undefined) !== (other.rotation === undefined))\n        return false;\n      if (this.rotation && !this.rotation.isAlmostEqual(other.rotation!))\n        return false;\n\n      if ((this.symbolId === undefined) !== (other.symbolId === undefined))\n        return false;\n      if (this.symbolId && !(this.symbolId === other.symbolId!))\n        return false;\n\n      if ((this.defLines === undefined) !== (other.defLines === undefined))\n        return false;\n      if (this.defLines) {\n        if (this.defLines.length !== other.defLines!.length)\n          return false;\n\n        for (let i = 0; i < this.defLines.length; ++i) {\n          const otherLine = other.defLines![i];\n          const thisLine = this.defLines[i];\n\n          if ((thisLine.angle === undefined) !== (otherLine.angle === undefined))\n            return false;\n          if (thisLine.angle && !thisLine.angle.isAlmostEqualNoPeriodShift(otherLine.angle!))\n            return false;\n\n          if ((thisLine.through === undefined) !== (otherLine.through === undefined))\n            return false;\n          if (thisLine.through && !thisLine.through.isAlmostEqual(otherLine.through!))\n            return false;\n\n          if ((thisLine.offset === undefined) !== (otherLine.offset === undefined))\n            return false;\n          if (thisLine.offset && !thisLine.offset.isAlmostEqual(otherLine.offset!))\n            return false;\n\n          if ((thisLine.dashes === undefined) !== (otherLine.dashes === undefined))\n            return false;\n          if (thisLine.dashes && thisLine.dashes.length !== otherLine.dashes!.length)\n            return false;\n          if (thisLine.dashes) {\n            for (let dash = 0; dash < thisLine.dashes.length; ++dash) {\n              if (!Geometry.isSameCoordinate(thisLine.dashes[dash], otherLine.dashes![dash]))\n                return false;\n            }\n          }\n        }\n      }\n      return true;\n    }\n\n    public static transformPatternSpace(transform: Transform, oldSpace: number, patRot: Matrix3d, angle?: Angle): number {\n      let tmpRot: Matrix3d;\n      if (angle && !angle.isAlmostZero) {\n        const yprTriple = new YawPitchRollAngles(angle);\n        const angRot = yprTriple.toMatrix3d();\n        tmpRot = patRot.multiplyMatrixMatrix(angRot);\n      } else {\n        tmpRot = patRot;\n      }\n      const yDir = tmpRot.getColumn(1);\n      yDir.scale(oldSpace, yDir);\n      transform.multiplyVector(yDir, yDir);\n      return yDir.magnitude();\n    }\n\n    public static getTransformPatternScale(transform: Transform): number {\n      const xDir = transform.matrix.getColumn(0);\n      const mag = xDir.magnitude();\n      return (mag > 1.0e-10) ? mag : 1.0;\n    }\n\n    public applyTransform(transform: Transform): boolean {\n      if (transform.isIdentity)\n        return true;\n      const origin = this.origin ? this.origin : Point3d.createZero();\n      const rMatrix = this.rotation ? this.rotation.toMatrix3d() : Matrix3d.createIdentity();\n      if (this.symbolId !== undefined) {\n        this.space1 = Params.transformPatternSpace(transform, this.space1 ? this.space1 : 0.0, rMatrix, this.angle1);\n        this.space2 = Params.transformPatternSpace(transform, this.space2 ? this.space2 : 0.0, rMatrix, this.angle2);\n        const scale = Params.getTransformPatternScale(transform);\n        this.scale = this.scale ? this.scale *= scale : scale;\n      } else if (this.defLines) {\n        const scale = Params.getTransformPatternScale(transform);\n        if (!Geometry.isSameCoordinate(scale, 1.0)) {\n          this.scale = this.scale ? this.scale *= scale : scale;\n          for (const line of this.defLines) {\n            if (line.through) {\n              line.through.x *= scale;\n              line.through.y *= scale;\n            }\n            if (line.offset) {\n              line.offset.x *= scale;\n              line.offset.y *= scale;\n            }\n            if (line.dashes) {\n              for (let iDash = 0; iDash < line.dashes.length; iDash++)\n                line.dashes[iDash] *= scale;\n            }\n          }\n        }\n      } else {\n        this.space1 = Params.transformPatternSpace(transform, this.space1 ? this.space1 : 0.0, rMatrix, this.angle1);\n        if (this.space2 && 0 !== this.space2)\n          this.space2 = Params.transformPatternSpace(transform, this.space2, rMatrix, this.angle2);\n      }\n\n      transform.multiplyPoint3d(origin);\n      rMatrix.multiplyMatrixMatrix(transform.matrix, rMatrix);\n      const normalized = Matrix3d.createRigidFromMatrix3d(rMatrix);\n      if (!normalized)\n        return false;\n      const newRotation = YawPitchRollAngles.createFromMatrix3d(normalized);\n      if (undefined === newRotation)\n        return false;\n      this.origin = origin;\n      this.rotation = newRotation;\n      return true;\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Geometry */\n\nimport { Angle, Point3d, Range1d, Range2d, Range3d, Transform, Vector3d, XYAndZ, XYZ } from \"@bentley/geometry-core\";\n\n// portions adapted from Cesium.js Copyright 2011 - 2017 Cesium Contributors\n\n/** @public */\nexport interface LatAndLong { longitude: number; latitude: number; }\n\n/** @public */\nexport interface LatLongAndHeight extends LatAndLong { height: number; }\n\n/** A position on the earth defined by longitude, latitude, and height above the [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System) ellipsoid.\n * @public\n */\nexport class Cartographic implements LatLongAndHeight {\n  /**\n   * @param longitude longitude, in radians.\n   * @param latitude latitude, in radians.\n   * @param height The height, in meters, above the ellipsoid.\n   */\n  constructor(public longitude: number = 0, public latitude: number = 0, public height: number = 0) { }\n\n  /** Create a new Cartographic from longitude and latitude specified in radians.\n   * @param longitude longitude, in radians.\n   * @param latitude latitude, in radians.\n   * @param height The height, in meters, above the ellipsoid.\n   * @param result The object onto which to store the result.\n   */\n  public static fromRadians(longitude: number, latitude: number, height: number = 0, result?: Cartographic) {\n    if (!result)\n      return new Cartographic(longitude, latitude, height);\n\n    result.longitude = longitude;\n    result.latitude = latitude;\n    result.height = height;\n    return result;\n  }\n\n  /** Create a new Cartographic from longitude and latitude specified in degrees. The values in the resulting object will be in radians.\n   * @param longitude longitude, in degrees.\n   * @param latitude latitude, in degrees.\n   * @param height The height, in meters, above the ellipsoid.\n   * @param result The object onto which to store the result.\n   */\n  public static fromDegrees(longitude: number, latitude: number, height: number, result?: Cartographic) {\n    return Cartographic.fromRadians(Angle.degreesToRadians(longitude), Angle.degreesToRadians(latitude), height, result);\n  }\n\n  /** Create a new Cartographic from longitude and latitude in [Angle]($geometry)s. The values in the resulting object will be in radians.\n   * @param longitude longitude.\n   * @param latitude latitude.\n   * @param height The height, in meters, above the ellipsoid.\n   * @param result The object into which to store the result (optional)\n   */\n  public static fromAngles(longitude: Angle, latitude: Angle, height: number, result?: Cartographic) {\n    return Cartographic.fromRadians(longitude.radians, latitude.radians, height, result);\n  }\n\n  private static _cartesianToCartographicN = new Point3d();\n  private static _cartesianToCartographicP = new Point3d();\n  private static _cartesianToCartographicH = new Vector3d();\n  private static _wgs84OneOverRadii = new Point3d(1.0 / 6378137.0, 1.0 / 6378137.0, 1.0 / 6356752.3142451793);\n  private static _wgs84OneOverRadiiSquared = new Point3d(1.0 / (6378137.0 * 6378137.0), 1.0 / (6378137.0 * 6378137.0), 1.0 / (6356752.3142451793 * 6356752.3142451793));\n  private static _wgs84RadiiSquared = new Point3d(6378137.0 * 6378137.0, 6378137.0 * 6378137.0, 6356752.3142451793 * 6356752.3142451793);\n  private static _wgs84CenterToleranceSquared = 0.1;\n  private static _scratchN = new Vector3d();\n  private static _scratchK = new Vector3d();\n\n  /** Creates a new Cartographic from an [ECEF](https://en.wikipedia.org/wiki/ECEF) position.\n   * @param cartesian The position, in ECEF, to convert to cartographic representation.\n   * @param [result] The object onto which to store the result.\n   * @returns The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\n   */\n  public static fromEcef(cartesian: Point3d, result?: Cartographic): Cartographic | undefined {\n    const oneOverRadii = Cartographic._wgs84OneOverRadii;\n    const oneOverRadiiSquared = Cartographic._wgs84OneOverRadiiSquared;\n    const centerToleranceSquared = Cartographic._wgs84CenterToleranceSquared;\n    const p = Cartographic.scaleToGeodeticSurface(cartesian, oneOverRadii, oneOverRadiiSquared, centerToleranceSquared, Cartographic._cartesianToCartographicP);\n\n    if (!p)\n      return undefined;\n\n    const n = Cartographic._cartesianToCartographicN;\n    Cartographic.multiplyComponents(p, oneOverRadiiSquared, n);\n    Cartographic.normalize(n, n);\n\n    const h = p.vectorTo(cartesian, Cartographic._cartesianToCartographicH);\n    const longitude = Math.atan2(n.y, n.x);\n    const latitude = Math.asin(n.z);\n    const height = Math.sign(h.dotProduct(cartesian)) * h.magnitude();\n\n    if (!result)\n      return new Cartographic(longitude, latitude, height);\n\n    result.longitude = longitude;\n    result.latitude = latitude;\n    result.height = height;\n    return result;\n  }\n\n  /** Duplicates a Cartographic. */\n  public clone(result?: Cartographic): Cartographic {\n    if (!result)\n      return new Cartographic(this.longitude, this.latitude, this.height);\n\n    result.longitude = this.longitude;\n    result.latitude = this.latitude;\n    result.height = this.height;\n    return result;\n  }\n\n  /** Return true if this Cartographic is the same as right */\n  public equals(right: LatLongAndHeight): boolean {\n    return (this === right) ||\n      ((this.longitude === right.longitude) &&\n        (this.latitude === right.latitude) &&\n        (this.height === right.height));\n  }\n\n  /** Compares this Cartographic component-wise and returns true if they are within the provided epsilon, */\n  public equalsEpsilon(right: LatLongAndHeight, epsilon: number): boolean {\n    return (this === right) ||\n      ((Math.abs(this.longitude - right.longitude) <= epsilon) &&\n        (Math.abs(this.latitude - right.latitude) <= epsilon) &&\n        (Math.abs(this.height - right.height) <= epsilon));\n  }\n\n  private static normalize(cartesian: XYZ, result: XYZ) {\n    const magnitude = cartesian.magnitude();\n    result.x = cartesian.x / magnitude;\n    result.y = cartesian.y / magnitude;\n    result.z = cartesian.z / magnitude;\n  }\n\n  private static multiplyComponents(left: XYAndZ, right: XYAndZ, result: XYZ) {\n    result.x = left.x * right.x;\n    result.y = left.y * right.y;\n    result.z = left.z * right.z;\n  }\n\n  private static scalePoint(cartesian: XYAndZ, scalar: number, result: XYZ) {\n    result.x = cartesian.x * scalar;\n    result.y = cartesian.y * scalar;\n    result.z = cartesian.z * scalar;\n  }\n\n  private static addPoints(left: XYAndZ, right: XYAndZ, result: XYZ) {\n    result.x = left.x + right.x;\n    result.y = left.y + right.y;\n    result.z = left.z + right.z;\n  }\n\n  /** Create a string representing this cartographic in the format '(longitude, latitude, height)'. */\n  public toString(): string { return \"(\" + this.longitude + \", \" + this.latitude + \", \" + this.height + \")\"; }\n\n  private static _scaleToGeodeticSurfaceIntersection = new Point3d();\n  private static _scaleToGeodeticSurfaceGradient = new Point3d();\n  private static scaleToGeodeticSurface(cartesian: Point3d, oneOverRadii: XYAndZ, oneOverRadiiSquared: XYAndZ, centerToleranceSquared: number, result?: Point3d) {\n    const positionX = cartesian.x;\n    const positionY = cartesian.y;\n    const positionZ = cartesian.z;\n\n    const oneOverRadiiX = oneOverRadii.x;\n    const oneOverRadiiY = oneOverRadii.y;\n    const oneOverRadiiZ = oneOverRadii.z;\n\n    const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\n    const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\n    const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\n\n    // Compute the squared ellipsoid norm.\n    const squaredNorm = x2 + y2 + z2;\n    const ratio = Math.sqrt(1.0 / squaredNorm);\n\n    // As an initial approximation, assume that the radial intersection is the projection point.\n    const intersection = Cartographic._scaleToGeodeticSurfaceIntersection;\n    Cartographic.scalePoint(cartesian, ratio, intersection);\n\n    // If the position is near the center, the iteration will not converge.\n    if (squaredNorm < centerToleranceSquared) {\n      return !isFinite(ratio) ? undefined : Point3d.createFrom(intersection, result);\n    }\n\n    const oneOverRadiiSquaredX = oneOverRadiiSquared.x;\n    const oneOverRadiiSquaredY = oneOverRadiiSquared.y;\n    const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\n\n    // Use the gradient at the intersection point in place of the true unit normal.\n    // The difference in magnitude will be absorbed in the multiplier.\n    const gradient = Cartographic._scaleToGeodeticSurfaceGradient;\n    gradient.x = intersection.x * oneOverRadiiSquaredX * 2.0;\n    gradient.y = intersection.y * oneOverRadiiSquaredY * 2.0;\n    gradient.z = intersection.z * oneOverRadiiSquaredZ * 2.0;\n\n    // Compute the initial guess at the normal vector multiplier, lambda.\n    let lambda = (1.0 - ratio) * cartesian.magnitude() / (0.5 * gradient.magnitude());\n    let correction = 0.0;\n    let func;\n    let denominator;\n    let xMultiplier;\n    let yMultiplier;\n    let zMultiplier;\n    let xMultiplier2;\n    let yMultiplier2;\n    let zMultiplier2;\n    let xMultiplier3;\n    let yMultiplier3;\n    let zMultiplier3;\n\n    do {\n      lambda -= correction;\n\n      xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\n      yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\n      zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\n\n      xMultiplier2 = xMultiplier * xMultiplier;\n      yMultiplier2 = yMultiplier * yMultiplier;\n      zMultiplier2 = zMultiplier * zMultiplier;\n\n      xMultiplier3 = xMultiplier2 * xMultiplier;\n      yMultiplier3 = yMultiplier2 * yMultiplier;\n      zMultiplier3 = zMultiplier2 * zMultiplier;\n\n      func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\n\n      // \"denominator\" here refers to the use of this expression in the velocity and acceleration\n      // computations in the sections to follow.\n      denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;\n\n      const derivative = -2.0 * denominator;\n\n      correction = func / derivative;\n    } while (Math.abs(func) > 0.01);\n\n    if (!result)\n      return new Point3d(positionX * xMultiplier, positionY * yMultiplier, positionZ * zMultiplier);\n\n    result.x = positionX * xMultiplier;\n    result.y = positionY * yMultiplier;\n    result.z = positionZ * zMultiplier;\n    return result;\n  }\n\n  /** Return an ECEF point from a Cartographic point */\n  public toEcef(result?: Point3d): Point3d {\n    const cosLatitude = Math.cos(this.latitude);\n    const scratchN = Cartographic._scratchN;\n    const scratchK = Cartographic._scratchK;\n    scratchN.x = cosLatitude * Math.cos(this.longitude);\n    scratchN.y = cosLatitude * Math.sin(this.longitude);\n    scratchN.z = Math.sin(this.latitude);\n    Cartographic.normalize(scratchN, scratchN);\n\n    Cartographic.multiplyComponents(Cartographic._wgs84RadiiSquared, scratchN, scratchK);\n    const gamma = Math.sqrt(scratchN.dotProduct(scratchK));\n    Cartographic.scalePoint(scratchK, 1.0 / gamma, scratchK);\n    Cartographic.scalePoint(scratchN, this.height, scratchN);\n\n    result = result ? result : new Point3d();\n    Cartographic.addPoints(scratchK, scratchN, result);\n    return result;\n  }\n}\n/** A cartographic range representing a rectangular region if low longitude/latitude > high then area crossing seam is indicated.\n * @public\n */\nexport class CartographicRange {\n  private _ranges: Range2d[];\n\n  // These following are used to preserve the min/max latitude and longitudes.\n  // The longitudes are raw values and may cross over the -PI or 2PI boundaries.\n  private _minLongitude: number = 0;\n  private _maxLongitude: number = 0;\n  private _minLatitude: number = 0;\n  private _maxLatitude: number = 0;\n  constructor(spatialRange: Range3d, spatialToEcef: Transform) {\n\n    const ecefRange = spatialToEcef.multiplyRange(spatialRange);\n\n    const low = Cartographic.fromEcef(ecefRange.low)!;\n    const high = Cartographic.fromEcef(ecefRange.high)!;\n\n    const longitudeRanges = [];\n    this._minLongitude = Math.min(low.longitude, high.longitude), this._maxLongitude = Math.max(low.longitude, high.longitude);\n    if (this._maxLongitude - this._minLongitude > Angle.piRadians) {\n      longitudeRanges.push(Range1d.createXX(0.0, this._minLongitude));\n      longitudeRanges.push(Range1d.createXX(this._maxLongitude, Angle.pi2Radians));\n    } else {\n      longitudeRanges.push(Range1d.createXX(this._minLongitude, this._maxLongitude));\n    }\n\n    this._ranges = [];\n    for (const longitudeRange of longitudeRanges) {\n      this._minLatitude = Math.min(low.latitude, high.latitude), this._maxLatitude = Math.max(low.latitude, high.latitude);\n      if (this._maxLatitude - this._minLatitude > Angle.piOver2Radians) {\n        this._ranges.push(Range2d.createXYXY(longitudeRange.low, 0.0, longitudeRange.high, this._minLatitude));\n        this._ranges.push(Range2d.createXYXY(longitudeRange.low, this._maxLatitude, longitudeRange.high, Angle.piRadians));\n      } else {\n        this._ranges.push(Range2d.createXYXY(longitudeRange.low, this._minLatitude, longitudeRange.high, this._maxLatitude));\n      }\n    }\n  }\n\n  public intersectsRange(other: CartographicRange): boolean {\n    for (const range of this._ranges)\n      for (const otherRange of other._ranges)\n        if (range.intersectsRange(otherRange))\n          return true;\n    return false;\n  }\n\n  /** This method returns the raw latitude / longitude for the range in a Range2d object.\n   * The X value represents the longitude and the Y value the latitudes.\n   * Y values are kept conscribed between -PI and +PI while\n   * longitude values can be expressed in any range between -2PI to +2PI\n   * given the minimum longitude is always smaller numerically than the maximum longitude.\n   * Note that usually the longitudes are usually by convention in the range of -PI to PI except\n   * for ranges that overlap the -PI/+PI frontier in which case either representation is acceptable.\n   */\n  public getLongitudeLatitudeBoundingBox(): Range2d {\n    return Range2d.createXYXY(this._minLongitude, this._minLatitude, this._maxLongitude, this._maxLatitude);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Geometry */\n\nimport {\n  Point2d, Point3d, Vector3d, YawPitchRollAngles, YawPitchRollProps, Transform, Matrix3d, Angle,\n  GeometryQuery, XYZProps, LowAndHighXYZ, Range3d, TransformProps, IModelJson as GeomJson,\n} from \"@bentley/geometry-core\";\n\nimport { Id64, Id64String, IModelStatus } from \"@bentley/bentleyjs-core\";\nimport { ColorDef, ColorDefProps } from \"../ColorDef\";\nimport { GeometryClass, GeometryParams, FillDisplay, BackgroundFill, Gradient } from \"../Render\";\nimport { TextStringProps, TextString } from \"./TextString\";\nimport { LineStyle } from \"./LineStyle\";\nimport { AreaPattern } from \"./AreaPattern\";\nimport { GeometricElement3dProps, GeometricElement2dProps, GeometryPartProps } from \"../ElementProps\";\nimport { IModelError } from \"../IModelError\";\n\n/** Establish a non-default [[SubCategory]] or to override [[SubCategoryAppearance]] for the geometry that follows.\n * A GeometryAppearanceProps always signifies a reset to the [[SubCategoryAppearance]] for subsequent [[GeometryStreamProps]] entries for undefined values.\n * @see [[GeometryStreamEntryProps]]\n * @public\n */\nexport interface GeometryAppearanceProps {\n  /** Optional [[SubCategory]] id for subsequent geometry. Use to create a GeometryStream with geometry that is not on the default [[SubCategory]] for the element's [[Category]] or is has geometry on multiple subCategories. */\n  subCategory?: Id64String;\n  /** Optional color to override [[SubCategoryAppearance.color]] for subsequent geometry. */\n  color?: ColorDefProps;\n  /** Optional weight to override [[SubCategoryAppearance.weight]] for subsequent geometry. */\n  weight?: number;\n  /** Optional style to override [[SubCategoryAppearance.styleId]] for subsequent geometry. */\n  style?: Id64String;\n  /** Optional transparency, 0.0 if undefined. Effective transparency is a combination of this value and [[SubCategoryAppearance.color]]. */\n  transparency?: number;\n  /** Optional display priority (2d only), 0 if undefined. Effective display priority is a combination of this value and [[SubCategoryAppearance.priority]]. */\n  displayPriority?: number;\n  /** Optional GeometryClass (for DGN compatibility, subCategories preferred), [[GeometryClass.Primary]] if undefined.\n   * @alpha\n   */\n  geometryClass?: GeometryClass;\n}\n\n/** Add a [[gradient]], [[backgroundFill]], or solid [[color]] fill to subsequent planar regions (or meshes).\n * Only one value among [[gradient]], [[backgroundFill]], and [[color]] should be set.\n * @see [[GeometryStreamEntryProps]]\n * @public\n */\nexport interface AreaFillProps {\n  /** Fill display type, must be set to something other than [[FillDisplay.Never]] to display fill */\n  display: FillDisplay;\n  /** Optional fill transparency, will be the same as outline transparency if undefined. Allows for different fill and outline transparencies */\n  transparency?: number;\n  /** Set fill color to view background color. Use [[BackgroundFill.Solid]] for an opaque fill and [[BackgroundFill.Outline]] to display an outline using the line color */\n  backgroundFill?: BackgroundFill;\n  /** Set fill color to a specific color. If the fill color the same as the line color, it is an opaque fill, otherwise it is an outline fill */\n  color?: ColorDefProps;\n  /** Set fill using gradient properties\n   * @beta\n   */\n  gradient?: Gradient.SymbProps;\n}\n\n/** Override [[SubCategoryAppearance.materialId]] for subsequent surface and solid geometry.\n * @see [[GeometryStreamEntryProps]]\n * @public\n */\nexport interface MaterialProps {\n  /** Material id to use, specify an invalid [[Id64]] to override [[SubCategoryAppearance.materialId]] with no material. */\n  materialId?: Id64String;\n  /** @internal */\n  origin?: XYZProps;\n  /** @internal */\n  size?: XYZProps;\n  /** @internal */\n  rotation?: YawPitchRollProps;\n}\n\n/** @beta */\nexport namespace BRepEntity {\n  /** Enum for type of solid kernel entity this represents */\n  export enum Type {\n    /** Body consisting of at least one solid region */\n    Solid = 0,\n    /** Body consisting of connected sets of faces having edges that are shared by a maximum of two faces */\n    Sheet = 1,\n    /** Body consisting of connected sets of edges having vertices that are shared by a maximum of two edges */\n    Wire = 2,\n  }\n\n  /** Optional symbology that can be assigned to individual faces of a solid or sheet body */\n  export interface FaceSymbologyProps {\n    /** Optional color override for face */\n    color?: ColorDefProps;\n    /** Optional transparency override for face */\n    transparency?: number;\n    /** Optional material override for face */\n    materialId?: Id64String;\n  }\n\n  /** Geometry entry representing raw brep data.\n   * @see [[GeometryStreamEntryProps]]\n   */\n  export interface DataProps {\n    /** data as Base64 encoded string. Must be specifically requested using [[ElementLoadProps.wantBRepData]]. */\n    data?: string;\n    /** body type, default is Solid */\n    type?: Type;\n    /** body transform, default is identity */\n    transform?: TransformProps;\n    /** body face attachments */\n    faceSymbology?: FaceSymbologyProps[];\n  }\n}\n\n/** Add a reference to a [[GeometryPart]] from the GeometryStream of a [[GeometricElement]].\n * @see [[GeometryStreamEntryProps]]\n * @public\n */\nexport interface GeometryPartInstanceProps {\n  /** GeometryPart id */\n  part: Id64String;\n  /** Optional translation relative to element's placement, 0.0,0.0,0.0 if undefined. For a 2d element/translation, supply non-zero x and y only */\n  origin?: XYZProps;\n  /** Optional rotation relative to element's placement, 0.0,0.0,0.0 if undefined. For a 2d element/rotation, supply a non-zero yaw angle only */\n  rotation?: YawPitchRollProps;\n  /** Optional scale to apply to part, 1.0 if undefined */\n  scale?: number;\n}\n\n/** Allowed GeometryStream entries - should only set one value.\n * @see [GeometryStream]($docs/learning/common/geometrystream.md)\n * @public\n */\nexport interface GeometryStreamEntryProps extends GeomJson.GeometryProps {\n  appearance?: GeometryAppearanceProps;\n  styleMod?: LineStyle.ModifierProps;\n  fill?: AreaFillProps;\n  pattern?: AreaPattern.ParamsProps;\n  material?: MaterialProps;\n  geomPart?: GeometryPartInstanceProps;\n  textString?: TextStringProps;\n  /** @beta */\n  brep?: BRepEntity.DataProps;\n  subRange?: LowAndHighXYZ;\n}\n\n/** A [[GeometricElement]]'s GeometryStream is represented by an array of [[GeometryStreamEntryProps]].\n * @public\n */\nexport type GeometryStreamProps = GeometryStreamEntryProps[];\n\n/** GeometryStreamBuilder is a helper class for populating the [[GeometryStreamProps]] array needed to create a [[GeometricElement]] or [[GeometryPart]].\n * @public\n */\nexport class GeometryStreamBuilder {\n  /** Current inverse placement transform, used for converting world coordinate input to be placement relative */\n  private _worldToLocal?: Transform;\n  /** GeometryStream entries */\n  public readonly geometryStream: GeometryStreamProps = [];\n\n  /** Supply optional local to world transform. Used to transform world coordinate input relative to element placement.\n   * For a [[GeometricElement]]'s placement to be meaningful, world coordinate geometry should never be appended to an element with an identity placement.\n   * Can be called with undefined or identity transform to start appending geometry supplied in local coordinates again.\n   */\n  public setLocalToWorld(localToWorld?: Transform) {\n    this._worldToLocal = (undefined === localToWorld || localToWorld.isIdentity ? undefined : localToWorld.inverse());\n  }\n\n  /** Supply local to world transform from a Point3d and optional YawPitchRollAngles.\n   * @see [[Placement3d]]\n   */\n  public setLocalToWorld3d(origin: Point3d, angles: YawPitchRollAngles = YawPitchRollAngles.createDegrees(0.0, 0.0, 0.0)) {\n    this.setLocalToWorld(Transform.createOriginAndMatrix(origin, angles.toMatrix3d()));\n  }\n\n  /** Supply local to world transform from a Point2d and optional Angle.\n   * @see [[Placement2d]]\n   */\n  public setLocalToWorld2d(origin: Point2d, angle: Angle = Angle.createDegrees(0.0)) {\n    this.setLocalToWorld(Transform.createOriginAndMatrix(Point3d.createFrom(origin), Matrix3d.createRotationAroundVector(Vector3d.unitZ(), angle)!));\n  }\n\n  /** Store local ranges in GeometryStream for all subsequent geometry appended. Can improve performance of range testing for elements with a GeometryStream\n   * containing more than one [[GeometryQuery]] differentiable by range. Not useful for a single [[GeometryQuery]] as its range and that of the [[GeometricElement]] are the same.\n   * Ignored when defining a [[GeometryPart]] and not needed when only appending [[GeometryPart]] instances to a [[GeometricElement]] as these store their own range.\n   */\n  public appendGeometryRanges() {\n    this.geometryStream.push({ subRange: Range3d.createNull() });\n  }\n\n  /** Change [[SubCategory]] or reset to [[SubCategoryAppearance]] for subsequent geometry.\n   *  An invalid sub-category id can be supplied to force a reset to the current [[SubCategoryAppearance]].\n   *  It is not valid to change the sub-category when defining a [[GeometryPart]]. A [[GeometryPart]] inherit the symbology of their instance for anything not explicitly overridden.\n   */\n  public appendSubCategoryChange(subCategoryId: Id64String): boolean {\n    this.geometryStream.push({ appearance: { subCategory: subCategoryId } });\n    return true;\n  }\n\n  /** Change [[GeometryParams]] for subsequent geometry.\n   *  It is not valid to change the sub-category when defining a [[GeometryPart]]. A [[GeometryPart]] inherits the symbology of their instance for anything not explicitly overridden.\n   */\n  public appendGeometryParamsChange(geomParams: GeometryParams): boolean {\n    const appearance: GeometryAppearanceProps = {\n      subCategory: geomParams.subCategoryId,\n      color: geomParams.lineColor,\n      weight: geomParams.weight,\n      style: geomParams.styleInfo ? geomParams.styleInfo!.styleId : undefined,\n      transparency: geomParams.elmTransparency,\n      displayPriority: geomParams.elmPriority,\n      geometryClass: geomParams.geometryClass,\n    };\n    this.geometryStream.push({ appearance });\n\n    if (undefined !== geomParams.materialId)\n      this.geometryStream.push({ material: { materialId: geomParams.materialId } });\n\n    if (undefined !== geomParams.fillDisplay && FillDisplay.Never !== geomParams.fillDisplay) {\n      const fill: AreaFillProps = {\n        display: geomParams.fillDisplay,\n        transparency: geomParams.fillTransparency,\n      };\n      if (undefined !== geomParams.gradient && Gradient.Mode.None !== geomParams.gradient.mode)\n        fill.gradient = geomParams.gradient.clone();\n      else if (undefined !== geomParams.backgroundFill && BackgroundFill.None !== geomParams.backgroundFill)\n        fill.backgroundFill = geomParams.backgroundFill;\n      else if (undefined !== geomParams.fillColor)\n        fill.color = geomParams.fillColor;\n      this.geometryStream.push({ fill });\n    }\n\n    if (undefined !== geomParams.pattern) {\n      const localPattern = geomParams.pattern.clone();\n      if (undefined !== this._worldToLocal && !localPattern.applyTransform(this._worldToLocal))\n        return false;\n      this.geometryStream.push({ pattern: localPattern });\n    }\n\n    if (undefined !== geomParams.styleInfo && undefined !== geomParams.styleInfo.styleMod) {\n      const localStyleMod = new LineStyle.Modifier(geomParams.styleInfo.styleMod);\n      if (undefined !== this._worldToLocal && !localStyleMod.applyTransform(this._worldToLocal))\n        return false;\n      this.geometryStream.push({ styleMod: localStyleMod });\n    }\n\n    return true;\n  }\n\n  /** Append a [[GeometryPart]] instance with relative position, orientation, and scale to a [[GeometryStreamProps]] array for creating a [[GeometricElement3d]].\n   *  Not valid when defining a [[GeometryPart]] as nesting of parts is not supported.\n   */\n  public appendGeometryPart3d(partId: Id64String, instanceOrigin?: Point3d, instanceRotation?: YawPitchRollAngles, instanceScale?: number): boolean {\n    if (undefined === this._worldToLocal) {\n      this.geometryStream.push({ geomPart: { part: partId, origin: instanceOrigin, rotation: instanceRotation, scale: instanceScale } });\n      return true;\n    }\n    const partTrans = Transform.createOriginAndMatrix(instanceOrigin, instanceRotation ? instanceRotation.toMatrix3d() : Matrix3d.createIdentity());\n    if (undefined !== instanceScale)\n      partTrans.matrix.scaleColumnsInPlace(instanceScale, instanceScale, instanceScale);\n    const resultTrans = partTrans.multiplyTransformTransform(this._worldToLocal);\n    const scales = new Vector3d();\n    if (!resultTrans.matrix.normalizeColumnsInPlace(scales))\n      return false;\n    const newRotation = YawPitchRollAngles.createFromMatrix3d(resultTrans.matrix);\n    if (undefined === newRotation)\n      return false;\n    this.geometryStream.push({ geomPart: { part: partId, origin: resultTrans.getOrigin(), rotation: newRotation, scale: scales.x } });\n    return true;\n  }\n\n  /** Append a [[GeometryPart]] instance with relative position, orientation, and scale to a [[GeometryStreamProps]] array for creating a [[GeometricElement2d]].\n   *  Not valid when defining a [[GeometryPart]] as nesting of parts is not supported.\n   */\n  public appendGeometryPart2d(partId: Id64String, instanceOrigin?: Point2d, instanceRotation?: Angle, instanceScale?: number): boolean {\n    return this.appendGeometryPart3d(partId, instanceOrigin ? Point3d.createFrom(instanceOrigin) : undefined, instanceRotation ? new YawPitchRollAngles(instanceRotation) : undefined, instanceScale);\n  }\n\n  /** Append a [[TextString]] supplied in either local or world coordinates to the [[GeometryStreamProps]] array */\n  public appendTextString(textString: TextString): boolean {\n    if (undefined === this._worldToLocal) {\n      this.geometryStream.push({ textString });\n      return true;\n    }\n    const localTextString = new TextString(textString);\n    if (!localTextString.transformInPlace(this._worldToLocal))\n      return false;\n    this.geometryStream.push({ textString: localTextString });\n    return true;\n  }\n\n  /** Append a [[GeometryQuery]] supplied in either local or world coordinates to the [[GeometryStreamProps]] array */\n  public appendGeometry(geometry: GeometryQuery): boolean {\n    if (undefined === this._worldToLocal) {\n      const geomData = GeomJson.Writer.toIModelJson(geometry);\n      if (undefined === geomData)\n        return false;\n      this.geometryStream.push(geomData);\n      return true;\n    }\n    const localGeometry = geometry.cloneTransformed(this._worldToLocal);\n    if (undefined === localGeometry)\n      return false;\n    const localGeomData = GeomJson.Writer.toIModelJson(localGeometry);\n    if (undefined === localGeomData)\n      return false;\n    this.geometryStream.push(localGeomData);\n    return true;\n  }\n\n  /** Append [[BRepEntity.DataProps]] supplied in either local or world coordinates to the [[GeometryStreamProps]] array\n   * @beta\n   */\n  public appendBRepData(brep: BRepEntity.DataProps): boolean {\n    if (undefined === this._worldToLocal) {\n      this.geometryStream.push({ brep });\n      return true;\n    }\n    const entityTrans = Transform.fromJSON(brep.transform);\n    const localTrans = entityTrans.multiplyTransformTransform(this._worldToLocal);\n    const localBrep: BRepEntity.DataProps = {\n      data: brep.data,\n      type: brep.type,\n      transform: localTrans.isIdentity ? undefined : localTrans,\n      faceSymbology: brep.faceSymbology,\n    };\n    this.geometryStream.push({ brep: localBrep });\n    return true;\n  }\n}\n\n/** Holds current state information for [[GeometryStreamIterator]]\n * @public\n */\nexport class GeometryStreamIteratorEntry {\n  /** A [[GeometryParams]] representing the appearance of the current geometric entry */\n  public geomParams: GeometryParams;\n  /** Placement transform, used for converting placement relative, local coordinate entries to world */\n  public localToWorld?: Transform;\n  /** Optional stored local range for the current geometric entry */\n  public localRange?: Range3d;\n  /** Optional [[GeometryPart]] instance transform when current entry is for a [[GeometryPart]] */\n  public partToLocal?: Transform;\n  /** Current iterator entry is a [[GeometryPart]] instance when partId is not undefined */\n  public partId?: Id64String;\n  /** Current iterator entry is a [[GeometryQuery]] when geometryQuery is not undefined */\n  public geometryQuery?: GeometryQuery;\n  /** Current iterator entry is a [[TextString]] when textString is not undefined */\n  public textString?: TextString;\n  /** Current iterator entry is a [[BRepEntity.DataProps]] when brep is not undefined\n   * @beta\n   */\n  public brep?: BRepEntity.DataProps;\n\n  public constructor(category?: Id64String) {\n    this.geomParams = new GeometryParams(category !== undefined ? category : Id64.invalid);\n  }\n}\n\n/** GeometryStreamIterator is a helper class for iterating a [[GeometryStreamProps]].\n * A [[GeometricElement]]'s GeometryStream must be specifically requested using [[ElementLoadProps.wantGeometry]].\n * @public\n */\nexport class GeometryStreamIterator implements IterableIterator<GeometryStreamIteratorEntry> {\n  /** GeometryStream entries */\n  public geometryStream: GeometryStreamProps;\n  /** Current entry information */\n  public entry: GeometryStreamIteratorEntry;\n  /** Current entry position */\n  private _index = 0;\n\n  /** Construct a new GeometryStreamIterator given a [[GeometryStreamProps]] from either a [[GeometricElement3d]], [[GeometricElement2d]], or [[GeometryPart]].\n   * Supply the [[GeometricElement]]'s category to initialize the appearance information for each geometric entry.\n   */\n  public constructor(geometryStream: GeometryStreamProps, category?: Id64String) {\n    this.geometryStream = geometryStream;\n    this.entry = new GeometryStreamIteratorEntry(category !== undefined ? category : Id64.invalid);\n  }\n\n  /** Supply optional local to world transform. Used to transform entries that are stored relative to the element placement and return them in world coordinates. */\n  public setLocalToWorld(localToWorld?: Transform) {\n    this.entry.localToWorld = (undefined === localToWorld || localToWorld.isIdentity ? undefined : localToWorld.clone());\n  }\n\n  /** Supply local to world transform from Point3d and optional YawPitchRollAngles.\n   * @see [[Placement3d]]\n   */\n  public setLocalToWorld3d(origin: Point3d, angles: YawPitchRollAngles = YawPitchRollAngles.createDegrees(0.0, 0.0, 0.0)) {\n    this.setLocalToWorld(Transform.createOriginAndMatrix(origin, angles.toMatrix3d()));\n  }\n\n  /** Supply local to world transform from Point2d and optional Angle.\n   * @see [[Placement2d]]\n   */\n  public setLocalToWorld2d(origin: Point2d, angle: Angle = Angle.createDegrees(0.0)) {\n    this.setLocalToWorld(Transform.createOriginAndMatrix(Point3d.createFrom(origin), Matrix3d.createRotationAroundVector(Vector3d.unitZ(), angle)!));\n  }\n\n  /** Create a new GeometryStream iterator for a [[GeometricElement3d]].\n   * If [[GeometricElement3dProps.placement]] is not undefined, placement relative entries will be returned transformed to world coordinates.\n   * @throws [[IModelError]] if element.geom is undefined.\n   */\n  public static fromGeometricElement3d(element: GeometricElement3dProps) {\n    if (element.geom === undefined)\n      throw new IModelError(IModelStatus.NoGeometry, \"GeometricElement has no geometry or geometry wasn't requested\");\n    const result = new GeometryStreamIterator(element.geom, element.category);\n    if (element.placement !== undefined)\n      result.setLocalToWorld3d(Point3d.fromJSON(element.placement.origin), YawPitchRollAngles.fromJSON(element.placement.angles));\n    return result;\n  }\n\n  /** Create a new GeometryStream iterator for a [[GeometricElement2d]].\n   * If [[GeometricElement2dProps.placement]] is not undefined, placement relative entries will be returned transformed to world coordinates.\n   * @throws [[IModelError]] if element.geom is undefined.\n   */\n  public static fromGeometricElement2d(element: GeometricElement2dProps) {\n    if (element.geom === undefined)\n      throw new IModelError(IModelStatus.NoGeometry, \"GeometricElement has no geometry or geometry wasn't requested\");\n    const result = new GeometryStreamIterator(element.geom, element.category);\n    if (element.placement !== undefined)\n      result.setLocalToWorld2d(Point2d.fromJSON(element.placement.origin), Angle.fromJSON(element.placement.angle));\n    return result;\n  }\n\n  /** Create a new GeometryStream iterator for a [[GeometryPart]].\n   * To iterate a part's GeometryStream in the context of a part instance found for a [[GeometricElement]], provide the optional [[GeometryParams]] and Transform from the [[GeometricElement]]'s [[GeometryStreamIterator]].\n   * Supply the [[GeometryParams]] to return appearance information as inherited from the [[GeometricElement]].\n   * Supply the partToWorld transform to return the part geometry in world coordinates.\n   * Supply the partToLocal transform to return the part geometry relative to the [[GeometricElement]]'s placement.\n   * @throws [[IModelError]] if geomPart.geom is undefined.\n   */\n  public static fromGeometryPart(geomPart: GeometryPartProps, geomParams?: GeometryParams, partTransform?: Transform) {\n    if (geomPart.geom === undefined)\n      throw new IModelError(IModelStatus.NoGeometry, \"GeometryPart has no geometry or geometry wasn't requested\");\n    const result = new GeometryStreamIterator(geomPart.geom);\n    if (geomParams !== undefined)\n      result.entry.geomParams = geomParams.clone();\n    if (partTransform !== undefined)\n      result.setLocalToWorld(partTransform);\n    return result;\n  }\n\n  /** Get the transform that if applied to a [[GeometryPart]]'s GeometryStream entries would return them in world coordinates. */\n  public partToWorld(): Transform | undefined {\n    if (this.entry.localToWorld === undefined || this.entry.partToLocal === undefined)\n      return this.entry.localToWorld;\n    return this.entry.partToLocal.multiplyTransformTransform(this.entry.localToWorld);\n  }\n\n  /** Advance to next displayable geometric entry while updating the current [[GeometryParams]] from appearance related entries.\n   * Geometric entries are [[TextString]], [[GeometryQuery]], [[GeometryPart]], and [[BRepEntity.DataProps]].\n   */\n  public next(): IteratorResult<GeometryStreamIteratorEntry> {\n    this.entry.partToLocal = this.entry.partId = this.entry.geometryQuery = this.entry.textString = this.entry.brep = undefined; // NOTE: localRange remains valid until new subRange entry is encountered\n    while (this._index < this.geometryStream.length) {\n      const entry = this.geometryStream[this._index++];\n      if (entry.appearance) {\n        this.entry.geomParams.resetAppearance();\n        if (entry.appearance.subCategory)\n          this.entry.geomParams.subCategoryId = Id64.fromJSON(entry.appearance.subCategory);\n        if (entry.appearance.color)\n          this.entry.geomParams.lineColor = new ColorDef(entry.appearance.color);\n        if (entry.appearance.weight)\n          this.entry.geomParams.weight = entry.appearance.weight;\n        if (entry.appearance.style)\n          this.entry.geomParams.styleInfo = new LineStyle.Info(Id64.fromJSON(entry.appearance.style));\n        if (entry.appearance.transparency)\n          this.entry.geomParams.elmTransparency = entry.appearance.transparency;\n        if (entry.appearance.displayPriority)\n          this.entry.geomParams.elmPriority = entry.appearance.displayPriority;\n        if (entry.appearance.geometryClass)\n          this.entry.geomParams.geometryClass = entry.appearance.geometryClass;\n      } else if (entry.styleMod) {\n        if (this.entry.geomParams.styleInfo === undefined)\n          continue;\n        const styleMod = new LineStyle.Modifier(entry.styleMod);\n        if (this.entry.localToWorld !== undefined)\n          styleMod.applyTransform(this.entry.localToWorld);\n        this.entry.geomParams.styleInfo = new LineStyle.Info(this.entry.geomParams.styleInfo.styleId, styleMod);\n      } else if (entry.fill) {\n        if (entry.fill.display)\n          this.entry.geomParams.fillDisplay = entry.fill.display;\n        if (entry.fill.transparency)\n          this.entry.geomParams.fillTransparency = entry.fill.transparency;\n        if (entry.fill.gradient)\n          this.entry.geomParams.gradient = Gradient.Symb.fromJSON(entry.fill.gradient);\n        else if (entry.fill.backgroundFill)\n          this.entry.geomParams.backgroundFill = entry.fill.backgroundFill;\n        else if (entry.fill.color)\n          this.entry.geomParams.fillColor = new ColorDef(entry.fill.color);\n      } else if (entry.pattern) {\n        const params = AreaPattern.Params.fromJSON(entry.pattern);\n        if (this.entry.localToWorld !== undefined)\n          params.applyTransform(this.entry.localToWorld);\n        this.entry.geomParams.pattern = params;\n      } else if (entry.material) {\n        if (entry.material.materialId)\n          this.entry.geomParams.materialId = Id64.fromJSON(entry.material.materialId);\n      } else if (entry.subRange) {\n        this.entry.localRange = Range3d.fromJSON(entry.subRange);\n      } else if (entry.geomPart) {\n        this.entry.partId = Id64.fromJSON(entry.geomPart.part);\n        if (entry.geomPart.origin !== undefined || entry.geomPart.rotation !== undefined || entry.geomPart.scale !== undefined) {\n          const origin = entry.geomPart.origin ? Point3d.fromJSON(entry.geomPart.origin) : Point3d.createZero();\n          const rotation = entry.geomPart.rotation ? YawPitchRollAngles.fromJSON(entry.geomPart.rotation).toMatrix3d() : Matrix3d.createIdentity();\n          this.entry.partToLocal = Transform.createRefs(origin, rotation);\n          if (entry.geomPart.scale)\n            this.entry.partToLocal.multiplyTransformTransform(Transform.createRefs(Point3d.createZero(), Matrix3d.createUniformScale(entry.geomPart.scale)), this.entry.partToLocal);\n        }\n        return { value: this.entry, done: false };\n      } else if (entry.textString) {\n        this.entry.textString = new TextString(entry.textString);\n        if (this.entry.localToWorld !== undefined)\n          this.entry.textString.transformInPlace(this.entry.localToWorld);\n        return { value: this.entry, done: false };\n      } else if (entry.brep) {\n        this.entry.brep = entry.brep;\n        if (this.entry.localToWorld !== undefined) {\n          const entityTrans = Transform.fromJSON(entry.brep.transform);\n          this.entry.brep.transform = entityTrans.multiplyTransformTransform(this.entry.localToWorld);\n        }\n        return { value: this.entry, done: false };\n      } else {\n        this.entry.geometryQuery = GeomJson.Reader.parse(entry);\n        if (this.entry.geometryQuery === undefined)\n          continue;\n        if (this.entry.localToWorld !== undefined)\n          this.entry.geometryQuery.tryTransformInPlace(this.entry.localToWorld);\n        return { value: this.entry, done: false };\n      }\n    }\n    return { value: this.entry, done: true };\n  }\n\n  public [Symbol.iterator](): IterableIterator<GeometryStreamIteratorEntry> {\n    return this;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Symbology */\n\nimport { Vector3d, XYZProps, YawPitchRollProps, YawPitchRollAngles, Transform } from \"@bentley/geometry-core\";\nimport { Id64String } from \"@bentley/bentleyjs-core\";\n\n/** @public */\nexport namespace LineStyle {\n\n  /** Modify the line style appearance without changing the line style definition.\n   * Applies to the style previously established by a [[GeometryAppearanceProps]] or current [[SubCategoryAppearance]].\n   * Most of the modifiers affect the line style stroke pattern, with the orientation and scales being the exception.\n   * @see [[GeometryStreamEntryProps]]\n   */\n  export interface ModifierProps {\n    /** Optional scale to apply to all length values, 1.0 if undefined */\n    scale?: number;\n    /** Optional scale to apply to scalable dashes, 1.0 if undefined */\n    dashScale?: number;\n    /** Optional scale to apply to scalable gaps, 1.0 if undefined */\n    gapScale?: number;\n    /** Optional start width in meters to apply to dashes, no width if undefined */\n    startWidth?: number;\n    /** Optional end width in meters to apply to dashes, same as startWidth if undefined */\n    endWidth?: number;\n    /** Optional shift by distance in meters, 0.0 if undefined */\n    distPhase?: number;\n    /** Optional shift by fraction, 0.0 if undefined */\n    fractPhase?: number;\n    /** Optional flag to center stroke pattern and stretch ends, false if undefined */\n    centerPhase?: boolean;\n    /** Optional flag to enable or disable single segment mode */\n    segmentMode?: boolean;\n    /** Optional flag that denotes startWidth and endWidth represent physical widths that should not be affected by scale, false if undefined */\n    physicalWidth?: boolean;\n    /** Optional up vector for style (applicable to 3d only), 0.0,0.0,1.0 if undefined */\n    normal?: XYZProps;\n    /** Optional orientation for style (applicable to 3d only), 0.0,0.0,0.0 if undefined */\n    rotation?: YawPitchRollProps;\n  }\n\n  /** Optional modifiers to override line style definition */\n  export class Modifier implements ModifierProps {\n    public scale?: number;\n    public dashScale?: number;\n    public gapScale?: number;\n    public startWidth?: number;\n    public endWidth?: number;\n    public distPhase?: number;\n    public fractPhase?: number;\n    public centerPhase?: boolean;\n    public segmentMode?: boolean;\n    public physicalWidth?: boolean;\n    public normal?: Vector3d;\n    public rotation?: YawPitchRollAngles;\n\n    /** constructor for LineStyle.Modifier */\n    constructor(props: ModifierProps) {\n      this.scale = props.scale;\n      this.dashScale = props.dashScale;\n      this.gapScale = props.gapScale;\n      this.startWidth = props.startWidth;\n      this.endWidth = props.endWidth;\n      this.distPhase = props.distPhase;\n      this.fractPhase = props.fractPhase;\n      this.centerPhase = props.centerPhase;\n      this.segmentMode = props.segmentMode;\n      this.physicalWidth = props.physicalWidth;\n      this.normal = props.normal ? Vector3d.fromJSON(props.normal) : undefined;\n      this.rotation = props.rotation ? YawPitchRollAngles.fromJSON(props.rotation) : undefined;\n    }\n\n    /** Returns a deep copy of this object. */\n    public clone() {\n      return new Modifier(this);\n    }\n\n    /** Compare two LineStyle.Modifier for equivalence */\n    public equals(other: Modifier): boolean {\n      if (this === other)   // same pointer\n        return true;\n\n      if (other.scale !== this.scale ||\n        other.dashScale !== this.dashScale ||\n        other.gapScale !== this.gapScale ||\n        other.startWidth !== this.startWidth ||\n        other.endWidth !== this.endWidth ||\n        other.distPhase !== this.distPhase ||\n        other.fractPhase !== this.fractPhase ||\n        other.centerPhase !== this.centerPhase ||\n        other.segmentMode !== this.segmentMode ||\n        other.physicalWidth !== this.physicalWidth)\n        return false;\n\n      if ((this.normal === undefined) !== (other.normal === undefined))\n        return false;\n      if (this.normal && !this.normal.isAlmostEqual(other.normal!))\n        return false;\n\n      if ((this.rotation === undefined) !== (other.rotation === undefined))\n        return false;\n      if (this.rotation && !this.rotation.isAlmostEqual(other.rotation!))\n        return false;\n\n      return true;\n    }\n\n    public applyTransform(transform: Transform): boolean {\n      if (transform.isIdentity)\n        return true;\n      if (this.normal) {\n        transform.matrix.multiplyVector(this.normal, this.normal);\n        const normalized = this.normal.normalize();\n        if (normalized)\n          this.normal.setFrom(normalized);\n        else\n          return false;\n      }\n      if (this.rotation) {\n        const newTransform = this.rotation.toMatrix3d().multiplyMatrixTransform(transform);\n        const scales = new Vector3d();\n        if (!newTransform.matrix.normalizeColumnsInPlace(scales))\n          return false;\n        const newRotation = YawPitchRollAngles.createFromMatrix3d(newTransform.matrix);\n        if (undefined === newRotation)\n          return false;\n        this.rotation.setFrom(newRotation);\n      }\n\n      let scaleFactor = 1.0;\n      const scaleVector = Vector3d.create();\n      const scaleMatrix = transform.matrix;\n      scaleMatrix.normalizeRowsInPlace(scaleVector);\n\n      // Check for flatten transform, dividing scaleVector by 3 gives wrong scaleFactor\n      if (scaleVector.x !== 0.0 && scaleVector.y !== 0.0 && scaleVector.z !== 0.0)\n        scaleFactor = (scaleVector.x + scaleVector.y + scaleVector.z) / 3.0;\n      else\n        scaleFactor = (scaleVector.x + scaleVector.y + scaleVector.z) / 2.0;\n\n      if (1.0 === scaleFactor)\n        return true;\n\n      if (this.scale)\n        this.scale *= scaleFactor;\n\n      if (this.physicalWidth)\n        return true;\n\n      if (this.startWidth)\n        this.startWidth *= scaleFactor;\n\n      if (this.endWidth)\n        this.endWidth *= scaleFactor;\n\n      return true;\n    }\n  }\n\n  /** Line style id and optional modifiers to override line style definition */\n  export class Info {\n    public styleId: Id64String;\n    public styleMod?: Modifier; // Optional modifiers to override line style definition\n\n    /** Creates a LineStyle.Info object */\n    constructor(styleId: Id64String, styleMod?: Modifier) {\n      this.styleId = styleId;\n      this.styleMod = styleMod;\n    }\n\n    /** Returns a deep copy of this object. */\n    public clone(): Info {\n      return new Info(this.styleId, this.styleMod ? this.styleMod.clone() : undefined);\n    }\n\n    public equals(other: Info): boolean {\n      if (this === other)\n        return true;\n      if (this.styleId !== other.styleId)\n        return false;\n      if ((this.styleMod === undefined) !== (other.styleMod === undefined))\n        return false;\n      if (this.styleMod && !this.styleMod.equals(other.styleMod!))\n        return false;\n      return true;\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Geometry */\n\nimport { Angle, Constant, Matrix3d, Point2d, Point3d, Range2d, Range3d, Transform, Vector3d, YawPitchRollAngles, Range3dProps } from \"@bentley/geometry-core\";\nimport { Placement2dProps, Placement3dProps } from \"../ElementProps\";\nimport { Frustum } from \"../Frustum\";\n\n/** A Range3d that is aligned with the axes of spatial coordinates.\n * @public\n */\nexport type AxisAlignedBox3d = Range3d;\n\n/** The properties of a Range3d.\n * @public\n */\nexport type AxisAlignedBox3dProps = Range3dProps;\n\n/** A bounding box aligned to the orientation of a 3d Element\n * @public\n */\nexport type ElementAlignedBox3d = Range3d;\n\n/** A bounding box aligned to the orientation of a 2d Element\n * @public\n */\nexport type ElementAlignedBox2d = Range2d;\n\n/** A bounding box aligned to a local coordinate system\n * @public\n */\nexport type LocalAlignedBox3d = Range3d;\n\n/** The placement of a GeometricElement3d. This includes the origin, orientation, and size (bounding box) of the element.\n * All geometry of a GeometricElement are relative to its placement.\n * @public\n */\nexport class Placement3d implements Placement3dProps {\n  public constructor(public origin: Point3d, public angles: YawPitchRollAngles, public bbox: ElementAlignedBox3d) { }\n  /** Get the rotation from local coordinates of this placement to world coordinates. */\n  public get rotation(): Matrix3d { return this.angles.toMatrix3d(); }\n  /** Get the transform from local coordinates of this placement to world coordinates. */\n  public get transform(): Transform { return Transform.createOriginAndMatrix(this.origin, this.rotation); }\n\n  /** Create a new Placement3d from a Placement3dProps. */\n  public static fromJSON(json?: Placement3dProps): Placement3d {\n    const props: any = json ? json : {};\n    return new Placement3d(Point3d.fromJSON(props.origin), YawPitchRollAngles.fromJSON(props.angles), Range3d.fromJSON<ElementAlignedBox3d>(props.bbox));\n  }\n\n  /** Get the 8 corners, in world coordinates, of this placement. */\n  public getWorldCorners(out?: Frustum): Frustum {\n    const frust = Frustum.fromRange(this.bbox, out);\n    frust.multiply(this.transform);\n    return frust;\n  }\n\n  /** Set the contents of this Placement3d from another Placement3d */\n  public setFrom(other: Placement3d) {\n    this.origin.setFrom(other.origin);\n    this.angles.setFrom(other.angles);\n    this.bbox.setFrom(other.bbox);\n  }\n\n  /** Determine whether this Placement3d is valid. */\n  public get isValid(): boolean { return !this.bbox.isNull && Math.max(this.origin.maxAbs(), this.bbox.maxAbs()) < Constant.circumferenceOfEarth; }\n\n  /** Calculate the axis-aligned bounding box for this placement. */\n  public calculateRange(): AxisAlignedBox3d {\n    const range = new Range3d();\n    if (!this.isValid)\n      return range;\n\n    this.transform.multiplyRange(this.bbox, range);\n\n    // low and high are not allowed to be equal\n    range.ensureMinLengths();\n    return range;\n  }\n}\n\n/** The placement of a GeometricElement2d. This includes the origin, rotation, and size (bounding box) of the element.\n * @public\n */\nexport class Placement2d implements Placement2dProps {\n  public constructor(public origin: Point2d, public angle: Angle, public bbox: ElementAlignedBox2d) { }\n  /** Get the rotation from local coordinates of this placement to world coordinates. */\n  public get rotation(): Matrix3d { return Matrix3d.createRotationAroundVector(Vector3d.unitZ(), this.angle)!; }\n  /** Get the transform from local coordinates of this placement to world coordinates. */\n  public get transform(): Transform { return Transform.createOriginAndMatrix(Point3d.createFrom(this.origin), this.rotation); }\n  /** Create a new Placement2d from a Placement2dProps. */\n  public static fromJSON(json?: Placement2dProps): Placement2d {\n    const props: any = json ? json : {};\n    return new Placement2d(Point2d.fromJSON(props.origin), Angle.fromJSON(props.angle), Range2d.fromJSON(props.bbox));\n  }\n\n  /** Get the 8 corners, in world coordinates, of this placement. */\n  public getWorldCorners(out?: Frustum): Frustum {\n    const frust = Frustum.fromRange(this.bbox, out);\n    frust.multiply(this.transform);\n    return frust;\n  }\n\n  /** Determine whether this Placement2d is valid. */\n  public get isValid(): boolean { return !this.bbox.isNull && Math.max(this.origin.maxAbs(), this.bbox.maxAbs()) < Constant.circumferenceOfEarth; }\n\n  /** Set the contents of this Placement3d from another Placement3d */\n  public setFrom(other: Placement2d) {\n    this.origin.setFrom(other.origin);\n    this.angle.setFrom(other.angle);\n    this.bbox.setFrom(other.bbox);\n  }\n\n  /** Calculate the axis-aligned bounding box for this placement. */\n  public calculateRange(): AxisAlignedBox3d {\n    const range = new Range3d();\n    if (!this.isValid)\n      return range;\n\n    this.transform.multiplyRange(Range3d.createRange2d(this.bbox, 0), range);\n\n    // low and high are not allowed to be equal\n    range.ensureMinLengths();\n    range.low.z = - 1.0;  // is the 2dFrustumDepth, which === 1 meter\n    range.high.z = 1.0;\n    return range;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Geometry */\n\nimport { XYZProps, Point3d, YawPitchRollAngles, YawPitchRollProps, Transform, Vector3d } from \"@bentley/geometry-core\";\n\n/** Properties for a TextString class.\n * @see [[GeometryStreamEntryProps]]\n * @public\n */\nexport interface TextStringProps {\n  /** text string */\n  text: string;\n  /** font number. Font numbers are mapped to font names and types via the FontMap */\n  font: number;\n  /* text height */\n  height: number;\n  /*  width / height ratio. Default is 1.0 */\n  widthFactor?: number;\n  /** bold text. Default is false */\n  bold?: boolean;\n  /** italic text. Default is false */\n  italic?: boolean;\n  /** underline text. Default is false */\n  underline?: boolean;\n  /** Optional position relative to element's placement. Default is 0,0,0 */\n  origin?: XYZProps;\n  /** Optional rotation relative to element's placement. Default is identity matrix */\n  rotation?: YawPitchRollProps;\n}\n\n/** A single line of text, all with the same font, styles (underline, bold, italic), and size.\n * This class also holds the origin and direction for the text.\n * A paragraph is composed of one or more instances of TextStrings.\n * @public\n */\nexport class TextString {\n  /** Text string */\n  public text: string;\n  /** font number. Font numbers are mapped to font names and types via the FontMap */\n  public font: number;\n  /* text height, in meters */\n  public height: number;\n  /*  width / height ratio. Default is 1.0 */\n  public widthFactor?: number;\n  /** bold text. Default is false */\n  public bold?: boolean;\n  /** italic text. Default is false */\n  public italic?: boolean;\n  /** underline text. Default is false */\n  public underline?: boolean;\n  /** position relative to element's placement */\n  public readonly origin: Point3d;\n  /** Rotation relative to element's placement */\n  public readonly rotation: YawPitchRollAngles;\n  public get width() { return this.height * (this.widthFactor ? this.widthFactor : 1.0); }\n\n  public constructor(props: TextStringProps) {\n    this.text = props.text;\n    this.font = props.font;\n    this.height = props.height;\n    this.widthFactor = props.widthFactor;\n    this.bold = props.bold;\n    this.italic = props.italic;\n    this.underline = props.underline;\n    this.origin = Point3d.fromJSON(props.origin);\n    this.rotation = YawPitchRollAngles.fromJSON(props.rotation);\n  }\n\n  public toJSON(): TextStringProps {\n    const val: any = {};\n    val.text = this.text;\n    val.font = this.font;\n    val.height = this.height;\n    val.widthFactor = this.widthFactor;\n    val.bold = this.bold;\n    val.italic = this.italic;\n    val.underline = this.underline;\n    if (!this.origin.isAlmostZero) val.origin = this.origin;\n    if (!this.rotation.isIdentity()) val.rotation = this.rotation;\n    return val;\n  }\n\n  public transformInPlace(transform: Transform): boolean {\n    const newOrigin = transform.multiplyPoint3d(this.origin, this.origin);\n    const newTransform = this.rotation.toMatrix3d().multiplyMatrixTransform(transform);\n    const scales = new Vector3d();\n    if (!newTransform.matrix.normalizeColumnsInPlace(scales))\n      return false;\n    const newRotation = YawPitchRollAngles.createFromMatrix3d(newTransform.matrix);\n    if (undefined === newRotation)\n      return false;\n    const newHeight = this.height * scales.y;\n    const newWidth = this.width * scales.x;\n    if (newHeight < 1.0e-10 || newWidth < 1.0e-10)\n      return false;\n    this.origin.setFrom(newOrigin);\n    this.rotation.setFrom(newRotation);\n    this.height = newHeight;\n    this.widthFactor = (newHeight === newWidth ? undefined : (newWidth / newHeight));\n    return true;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\nexport * from \"./Code\";\nexport * from \"./ColorDef\";\nexport * from \"./ECSqlTypes\";\nexport * from \"./ElementProps\";\nexport * from \"./EntityProps\";\nexport * from \"./FeatureGates\";\nexport * from \"./FeatureIndex\";\nexport * from \"./Frustum\";\nexport * from \"./Fonts\";\nexport * from \"./GeoCoordinateServices\";\nexport * from \"./RpcInterface\";\nexport * from \"./RpcManager\";\nexport * from \"./TextureProps\";\nexport * from \"./Image\";\nexport * from \"./IModel\";\nexport * from \"./IModelError\";\nexport * from \"./IModelVersion\";\nexport * from \"./Lighting\";\nexport * from \"./CommonLoggerCategory\";\nexport * from \"./MaterialProps\";\nexport * from \"./ModelProps\";\nexport * from \"./OctEncodedNormal\";\nexport * from \"./QPoint\";\nexport * from \"./SubCategoryAppearance\";\nexport * from \"./Snapping\";\nexport * from \"./TileProps\";\nexport * from \"./SpatialClassificationProps\";\nexport * from \"./Thumbnail\";\nexport * from \"./ViewProps\";\nexport * from \"./Render\";\nexport * from \"./Paging\";\nexport * from \"./RenderSchedule\";\nexport * from \"./ChangedElements\";\nexport * from \"./domains/FunctionalElementProps\";\nexport * from \"./domains/GenericElementProps\";\nexport * from \"./geometry/AreaPattern\";\nexport * from \"./geometry/Cartographic\";\nexport * from \"./geometry/GeometryStream\";\nexport * from \"./geometry/LineStyle\";\nexport * from \"./geometry/Placement\";\nexport * from \"./geometry/TextString\";\nexport * from \"./rpc/TestRpcManager\";\nexport * from \"./rpc/WipRpcInterface\";\nexport * from \"./rpc/DevToolsRpcInterface\";\nexport * from \"./rpc/core/RpcConstants\";\nexport * from \"./rpc/core/RpcConfiguration\";\nexport * from \"./rpc/core/RpcInvocation\";\nexport * from \"./rpc/core/RpcOperation\";\nexport * from \"./rpc/core/RpcProtocol\";\nexport * from \"./rpc/core/RpcRegistry\";\nexport * from \"./rpc/core/RpcRequest\";\nexport * from \"./rpc/core/RpcRequestContext\";\nexport * from \"./rpc/core/RpcControl\";\nexport * from \"./rpc/core/RpcMarshaling\";\nexport * from \"./rpc/core/RpcPendingQueue\";\nexport * from \"./rpc/electron/ElectronRpcManager\";\nexport * from \"./rpc/electron/ElectronRpcProtocol\";\nexport * from \"./rpc/electron/ElectronRpcRequest\";\nexport * from \"./rpc/mobile/MobileRpcManager\";\nexport * from \"./rpc/mobile/MobileRpcProtocol\";\nexport * from \"./rpc/mobile/MobileRpcRequest\";\nexport * from \"./rpc/web/BentleyCloudRpcManager\";\nexport * from \"./rpc/web/BentleyCloudRpcProtocol\";\nexport * from \"./rpc/web/OpenAPI\";\nexport * from \"./rpc/web/WebAppRpcProtocol\";\nexport * from \"./rpc/web/RpcMultipart\";\nexport * from \"./rpc/web/WebAppRpcRequest\";\nexport * from \"./rpc/mobile/MobileRpcManager\";\nexport * from \"./rpc/IModelReadRpcInterface\";\nexport * from \"./rpc/IModelTileRpcInterface\";\nexport * from \"./rpc/IModelWriteRpcInterface\";\nexport * from \"./rpc/SnapshotIModelRpcInterface\";\nexport * from \"./CloudStorage\";\nexport * from \"./CloudStorageTileCache\";\n\n// Set the version number so it can be found at runtime. BUILD_SEMVER is replaced at build time by the webpack DefinePlugin.\ndeclare var BUILD_SEMVER: string;\nif ((typeof (BUILD_SEMVER) !== \"undefined\") && (typeof window !== \"undefined\") && window) {\n  if (!(window as any).iModelJsVersions)\n    (window as any).iModelJsVersions = new Map<string, string>();\n  (window as any).iModelJsVersions.set(\"imodeljs-common\", BUILD_SEMVER);\n}\n\n/** @docs-package-description\n * The imodeljs-common package contains classes for working with iModels that can be used in both [frontend]($docs/learning/frontend/index.md) and [backend]($docs/learning/backend/index.md).\n */\n/**\n * @docs-group-description WireFormats\n * Definitions of the \"props\" interfaces and types that define the [wire format]($docs/learning/wireformat.md) for communication between the frontend and backend\n */\n/**\n * @docs-group-description Codes\n * Classes for working with [Codes]($docs/bis/intro/codes.md)\n */\n/**\n * @docs-group-description Geometry\n * Classes for working with geometry.\n */\n/**\n * @docs-group-description Views\n * Classes for working with views of models and elements.\n */\n/**\n * @docs-group-description Rendering\n * Classes for rendering geometry in views.\n */\n/**\n * @docs-group-description Symbology\n * Classes that affect the appearance of geometry in a view\n */\n/**\n * @docs-group-description iModels\n * Classes for working with [iModels]($docs/learning/IModels.md) in both the frontend and backend\n */\n/**\n * @docs-group-description RpcInterface\n * Classes for working with [RpcInterfaces]($docs/learning/RpcInterface.md).\n */\n/**\n * @docs-group-description ECSQL\n * Classes for working with [ECSQL]($docs/learning/ECSQL.md), [Spatial Queries]($docs/learning/SpatialQueries.md), and [ECSQL Geometry Functions]($docs/learning/GeometrySqlFuncs.md)\n */\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module RpcInterface */\r\n\r\nimport { RpcInterface } from \"../RpcInterface\";\r\nimport { RpcManager } from \"../RpcManager\";\r\nimport { LogLevel } from \"@bentley/bentleyjs-core\";\r\nimport { IModelTokenProps } from \"../IModel\";\r\n\r\n/** Options to get the backend statistics\r\n * @internal\r\n */\r\nexport enum DevToolsStatsOptions {\r\n  None = 0,\r\n\r\n  /** All unitized values are setup as formatted strings with the appropriate units */\r\n  FormatUnits = 1,\r\n}\r\n\r\n/** The purpose of this class is to house RPC methods for developer tools.\r\n * Note that this should NOT be used in production environments.\r\n * @internal\r\n */\r\nexport abstract class DevToolsRpcInterface extends RpcInterface {\r\n  /** Returns the IModelReadRpcInterface instance for the frontend. */\r\n  public static getClient(): DevToolsRpcInterface { return RpcManager.getClientForInterface(DevToolsRpcInterface); }\r\n\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"DevToolsRpcInterface\";\r\n\r\n  /** The semantic version of the interface.\r\n   * @note The DevToolsRpcInterface will remain at 0.x since it is for testing only and not intended for production.\r\n   */\r\n  public static interfaceVersion = \"0.4.0\";\r\n\r\n  /*===========================================================================================\r\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\r\n    NOTE: Please consult the README in this folder for the semantic versioning rules.\r\n  ==========================================================================================*/\r\n  // Sends a ping and returns true if the backend received the ping\r\n  public async ping(_iModelToken: IModelTokenProps): Promise<boolean> { return this.forward(arguments); }\r\n\r\n  // Returns JSON object with backend performance and memory statistics\r\n  public async stats(_iModelToken: IModelTokenProps, _options: DevToolsStatsOptions): Promise<any> { return this.forward(arguments); }\r\n\r\n  // Returns JSON object with backend versions (application and iModelJs)\r\n  public async versions(_iModelToken: IModelTokenProps): Promise<any> { return this.forward(arguments); }\r\n\r\n  // Sets a new log level for the specified category and returns the old log level\r\n  public async setLogLevel(_iModelToken: IModelTokenProps, _loggerCategory: string, _logLevel: LogLevel): Promise<LogLevel | undefined> { return this.forward(arguments); }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { Id64String } from \"@bentley/bentleyjs-core\";\nimport { Range3dProps } from \"@bentley/geometry-core\";\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\nimport { RpcNotFoundResponse } from \"./core/RpcControl\";\nimport { EntityQueryParams } from \"../EntityProps\";\nimport { IModelTokenProps, IModelProps } from \"../IModel\";\nimport { ModelProps } from \"../ModelProps\";\nimport { ElementProps } from \"../ElementProps\";\nimport { SnapRequestProps, SnapResponseProps } from \"../Snapping\";\nimport { IModelCoordinatesResponseProps, GeoCoordinatesResponseProps } from \"../GeoCoordinateServices\";\nimport { ViewStateProps } from \"../ViewProps\";\nimport { QueryPriority, QueryResponse, QueryLimit, QueryQuota } from \"../Paging\";\n\n/** Response if the IModelDb was not found at the backend\n * (if the service has moved)\n * @public\n */\nexport class IModelNotFoundResponse extends RpcNotFoundResponse {\n}\n\n/** The RPC interface for reading from an iModel.\n * All operations only require read-only access.\n * This interface is not normally used directly. See IModelConnection for higher-level and more convenient API for accessing iModels from a frontend.\n * @public\n */\nexport abstract class IModelReadRpcInterface extends RpcInterface {\n  /** Returns the IModelReadRpcInterface instance for the frontend. */\n  public static getClient(): IModelReadRpcInterface { return RpcManager.getClientForInterface(IModelReadRpcInterface); }\n\n  /** The immutable name of the interface. */\n  public static readonly interfaceName = \"IModelReadRpcInterface\";\n\n  /** The semantic version of the interface. */\n  public static interfaceVersion = \"1.0.0\";\n\n  /*===========================================================================================\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n    NOTE: Please consult the README in this folder for the semantic versioning rules.\n  ===========================================================================================*/\n  public async openForRead(_iModelToken: IModelTokenProps): Promise<IModelProps> { return this.forward(arguments); }\n  public async close(_iModelToken: IModelTokenProps): Promise<boolean> { return this.forward(arguments); }\n  public async queryRows(_iModelToken: IModelTokenProps, _ecsql: string, _bindings?: any[] | object, _limit?: QueryLimit, _quota?: QueryQuota, _priority?: QueryPriority): Promise<QueryResponse> { return this.forward(arguments); }\n  public async getModelProps(_iModelToken: IModelTokenProps, _modelIds: Id64String[]): Promise<ModelProps[]> { return this.forward(arguments); }\n  public async queryModelRanges(_iModelToken: IModelTokenProps, _modelIds: Id64String[]): Promise<Range3dProps[]> { return this.forward(arguments); }\n  public async queryModelProps(_iModelToken: IModelTokenProps, _params: EntityQueryParams): Promise<ModelProps[]> { return this.forward(arguments); }\n  public async getElementProps(_iModelToken: IModelTokenProps, _elementIds: Id64String[]): Promise<ElementProps[]> { return this.forward(arguments); }\n  public async queryElementProps(_iModelToken: IModelTokenProps, _params: EntityQueryParams): Promise<ElementProps[]> { return this.forward(arguments); }\n  public async queryEntityIds(_iModelToken: IModelTokenProps, _params: EntityQueryParams): Promise<Id64String[]> { return this.forward(arguments); }\n  public async getClassHierarchy(_iModelToken: IModelTokenProps, _startClassName: string): Promise<string[]> { return this.forward(arguments); }\n  public async getAllCodeSpecs(_iModelToken: IModelTokenProps): Promise<any[]> { return this.forward(arguments); }\n  public async getViewStateData(_iModelToken: IModelTokenProps, _viewDefinitionId: string): Promise<ViewStateProps> { return this.forward(arguments); }\n  public async readFontJson(_iModelToken: IModelTokenProps): Promise<any> { return this.forward(arguments); }\n  public async getToolTipMessage(_iModelToken: IModelTokenProps, _elementId: string): Promise<string[]> { return this.forward(arguments); }\n  public async getViewThumbnail(_iModelToken: IModelTokenProps, _viewId: string): Promise<Uint8Array> { return this.forward(arguments); }\n  public async getDefaultViewId(_iModelToken: IModelTokenProps): Promise<Id64String> { return this.forward(arguments); }\n  /** @beta */\n  public async requestSnap(_iModelToken: IModelTokenProps, _sessionId: string, _props: SnapRequestProps): Promise<SnapResponseProps> { return this.forward(arguments); }\n  /** @beta */\n  public async cancelSnap(_iModelToken: IModelTokenProps, _sessionId: string): Promise<void> { return this.forward(arguments); }\n  /** @beta */\n  public async getIModelCoordinatesFromGeoCoordinates(_iModelToken: IModelTokenProps, _props: string): Promise<IModelCoordinatesResponseProps> { return this.forward(arguments); }\n  /** @beta */\n  public async getGeoCoordinatesFromIModelCoordinates(_iModelToken: IModelTokenProps, _props: string): Promise<GeoCoordinatesResponseProps> { return this.forward(arguments); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { CloudStorageContainerDescriptor, CloudStorageContainerUrl } from \"../CloudStorage\";\nimport { CloudStorageTileCache } from \"../CloudStorageTileCache\";\nimport { IModelTokenProps, IModelToken } from \"../IModel\";\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\nimport { TileTreeProps } from \"../TileProps\";\n\n/** @public */\nexport abstract class IModelTileRpcInterface extends RpcInterface {\n  public static getClient(): IModelTileRpcInterface { return RpcManager.getClientForInterface(IModelTileRpcInterface); }\n\n  /** The immutable name of the interface. */\n  public static readonly interfaceName = \"IModelTileRpcInterface\";\n\n  /** The semantic version of the interface. */\n  public static interfaceVersion = \"1.0.0\";\n\n  /*===========================================================================================\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n    NOTE: Please consult the README in this folder for the semantic versioning rules.\n  ===========================================================================================*/\n\n  /** @beta */\n  public async getTileCacheContainerUrl(_tokenProps: IModelTokenProps, _id: CloudStorageContainerDescriptor): Promise<CloudStorageContainerUrl> {\n    return this.forward(arguments);\n  }\n\n  /** @internal */\n  public async requestTileTreeProps(_tokenProps: IModelTokenProps, _id: string): Promise<TileTreeProps> { return this.forward(arguments); }\n  /** @internal */\n  public async requestTileContent(iModelToken: IModelTokenProps, treeId: string, contentId: string): Promise<Uint8Array> {\n    const cached = await IModelTileRpcInterface.checkCache(iModelToken, treeId, contentId);\n    return cached || this.forward(arguments);\n  }\n\n  private static async checkCache(tokenProps: IModelTokenProps, treeId: string, contentId: string): Promise<Uint8Array | undefined> {\n    const iModelToken = IModelToken.fromJSON(tokenProps);\n    const cached = await CloudStorageTileCache.getCache().retrieve({ iModelToken, treeId, contentId });\n    if (cached) {\n      return cached;\n    }\n\n    return undefined;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\nimport { IModelProps, IModelTokenProps } from \"../IModel\";\nimport { AxisAlignedBox3dProps } from \"../geometry/Placement\";\n\n/** The RPC interface for writing to an iModel.\n * All operations require read+write access.\n * This interface is not normally used directly. See IModelConnection for higher-level and more convenient API for accessing iModels from a frontend.\n * @alpha\n */\nexport abstract class IModelWriteRpcInterface extends RpcInterface {\n  /** Returns the IModelWriteRpcInterface client instance for the frontend. */\n  public static getClient(): IModelWriteRpcInterface { return RpcManager.getClientForInterface(IModelWriteRpcInterface); }\n\n  /** The immutable name of the interface. */\n  public static readonly interfaceName = \"IModelWriteRpcInterface\";\n\n  /** The version of the interface. */\n  public static interfaceVersion = \"0.4.0\";\n\n  /*===========================================================================================\n      NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n      NOTE: Please consult the README in this folder for the semantic versioning rules.\n  ===========================================================================================*/\n  public async openForWrite(_iModelToken: IModelTokenProps): Promise<IModelProps> { return this.forward(arguments); }\n  public async saveChanges(_iModelToken: IModelTokenProps, _description?: string): Promise<void> { return this.forward(arguments); }\n  public async updateProjectExtents(_iModelToken: IModelTokenProps, _newExtents: AxisAlignedBox3dProps): Promise<void> { return this.forward(arguments); }\n  public async saveThumbnail(_iModelToken: IModelTokenProps, _val: Uint8Array): Promise<void> { return this.forward(arguments); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\nimport { IModelProps, IModelTokenProps } from \"../IModel\";\n\n/** The RPC interface for working with *snapshot* iModels.\n * This interface is intended for desktop and mobile products. Web products are discouraged from registering this interface.\n * @beta\n */\nexport abstract class SnapshotIModelRpcInterface extends RpcInterface {\n  /** Returns the SnapshotIModelRpcInterface client instance for the frontend. */\n  public static getClient(): SnapshotIModelRpcInterface { return RpcManager.getClientForInterface(SnapshotIModelRpcInterface); }\n\n  /** The immutable name of the interface. */\n  public static readonly interfaceName = \"SnapshotIModelRpcInterface\";\n\n  /** The version of the interface. */\n  public static interfaceVersion = \"1.0.0\";\n\n  /*===========================================================================================\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n    NOTE: Please consult the README in this folder for the semantic versioning rules.\n  ===========================================================================================*/\n\n  public async openSnapshot(_fileName: string): Promise<IModelProps> { return this.forward(arguments); }\n  public async closeSnapshot(_iModelToken: IModelTokenProps): Promise<boolean> { return this.forward(arguments); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcDefaultConfiguration, RpcConfiguration } from \"./core/RpcConfiguration\";\nimport { RpcInterfaceDefinition } from \"../RpcInterface\";\n\n/** An RpcManager that uses RpcDefaultConfiguration/RpcDirectProtocol to make client stubs invoke\n * registered server impls as direct method calls within the same JavaScript context. In other words,\n * TestRpcManager sets up a protocol that uses our remoting mechanism but cuts out the communication\n * part of it. (No IPC or XHR is used or required.)\n * Nevertheless, all of the rest of the call marshalling and operation monitoring mechanism is used.\n * That makes TestRpcManager a way to write simple, single-process integration tests for frontends\n * and backends that actually use RpcInterfaces. Note that to write such a single-process integration\n * test, you must make *both* client and server use TestRpcManager to configure their RpcInterfaces.\n * It will not work if one side uses TestRpcManager and the other uses some other protocol (say, cloud).\n * That means that you must actually program the backend to know when it is running in direct test\n * mode and to employ TestRpcManager in that case.\n * @internal\n */\nexport class TestRpcManager {\n  public static initialize(interfaces: RpcInterfaceDefinition[]) {\n    const config = class extends RpcDefaultConfiguration {\n      public interfaces: any = () => interfaces;\n    };\n\n    for (const def of interfaces)\n      RpcConfiguration.assign(def, () => RpcDefaultConfiguration);\n\n    const instance = RpcConfiguration.obtain(config);\n    RpcConfiguration.initializeInterfaces(instance);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module RpcInterface */\r\n\r\nimport { ChangedElements } from \"../ChangedElements\";\r\nimport { IModelTokenProps } from \"../IModel\";\r\nimport { RpcInterface } from \"../RpcInterface\";\r\nimport { RpcManager } from \"../RpcManager\";\r\n\r\n/** The purpose of this class is to house WIP RPC methods. For example:\r\n * - WIP methods where signatures or behavior is still changing\r\n * - Experimental methods that we may decide are a bad idea and never release\r\n * The idea is to house these WIP RPC methods away from other RpcInterfaces that have stated compatibility goals.\r\n * Once stable, the goal is to move methods out to their rightful home.\r\n * Apps/services should understand the *flux* implied by registering this RpcInterface and should be in control of both the client and server before even considering using it.\r\n * @internal\r\n */\r\nexport abstract class WipRpcInterface extends RpcInterface {\r\n  /** Returns the IModelReadRpcInterface instance for the frontend. */\r\n  public static getClient(): WipRpcInterface { return RpcManager.getClientForInterface(WipRpcInterface); }\r\n\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"WipRpcInterface\";\r\n\r\n  /** The semantic version of the interface.\r\n   * @note The WipRpcInterface will never progress to 1.0 since it is never intended to be public.\r\n   */\r\n  public static interfaceVersion = \"0.3.0\";\r\n\r\n  /*===========================================================================================\r\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\r\n    NOTE: Please consult the README in this folder for the semantic versioning rules.\r\n  ==========================================================================================*/\r\n  public async placeholder(_iModelToken: IModelTokenProps): Promise<string> { return this.forward(arguments); } // here to test that WipRpcInterface is configured properly\r\n  public async isChangeCacheAttached(_iModelToken: IModelTokenProps): Promise<boolean> { return this.forward(arguments); }\r\n  public async attachChangeCache(_iModelToken: IModelTokenProps): Promise<void> { return this.forward(arguments); }\r\n  public async detachChangeCache(_iModelToken: IModelTokenProps): Promise<void> { return this.forward(arguments); }\r\n  public async getChangedElements(_iModelToken: IModelTokenProps, _startChangesetId: string, _endChangesetId: string): Promise<ChangedElements | undefined> { return this.forward(arguments); }\r\n  public async isChangesetProcessed(_iModelToken: IModelTokenProps, _changesetId: string): Promise<boolean> { return this.forward(arguments); }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\nimport { ClientRequestContext, SerializedClientRequestContext } from \"@bentley/bentleyjs-core\";\nimport { RpcInterface, RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcManager } from \"../../RpcManager\";\nimport { RpcControlChannel } from \"./RpcControl\";\nimport { RpcProtocol, RpcRequestFulfillment, SerializedRpcRequest } from \"./RpcProtocol\";\nimport { INSTANCE } from \"./RpcRegistry\";\nimport { RpcRequest } from \"./RpcRequest\";\nimport { RpcRequestContext } from \"./RpcRequestContext\";\n\n/** @public */\nexport type RpcConfigurationSupplier = () => { new(): RpcConfiguration };\n\n/** A RpcConfiguration specifies how calls on an RPC interface will be marshalled, plus other operating parameters.\n * RpcConfiguration is the base class for specific configurations.\n * @public\n */\nexport abstract class RpcConfiguration {\n  /** Whether development mode is enabled.\n   * @note This parameter determines whether developer convenience features like backend stack traces are available.\n   * @note This parameter facilitates development-only scenarios like using snapshot iModels in a web application.\n   */\n  public static developmentMode: boolean = false;\n\n  /** Whether strict mode is enabled.\n   * This parameter determines system behaviors relating to strict checking:\n   * - Whether an error is thrown if the type marshaling system encounters an unregistered type (only in strict mode).\n   */\n  public static strictMode: boolean = false;\n\n  /**\n   * Whether to throw an error when the IModelToken in the operation parameter list differs from the token in the URL.\n   * @note By default, a warning is loggged and the operation is allowed to proceed.\n   * @note The parameter token is always replaced by the url token (unless RpcOperationPolicy.allowTokenMismatch is set).\n   */\n  public static throwOnTokenMismatch = false;\n\n  /** Sets the configuration supplier for an RPC interface class. */\n  public static assign<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>, supplier: RpcConfigurationSupplier): void {\n    definition.prototype.configurationSupplier = supplier;\n  }\n\n  /** Obtains the instance of an RPC configuration class. */\n  public static obtain<T extends RpcConfiguration>(configurationConstructor: { new(): T }): T {\n    let instance = (configurationConstructor as any)[INSTANCE] as T;\n    if (!instance)\n      instance = (configurationConstructor as any)[INSTANCE] = new configurationConstructor();\n\n    return instance;\n  }\n\n  /** Enables passing of application-specific context with each RPC request. */\n  public static requestContext: RpcRequestContext = {\n    getId: (_request: RpcRequest): string => \"\",\n    serialize: async (_request: RpcRequest): Promise<SerializedClientRequestContext> => ({\n      id: \"\",\n      applicationId: \"\",\n      applicationVersion: \"\",\n      sessionId: \"\",\n      authorization: \"\",\n      userId: \"\",\n    }),\n    deserialize: async (_request: SerializedRpcRequest): Promise<ClientRequestContext> => new ClientRequestContext(\"\"),\n  };\n\n  /** The protocol of the configuration. */\n  public abstract readonly protocol: RpcProtocol;\n\n  /** The RPC interfaces managed by the configuration. */\n  public abstract readonly interfaces: () => RpcInterfaceDefinition[];\n\n  /** The target interval (in milliseconds) between connection attempts for pending RPC operation requests. */\n  public pendingOperationRetryInterval = 10000;\n\n  /** The control channel for the configuration.\n   * @internal\n   */\n  public readonly controlChannel = RpcControlChannel.obtain(this);\n\n  /** Initializes the RPC interfaces managed by the configuration. */\n  public static initializeInterfaces(configuration: RpcConfiguration) {\n    configuration.interfaces().forEach((definition) => RpcManager.initializeInterface(definition));\n    configuration.controlChannel.initialize();\n  }\n\n  /** @internal */\n  public static supply(definition: RpcInterface): RpcConfiguration {\n    return RpcConfiguration.obtain(definition.configurationSupplier ? definition.configurationSupplier() : RpcDefaultConfiguration);\n  }\n\n  /** @internal */\n  public onRpcClientInitialized(definition: RpcInterfaceDefinition, client: RpcInterface): void {\n    this.protocol.onRpcClientInitialized(definition, client);\n  }\n\n  /** @internal */\n  public onRpcImplInitialized(definition: RpcInterfaceDefinition, impl: RpcInterface): void {\n    this.protocol.onRpcImplInitialized(definition, impl);\n  }\n\n  /** @internal */\n  public onRpcClientTerminated(definition: RpcInterfaceDefinition, client: RpcInterface): void {\n    this.protocol.onRpcClientTerminated(definition, client);\n  }\n\n  /** @internal */\n  public onRpcImplTerminated(definition: RpcInterfaceDefinition, impl: RpcInterface): void {\n    this.protocol.onRpcImplTerminated(definition, impl);\n  }\n}\n\n/** A default configuration that can be used for basic testing within a library.\n * @internal\n */\nexport class RpcDefaultConfiguration extends RpcConfiguration {\n  public interfaces = () => [];\n  public protocol: RpcProtocol = new RpcDirectProtocol(this);\n}\n\n/** A default protocol that can be used for basic testing within a library.\n * @internal\n */\nexport class RpcDirectProtocol extends RpcProtocol {\n  public readonly requestType = RpcDirectRequest;\n}\n\n/** A default request type that can be used for basic testing within a library.\n * @internal\n */\nexport class RpcDirectRequest extends RpcRequest {\n  public headers: Map<string, string> = new Map();\n  public fulfillment: RpcRequestFulfillment | undefined = undefined;\n\n  protected async send() {\n    const request = await this.protocol.serialize(this);\n    return new Promise<number>(async (resolve, reject) => {\n      try {\n        this.fulfillment = await this.protocol.fulfill(request);\n        resolve(this.fulfillment.status);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  protected setHeader(name: string, value: string): void {\n    this.headers.set(name, value);\n  }\n\n  protected async load() {\n    return Promise.resolve(this.fulfillment!.result);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\n/** Describes available options for RPC response caching.\n * @public\n */\nexport enum RpcResponseCacheControl {\n  None,\n  Immutable,\n}\n\n/** RPC protocol event types.\n * @public\n */\nexport enum RpcProtocolEvent {\n  RequestCreated,\n  ResponseLoaded,\n  ResponseLoading,\n  ConnectionErrorReceived,\n  UnknownErrorReceived,\n  BackendErrorReceived,\n  ConnectionAborted,\n  RequestReceived,\n  BackendResponseCreated,\n  BackendReportedPending,\n  BackendReportedNotFound,\n  BackendErrorOccurred,\n}\n\n/** The status of an RPC operation request.\n * @public\n */\nexport enum RpcRequestStatus {\n  Unknown,\n  Created,\n  Submitted,\n  Pending,\n  Resolved,\n  Rejected,\n  Disposed,\n  NotFound,\n}\n\n/** RPC request event types.\n * @public\n */\nexport enum RpcRequestEvent {\n  StatusChanged,\n  PendingUpdateReceived,\n}\n\n/** RPC content types.\n * @public\n */\nexport enum RpcContentType {\n  Unknown,\n  Text,\n  Binary,\n  Multipart,\n  Stream,\n}\n\n/** RPC supported mobile platforms.\n * @beta\n */\nexport enum RpcMobilePlatform {\n  Unknown,\n  Android,\n  iOS,\n}\n\n/** Endpoints for RPC protocols.\n * @public\n */\nexport enum RpcEndpoint {\n  Frontend,\n  Backend,\n}\n\n/** @internal */\nexport const WEB_RPC_CONSTANTS = {\n  CONTENT: \"Content-Type\",\n  TEXT: \"text/plain\",\n  ANY_TEXT: \"text/\",\n  BINARY: \"application/octet-stream\",\n  MULTIPART: \"multipart/form-data\",\n};\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterface } from \"../../RpcInterface\";\nimport { RpcManager, RpcInterfaceEndpoints } from \"../../RpcManager\";\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcInvocation } from \"./RpcInvocation\";\nimport { RpcOperation } from \"./RpcOperation\";\nimport { RpcRegistry } from \"./RpcRegistry\";\nimport { IModelToken } from \"../../IModel\";\nimport { IModelError } from \"../../IModelError\";\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\n\n// tslint:disable:space-before-function-paren\n\n/** An RPC operation control response.\n * @public\n */\nexport abstract class RpcControlResponse {\n}\n\n/** A pending RPC operation response.\n * @public\n */\nexport class RpcPendingResponse extends RpcControlResponse {\n  /** Extended status regarding the pending operation. */\n  public message: string;\n\n  /** Constructs a pending response. */\n  public constructor(message: string = \"\") {\n    super();\n    this.message = message;\n  }\n}\n\n/** A RPC operation response.\n * @public\n */\nexport class RpcNotFoundResponse extends RpcControlResponse {\n}\n\n/** Manages requests and responses for an RPC configuration.\n * @internal\n */\nexport class RpcControlChannel {\n  /** @internal */\n  public static channels: RpcControlChannel[] = [];\n  private static _obtainLock = 0;\n  private _configuration: RpcConfiguration;\n  private _initialized = false;\n  private _clientActive = false;\n  private _describeEndpoints: () => Promise<RpcInterfaceEndpoints[]> = undefined as any;\n\n  private constructor(configuration: RpcConfiguration) {\n    this._configuration = configuration;\n    RpcControlChannel.channels.push(this);\n  }\n\n  /** @internal */\n  public async describeEndpoints() {\n    this.activateClient();\n    return this._describeEndpoints();\n  }\n\n  /** @internal */\n  public static obtain(configuration: RpcConfiguration): RpcControlChannel {\n    if (RpcControlChannel._obtainLock)\n      return undefined as any;\n\n    ++RpcControlChannel._obtainLock;\n    const channel = new RpcControlChannel(configuration);\n    --RpcControlChannel._obtainLock;\n\n    return channel;\n  }\n\n  private _channelInterface = class extends RpcInterface {\n    public static readonly interfaceVersion = \"CONTROL\";\n    public static readonly interfaceName = \"\";\n    public async describeEndpoints(): Promise<RpcInterfaceEndpoints[]> { return this.forward(arguments); }\n  };\n\n  private _channelImpl = class extends RpcInterface {\n    public async describeEndpoints(): Promise<RpcInterfaceEndpoints[]> {\n      const endpoints: RpcInterfaceEndpoints[] = [];\n\n      this.configuration.interfaces().forEach((definition) => {\n        if (!RpcRegistry.instance.isRpcInterfaceInitialized(definition))\n          return;\n\n        const description: RpcInterfaceEndpoints = { interfaceName: definition.interfaceName, interfaceVersion: definition.interfaceVersion, operationNames: [], compatible: true };\n        RpcOperation.forEach(definition, (operation) => description.operationNames.push(operation.operationName));\n        endpoints.push(description);\n      });\n\n      return Promise.resolve(endpoints);\n    }\n  };\n\n  private computeId(): string {\n    const interfaces: string[] = [];\n    this._configuration.interfaces().forEach((definition) => interfaces.push(`${definition.interfaceName}@${definition.interfaceVersion}`));\n    const id = interfaces.sort().join(\",\");\n\n    if (typeof (btoa) !== \"undefined\")\n      return btoa(id);\n    else if (typeof (Buffer) !== \"undefined\")\n      return Buffer.from(id, \"binary\").toString(\"base64\");\n    else\n      return id;\n  }\n\n  private activateClient() {\n    if (this._clientActive)\n      return;\n\n    if (!this._initialized) {\n      if (this._configuration.interfaces().length)\n        throw new IModelError(BentleyStatus.ERROR, `Invalid state.`);\n\n      this.initialize();\n    }\n\n    this._clientActive = true;\n    RpcOperation.forEach(this._channelInterface, (operation) => operation.policy.token = (_request) => RpcOperation.fallbackToken || new IModelToken(\"none\", \"none\", \"none\", \"none\", undefined));\n    const client = RpcManager.getClientForInterface(this._channelInterface);\n    this._describeEndpoints = async () => client.describeEndpoints();\n  }\n\n  /** @internal */\n  public initialize() {\n    if (this._initialized)\n      throw new IModelError(BentleyStatus.ERROR, `Already initialized.`);\n\n    this._initialized = true;\n\n    const id = this.computeId();\n    Object.defineProperty(this._channelInterface, \"interfaceName\", { value: id });\n    Object.defineProperty(this._channelImpl, \"interfaceName\", { value: id });\n\n    RpcConfiguration.assign(this._channelInterface, () => this._configuration.constructor as any);\n    RpcManager.registerImpl(this._channelInterface, this._channelImpl);\n    RpcManager.initializeInterface(this._channelInterface);\n  }\n\n  /** @internal */\n  public handleUnknownOperation(invocation: RpcInvocation, _error: any): boolean {\n    const op = invocation.request.operation;\n    if (op.interfaceVersion === \"CONTROL\" && op.operationName === \"describeEndpoints\") {\n      op.interfaceDefinition = this._channelInterface.interfaceName;\n      return true;\n    }\n\n    return false;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BentleyStatus, Logger, RpcInterfaceStatus } from \"@bentley/bentleyjs-core\";\nimport { IModelError } from \"../../IModelError\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\nimport { RpcInterface } from \"../../RpcInterface\";\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcProtocolEvent, RpcRequestStatus } from \"./RpcConstants\";\nimport { RpcNotFoundResponse, RpcPendingResponse } from \"./RpcControl\";\nimport { RpcMarshaling, RpcSerializedValue } from \"./RpcMarshaling\";\nimport { RpcOperation } from \"./RpcOperation\";\nimport { RpcProtocol, RpcRequestFulfillment, SerializedRpcRequest } from \"./RpcProtocol\";\nimport { CURRENT_INVOCATION, RpcRegistry } from \"./RpcRegistry\";\nimport { IModelTokenProps } from \"../../IModel\";\n\n/** Notification callback for an RPC invocation.\n * @public\n */\nexport type RpcInvocationCallback_T = (invocation: RpcInvocation) => void;\n\n/** An RPC operation invocation in response to a request.\n * @public\n */\nexport class RpcInvocation {\n  private _threw: boolean = false;\n  private _pending: boolean = false;\n  private _notFound: boolean = false;\n  private _timeIn: number = 0;\n  private _timeOut: number = 0;\n\n  /** The protocol for this invocation. */\n  public readonly protocol: RpcProtocol;\n\n  /** The received request. */\n  public readonly request: SerializedRpcRequest;\n\n  /** The operation of the request. */\n  public readonly operation: RpcOperation = undefined as any;\n\n  /** The implementation response. */\n  public readonly result: Promise<any>;\n\n  /** The fulfillment for this request. */\n  public readonly fulfillment: Promise<RpcRequestFulfillment>;\n\n  /** The status for this request. */\n  public get status(): RpcRequestStatus {\n    if (this._threw) {\n      return RpcRequestStatus.Rejected;\n    } else {\n      if (this._pending)\n        return RpcRequestStatus.Pending;\n      else if (this._notFound)\n        return RpcRequestStatus.NotFound;\n      else\n        return RpcRequestStatus.Resolved;\n    }\n  }\n\n  /** The elapsed time for this invocation. */\n  public get elapsed(): number {\n    return this._timeOut - this._timeIn;\n  }\n\n  /**\n   * The invocation for the current RPC operation.\n   * @note The return value of this function is only reliable in an RPC impl class member function where program control was received from the RpcInvocation constructor function.\n   */\n  public static current(rpcImpl: RpcInterface): RpcInvocation {\n    return (rpcImpl as any)[CURRENT_INVOCATION];\n  }\n\n  /** Constructs an invocation. */\n  public constructor(protocol: RpcProtocol, request: SerializedRpcRequest) {\n    this._timeIn = new Date().getTime();\n    this.protocol = protocol;\n    this.request = request;\n\n    try {\n      try {\n        this.operation = RpcOperation.lookup(this.request.operation.interfaceDefinition, this.request.operation.operationName);\n\n        const backend = this.operation.interfaceVersion;\n        const frontend = this.request.operation.interfaceVersion;\n        if (!RpcInterface.isVersionCompatible(backend, frontend)) {\n          throw new IModelError(RpcInterfaceStatus.IncompatibleVersion, `Backend version ${backend} does not match frontend version ${frontend} for RPC interface ${this.operation.operationName}.`);\n        }\n      } catch (error) {\n        if (this.handleUnknownOperation(error)) {\n          this.operation = RpcOperation.lookup(this.request.operation.interfaceDefinition, this.request.operation.operationName);\n        } else {\n          throw error;\n        }\n      }\n\n      this.operation.policy.invocationCallback(this);\n      this.result = this.resolve();\n    } catch (error) {\n      this.result = this.reject(error);\n    }\n\n    this.fulfillment = this.result.then((value) => this.fulfillResolved(value), (reason) => this.fulfillRejected(reason));\n  }\n\n  private handleUnknownOperation(error: any): boolean {\n    return this.protocol.configuration.controlChannel.handleUnknownOperation(this, error);\n  }\n\n  private async resolve(): Promise<any> {\n    const clientRequestContext = await RpcConfiguration.requestContext.deserialize(this.request);\n    clientRequestContext.enter();\n\n    this.protocol.events.raiseEvent(RpcProtocolEvent.RequestReceived, this);\n\n    const parameters = RpcMarshaling.deserialize(this.protocol, this.request.parameters);\n    this.applyPolicies(parameters);\n    const impl = RpcRegistry.instance.getImplForInterface(this.operation.interfaceDefinition);\n    (impl as any)[CURRENT_INVOCATION] = this;\n    const op = this.lookupOperationFunction(impl);\n\n    return Promise.resolve(op.call(impl, ...parameters));\n  }\n\n  private applyPolicies(parameters: any) {\n    if (!parameters || !Array.isArray(parameters)) {\n      return;\n    }\n\n    for (let i = 0; i !== parameters.length; ++i) {\n      const parameter = parameters[i];\n      const isToken = typeof (parameter) === \"object\" && parameter !== null && parameter.hasOwnProperty(\"iModelId\") && parameter.hasOwnProperty(\"contextId\");\n      if (isToken && this.protocol.checkToken && !this.operation.policy.allowTokenMismatch) {\n        const inflated = this.protocol.inflateToken(parameter, this.request);\n        parameters[i] = inflated;\n\n        if (!RpcInvocation.compareTokens(parameter, inflated)) {\n          if (RpcConfiguration.throwOnTokenMismatch) {\n            throw new IModelError(BentleyStatus.ERROR, \"IModelToken mismatch detected for this request.\");\n          } else {\n            Logger.logWarning(CommonLoggerCategory.RpcInterfaceBackend, \"IModelToken mismatch detected for this request.\");\n          }\n        }\n      }\n    }\n  }\n\n  private static compareTokens(a: IModelTokenProps, b: IModelTokenProps): boolean {\n    return a.key === b.key &&\n      a.contextId === b.contextId &&\n      a.iModelId === b.iModelId &&\n      a.changeSetId === b.changeSetId &&\n      a.openMode === b.openMode;\n  }\n\n  private async reject(error: any): Promise<any> {\n    this._threw = true;\n    this.protocol.events.raiseEvent(RpcProtocolEvent.BackendErrorOccurred, this);\n    return Promise.reject(error);\n  }\n\n  private async fulfillResolved(value: any): Promise<RpcRequestFulfillment> {\n    this._timeOut = new Date().getTime();\n    this.protocol.events.raiseEvent(RpcProtocolEvent.BackendResponseCreated, this);\n    const result = await RpcMarshaling.serialize(this.protocol, value);\n    return this.fulfill(result, value);\n  }\n\n  private async fulfillRejected(reason: any): Promise<RpcRequestFulfillment> {\n    this._timeOut = new Date().getTime();\n    if (!RpcConfiguration.developmentMode)\n      reason.stack = undefined;\n\n    const result = await RpcMarshaling.serialize(this.protocol, reason);\n\n    if (reason instanceof RpcPendingResponse) {\n      this._pending = true;\n      result.objects = reason.message;\n      this.protocol.events.raiseEvent(RpcProtocolEvent.BackendReportedPending, this);\n    } else if (reason instanceof RpcNotFoundResponse) {\n      this._notFound = true;\n      this.protocol.events.raiseEvent(RpcProtocolEvent.BackendReportedNotFound, this);\n    } else {\n      this._threw = true;\n      this.protocol.events.raiseEvent(RpcProtocolEvent.BackendErrorOccurred, this);\n    }\n\n    return this.fulfill(result, reason);\n  }\n\n  private fulfill(result: RpcSerializedValue, rawResult: any): RpcRequestFulfillment {\n    const fulfillment = {\n      result,\n      rawResult,\n      status: this.protocol.getCode(this.status),\n      id: this.request.id,\n      interfaceName: this.operation.interfaceDefinition.interfaceName,\n    };\n\n    return fulfillment;\n  }\n\n  private lookupOperationFunction(implementation: RpcInterface): (...args: any[]) => any {\n    const func = (implementation as any)[this.operation.operationName];\n    if (!func || typeof (func) !== \"function\") {\n      throw new IModelError(BentleyStatus.ERROR, `RPC interface class \"${implementation.constructor.name}\" does not implement operation \"${this.operation.operationName}\".`, Logger.logError, CommonLoggerCategory.RpcInterfaceBackend);\n    }\n\n    return func;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\n// tslint:disable:no-string-literal\n\nimport { BentleyStatus, IModelError } from \"../../IModelError\";\nimport { RpcProtocol } from \"./RpcProtocol\";\nimport { Readable } from \"stream\";\n\nlet marshalingTarget: RpcSerializedValue;\nlet chunkThreshold = 0;\n\n/** @internal */\nexport interface MarshalingBinaryMarker {\n  isBinary: true;\n  index: number;\n  size: number;\n  chunks: number;\n}\n\n/** @internal */\nexport namespace MarshalingBinaryMarker {\n  export function createDefault(): MarshalingBinaryMarker {\n    return { isBinary: true, index: 0, size: -1, chunks: 1 };\n  }\n}\n\n/** @public */\nexport interface RpcSerializedValue {\n  objects: string;\n  data: Uint8Array[];\n  chunks?: number;\n  stream?: Readable;\n}\n\n/** @public */\nexport namespace RpcSerializedValue {\n  export function create(objects = \"\", data: Uint8Array[] = []): RpcSerializedValue {\n    return { objects, data };\n  }\n}\n\n/** @internal */\nexport class RpcMarshaling {\n  private constructor() { }\n\n  /** Serializes a value. */\n  public static async serialize(protocol: RpcProtocol | undefined, value: any): Promise<RpcSerializedValue> {\n    const serialized = RpcSerializedValue.create();\n\n    if (typeof (value) === \"undefined\") {\n      return serialized;\n    }\n\n    marshalingTarget = serialized;\n    chunkThreshold = protocol ? protocol.transferChunkThreshold : 0;\n    serialized.objects = JSON.stringify(value, WireFormat.marshal);\n    marshalingTarget = undefined as any;\n    chunkThreshold = 0;\n\n    return serialized;\n  }\n\n  /** Deserializes a value. */\n  public static deserialize(protocol: RpcProtocol | undefined, value: RpcSerializedValue): any {\n    if (value.objects === \"\") {\n      return undefined;\n    }\n\n    marshalingTarget = value;\n    chunkThreshold = protocol ? protocol.transferChunkThreshold : 0;\n    const result = JSON.parse(value.objects, WireFormat.unmarshal);\n    marshalingTarget = undefined as any;\n    chunkThreshold = 0;\n\n    return result;\n  }\n}\n\nclass WireFormat {\n  /** JSON.stringify replacer callback. */\n  public static marshal(this: any, _key: string, value: any) {\n    const asBinary = WireFormat.marshalBinary(value);\n    if (asBinary) {\n      return asBinary;\n    }\n\n    const asError = WireFormat.marshalError(value);\n    if (asError) {\n      return asError;\n    }\n\n    return value;\n  }\n\n  /** JSON.parse reviver callback. */\n  public static unmarshal(_key: string, value: any) {\n    if (typeof (value) === \"object\" && value !== null && value.hasOwnProperty(\"isBinary\") && value.isBinary) {\n      return WireFormat.unmarshalBinary(value);\n    }\n\n    return value;\n  }\n\n  private static marshalBinary(value: any): any {\n    if (value instanceof Uint8Array || Buffer.isBuffer(value)) {\n      const marker: MarshalingBinaryMarker = { isBinary: true, index: -1, size: value.byteLength, chunks: 1 };\n\n      if (chunkThreshold && value.byteLength > chunkThreshold) {\n        marker.index = marshalingTarget.data.length;\n        marker.chunks = 0;\n\n        let cursor = value.byteOffset;\n        const end = cursor + value.byteLength;\n        let chunk = chunkThreshold;\n\n        for (; ;) {\n          if (cursor >= end) {\n            break;\n          }\n\n          marshalingTarget.data.push(new Uint8Array(value.buffer, cursor, chunk));\n          ++marker.chunks;\n          cursor += chunk;\n\n          const consumed = cursor - value.byteOffset;\n          const remaining = value.byteLength - consumed;\n          chunk = Math.min(chunkThreshold, remaining);\n        }\n      } else {\n        marker.index = marshalingTarget.data.push(value as Uint8Array) - 1;\n      }\n\n      return marker;\n    } else {\n      return undefined;\n    }\n  }\n\n  private static unmarshalBinary(value: MarshalingBinaryMarker): any {\n    if (value.index >= marshalingTarget.data.length) {\n      throw new IModelError(BentleyStatus.ERROR, `Cannot unmarshal missing binary value.`);\n    }\n\n    if (value.chunks === 0) {\n      return new Uint8Array();\n    } else if (value.chunks === 1) {\n      return new Uint8Array(marshalingTarget.data[value.index]);\n    } else {\n      const buffer = new ArrayBuffer(value.size);\n      const view = new Uint8Array(buffer);\n\n      let cursor = 0;\n      for (let c = 0; c !== value.chunks; ++c) {\n        const chunk = marshalingTarget.data[value.index + c];\n        view.set(chunk, cursor);\n        cursor += chunk.byteLength;\n      }\n\n      return view;\n    }\n  }\n\n  private static marshalError(value: any) {\n    if (value instanceof Error) {\n      const props = Object.getOwnPropertyDescriptors(value);\n      props[\"isError\"] = { configurable: true, enumerable: true, writable: true, value: true };\n      props[\"name\"] = { configurable: true, enumerable: true, writable: true, value: value.name };\n      props[\"message\"] = { configurable: true, enumerable: true, writable: true, value: value.message };\n      props[\"stack\"] = { configurable: true, enumerable: true, writable: true, value: value.stack };\n      return Object.create(Object.prototype, props);\n    }\n\n    return undefined;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\nimport { IModelToken } from \"../../IModel\";\nimport { IModelError } from \"../../IModelError\";\nimport { RpcInterface, RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcRegistry, OPERATION, POLICY } from \"./RpcRegistry\";\nimport { RpcInvocationCallback_T } from \"./RpcInvocation\";\nimport { RpcRequestCallback_T, RpcRequestInitialRetryIntervalSupplier_T, RpcRequestTokenSupplier_T, RpcResponseCachingCallback_T } from \"./RpcRequest\";\nimport { RpcResponseCacheControl } from \"./RpcConstants\";\n\n/** The policy for an RPC operation.\n * @public\n */\nexport class RpcOperationPolicy {\n  /** Supplies the IModelToken for an operation request. */\n  public token: RpcRequestTokenSupplier_T = (request) => request.findTokenPropsParameter();\n\n  /** Supplies the initial retry interval for an operation request. */\n  public retryInterval: RpcRequestInitialRetryIntervalSupplier_T = (configuration) => configuration.pendingOperationRetryInterval;\n\n  /** Called before every operation request on the frontend is sent. */\n  public requestCallback: RpcRequestCallback_T = (_request) => { };\n\n  /** Called after every operation request on the frontend is sent. */\n  public sentCallback: RpcRequestCallback_T = (_request) => { };\n\n  /** Called for every operation invocation on the backend. */\n  public invocationCallback: RpcInvocationCallback_T = (_invocation) => { };\n\n  /**\n   * Determines if caching is permitted for an operation response.\n   * @note Not all RPC protocols support caching.\n   */\n  public allowResponseCaching: RpcResponseCachingCallback_T = (_request) => RpcResponseCacheControl.None;\n\n  /** Forces RpcConfiguration.strictMode for this operation. */\n  public forceStrictMode: boolean = false;\n\n  /** Whether the IModelToken in the operation parameter list is allowed to differ from the token in the request URL. */\n  public allowTokenMismatch: boolean = false;\n}\n\n/** An RPC operation descriptor.\n * @public\n */\nexport class RpcOperation {\n  /** A fallback token to use for RPC requests that do not semantically depend on an iModel. */\n  public static fallbackToken: IModelToken | undefined = undefined;\n\n  /** Looks up an RPC operation by name. */\n  public static lookup(target: string | RpcInterfaceDefinition, operationName: string): RpcOperation {\n    const definition = typeof (target) === \"string\" ? RpcRegistry.instance.lookupInterfaceDefinition(target) : target;\n    const propertyName: string | symbol = RpcOperation.computeOperationName(operationName);\n\n    const proto = (definition.prototype as any);\n    if (!proto.hasOwnProperty(propertyName))\n      throw new IModelError(BentleyStatus.ERROR, `RPC interface class \"${definition.interfaceName}\" does not does not declare operation \"${operationName}\"`);\n\n    return proto[propertyName][OPERATION];\n  }\n\n  /** Iterates the operations of an RPC interface definition. */\n  public static forEach(definition: RpcInterfaceDefinition, callback: (operation: RpcOperation) => void): void {\n    Object.getOwnPropertyNames(definition.prototype).forEach((operationName) => {\n      if (operationName === \"constructor\" || operationName === \"configurationSupplier\")\n        return;\n\n      const propertyName = RpcOperation.computeOperationName(operationName);\n      callback((definition.prototype as any)[propertyName][OPERATION]);\n    });\n  }\n\n  /** The RPC interface definition for this operation. */\n  public readonly interfaceDefinition: RpcInterfaceDefinition;\n\n  /** The name of this operation. */\n  public readonly operationName: string;\n\n  /** The version of this operation. */\n  public get interfaceVersion(): string { return this.interfaceDefinition.interfaceVersion; }\n\n  /** The policy for this operation. */\n  public policy: RpcOperationPolicy;\n\n  /** @internal */\n  public constructor(definition: RpcInterfaceDefinition, operation: string, policy: RpcOperationPolicy) {\n    this.interfaceDefinition = definition;\n    this.operationName = operation;\n    this.policy = policy;\n  }\n\n  /** @internal */\n  public static computeOperationName(identifier: string): string {\n    const c = identifier.indexOf(\":\");\n    if (c === -1)\n      return identifier;\n\n    return identifier.substring(0, c + 1);\n  }\n}\n\n/** @public */\nexport type RpcOperationPolicyProps = Partial<RpcOperationPolicy>;\n\n/** @public */\nexport namespace RpcOperation {\n  function obtainInstance(obj: RpcOperationPolicy | RpcOperationPolicyProps) {\n    if (obj instanceof RpcOperationPolicy) {\n      return obj;\n    } else {\n      const instance = new RpcOperationPolicy();\n      Object.assign(instance, obj);\n      return instance;\n    }\n  }\n\n  /** Decorator for setting the policy for an RPC operation function. */\n  export function setPolicy(policy: RpcOperationPolicy | RpcOperationPolicyProps) {\n    return <T extends RpcInterface>(target: T, propertyKey: string, descriptor: PropertyDescriptor) => {\n      descriptor.value[OPERATION] = new RpcOperation(target.constructor as any, propertyKey, obtainInstance(policy));\n    };\n  }\n\n  /** Convenience decorator for setting an RPC operation policy that allows response caching. */\n  export function allowResponseCaching(control: RpcResponseCacheControl = RpcResponseCacheControl.Immutable) {\n    return <T extends RpcInterface>(target: T, propertyKey: string, descriptor: PropertyDescriptor) => {\n      descriptor.value[OPERATION] = new RpcOperation(target.constructor as any, propertyKey, new class extends RpcOperationPolicy {\n        public allowResponseCaching = () => control;\n      }());\n    };\n  }\n\n  /** Decorator for setting the default policy for an RPC interface definition class. */\n  export function setDefaultPolicy(policy: RpcOperationPolicy | RpcOperationPolicyProps) {\n    return <T extends RpcInterface>(definition: RpcInterfaceDefinition<T>) => {\n      (definition as any)[POLICY] = obtainInstance(policy);\n    };\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcRequestEvent, RpcRequestStatus } from \"./RpcConstants\";\nimport { RpcRequest } from \"./RpcRequest\";\n\n/** Manages pending RPC requests and responses.\n * @internal\n */\nexport class RpcPendingQueue {\n  public static instance: RpcPendingQueue;\n\n  public static initialize() {\n    if (!RpcPendingQueue.instance) {\n      RpcPendingQueue.instance = new RpcPendingQueue();\n    }\n  }\n\n  private _pendingInterval: any = undefined;\n  private _pending: RpcRequest[] = [];\n  private _pendingLock: number = 0;\n\n  private constructor() {\n    RpcRequest.events.addListener(this.requestEventHandler, this);\n  }\n\n  private requestEventHandler(type: RpcRequestEvent, request: RpcRequest): void {\n    if (type !== RpcRequestEvent.StatusChanged)\n      return;\n\n    switch (request.status) {\n      case RpcRequestStatus.Submitted: {\n        this.enqueuePending(request);\n        break;\n      }\n\n      case RpcRequestStatus.Resolved:\n      case RpcRequestStatus.Rejected:\n      case RpcRequestStatus.NotFound: {\n        this.dequeuePending(request);\n        break;\n      }\n    }\n  }\n\n  private enqueuePending(request: RpcRequest) {\n    this._pending.push(request);\n    this.setPendingInterval();\n  }\n\n  private dequeuePending(request: RpcRequest) {\n    if (this._pendingLock)\n      return;\n\n    const i = this._pending.indexOf(request);\n    this._pending.splice(i, 1);\n    this.clearPendingInterval();\n  }\n\n  private _pendingIntervalHandler = function (this: RpcPendingQueue) {\n    const now = new Date().getTime();\n\n    ++this._pendingLock;\n\n    for (const request of this._pending) {\n      if (request.connecting || (request.lastSubmitted + request.retryInterval) > now) {\n        continue;\n      }\n\n      request.submit(); // tslint:disable-line:no-floating-promises\n    }\n\n    --this._pendingLock;\n\n    this.cleanupPendingQueue();\n  }.bind(this);\n\n  private cleanupPendingQueue() {\n    if (this._pendingLock)\n      return;\n\n    let i = this._pending.length;\n    while (i--) {\n      if (!this._pending[i].pending) {\n        this._pending.splice(i, 1);\n      }\n    }\n\n    this.clearPendingInterval();\n  }\n\n  private setPendingInterval() {\n    if (this._pendingInterval)\n      return;\n\n    this._pendingInterval = setInterval(this._pendingIntervalHandler, 0);\n  }\n\n  private clearPendingInterval() {\n    if (!this._pending.length) {\n      clearInterval(this._pendingInterval);\n      this._pendingInterval = undefined;\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BeEvent, SerializedClientRequestContext } from \"@bentley/bentleyjs-core\";\nimport { RpcInterface, RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcProtocolEvent, RpcRequestStatus, RpcResponseCacheControl } from \"./RpcConstants\";\nimport { RpcInvocation } from \"./RpcInvocation\";\nimport { RpcMarshaling, RpcSerializedValue } from \"./RpcMarshaling\";\nimport { RpcOperation } from \"./RpcOperation\";\nimport { RpcRequest } from \"./RpcRequest\";\nimport { IModelTokenProps } from \"../../IModel\";\n\n/** A serialized RPC operation descriptor.\n * @public\n */\nexport interface SerializedRpcOperation {\n  interfaceDefinition: string;\n  operationName: string;\n  interfaceVersion: string;\n  encodedRequest?: string;\n}\n\n/** A serialized RPC operation request.\n * @public\n */\nexport interface SerializedRpcRequest extends SerializedClientRequestContext {\n  operation: SerializedRpcOperation;\n  method: string;\n  path: string;\n  parameters: RpcSerializedValue;\n  caching: RpcResponseCacheControl;\n}\n\n/** An RPC operation request fulfillment.\n * @public\n */\nexport interface RpcRequestFulfillment {\n  /** The RPC interface for the request. */\n  interfaceName: string;\n\n  /** The id for the request. */\n  id: string;\n\n  /** The result for the request. */\n  result: RpcSerializedValue;\n\n  /** The unserialized result for the request. */\n  rawResult: any;\n\n  /** A protocol-specific status code value for the request. */\n  status: number;\n}\n\n/** @public */\nexport namespace RpcRequestFulfillment {\n  export async function forUnknownError(request: SerializedRpcRequest, error: any): Promise<RpcRequestFulfillment> {\n    const result = await RpcMarshaling.serialize(undefined, error);\n\n    return {\n      interfaceName: request.operation.interfaceDefinition,\n      id: request.id,\n      result,\n      rawResult: error,\n      status: RpcRequestStatus.Rejected,\n    };\n  }\n}\n\n/** Handles RPC protocol events.\n * @public\n */\nexport type RpcProtocolEventHandler = (type: RpcProtocolEvent, object: RpcRequest | RpcInvocation) => void;\n\n/** An application protocol for an RPC interface.\n * @public\n */\nexport abstract class RpcProtocol {\n  /** Events raised by all protocols. See [[RpcProtocolEvent]] */\n  public static readonly events: BeEvent<RpcProtocolEventHandler> = new BeEvent();\n\n  /** Events raised by the protocol. See [[RpcProtocolEvent]] */\n  public readonly events: BeEvent<RpcProtocolEventHandler> = new BeEvent();\n\n  /** The configuration for the protocol. */\n  public readonly configuration: RpcConfiguration;\n\n  /** The RPC request class for this protocol. */\n  public abstract readonly requestType: typeof RpcRequest;\n\n  /** The RPC invocation class for this protocol. */\n  public readonly invocationType: typeof RpcInvocation = RpcInvocation;\n\n  public serializedClientRequestContextHeaderNames: SerializedClientRequestContext = {\n    /** The name of the request id header. */\n    id: \"\",\n\n    /** The name of the application id header  */\n    applicationId: \"\",\n\n    /** The name of the version header. */\n    applicationVersion: \"\",\n\n    /** The name of the session id header  */\n    sessionId: \"\",\n\n    /** The name of the authorization header. */\n    authorization: \"\",\n\n    /** The id of the authorized user */\n    userId: \"\",\n  };\n\n  /** If greater than zero, specifies where to break large binary request payloads. */\n  public transferChunkThreshold: number = 0;\n\n  /** Used by protocols that can transmit stream values natively. */\n  public preserveStreams: boolean = false;\n\n  /** Used by protocols that can transmit IModelToken values natively. */\n  public checkToken: boolean = false;\n\n  /** If checkToken is true, will be called on the backend to inflate the IModelToken for each request. */\n  public inflateToken(tokenFromBody: IModelTokenProps, _request: SerializedRpcRequest): IModelTokenProps { return tokenFromBody; }\n\n  /** Override to supply the status corresponding to a protocol-specific code value. */\n  public getStatus(code: number): RpcRequestStatus {\n    return code;\n  }\n\n  /** Override to supply the protocol-specific code corresponding to a status value. */\n  public getCode(status: RpcRequestStatus): number {\n    return status;\n  }\n\n  /** Override to supply the protocol-specific path value for an RPC operation. */\n  public supplyPathForOperation(operation: RpcOperation, _request: RpcRequest | undefined): string {\n    return JSON.stringify(operation);\n  }\n\n  /** Override to supply the operation for a protocol-specific path value. */\n  public getOperationFromPath(path: string): SerializedRpcOperation {\n    return JSON.parse(path);\n  }\n\n  /** Obtains the implementation result on the backend for an RPC operation request. */\n  public async fulfill(request: SerializedRpcRequest): Promise<RpcRequestFulfillment> {\n    return new (this.invocationType)(this, request).fulfillment;\n  }\n\n  /** Serializes a request. */\n  public async serialize(request: RpcRequest): Promise<SerializedRpcRequest> {\n    const serializedContext: SerializedClientRequestContext = await RpcConfiguration.requestContext.serialize(request);\n    return {\n      ...serializedContext,\n      operation: {\n        interfaceDefinition: request.operation.interfaceDefinition.interfaceName,\n        operationName: request.operation.operationName,\n        interfaceVersion: request.operation.interfaceVersion,\n      },\n      method: request.method,\n      path: request.path,\n      parameters: await RpcMarshaling.serialize(request.protocol, request.parameters),\n      caching: RpcResponseCacheControl.None,\n    };\n  }\n\n  /** Constructs a protocol. */\n  public constructor(configuration: RpcConfiguration) {\n    this.configuration = configuration;\n    this.events.addListener((type, object) => RpcProtocol.events.raiseEvent(type, object));\n  }\n\n  /** @internal */\n  public onRpcClientInitialized(_definition: RpcInterfaceDefinition, _client: RpcInterface): void { }\n\n  /** @internal */\n  public onRpcImplInitialized(_definition: RpcInterfaceDefinition, _impl: RpcInterface): void { }\n\n  /** @internal */\n  public onRpcClientTerminated(_definition: RpcInterfaceDefinition, _client: RpcInterface): void { }\n\n  /** @internal */\n  public onRpcImplTerminated(_definition: RpcInterfaceDefinition, _impl: RpcInterface): void { }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterface, RpcInterfaceImplementation, RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcInterfaceEndpoints } from \"../../RpcManager\";\nimport { RpcOperation, RpcOperationPolicy } from \"./RpcOperation\";\nimport { RpcControlChannel } from \"./RpcControl\";\nimport { IModelError } from \"../../IModelError\";\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\nimport { RpcConfiguration, RpcPendingQueue, initializeRpcRequest } from \"../../imodeljs-common\";\n\n// tslint:disable:ban-types\n\n/** @internal */\nexport const REGISTRY = Symbol.for(\"@bentley/imodeljs-common/RpcRegistry\");\n\n/** @internal */\nexport const OPERATION = Symbol.for(\"@bentley/imodeljs-common/RpcOperation\");\n\n/** @internal */\nexport const POLICY = Symbol.for(\"@bentley/imodeljs-common/RpcOperationPolicy\");\n\n/** @internal */\nexport const INSTANCE = Symbol.for(\"@bentley/imodeljs-common/RpcInterface/__instance__\");\n\n/** @internal */\nexport const CURRENT_REQUEST = Symbol.for(\"@bentley/imodeljs-common/RpcRequest/__current__\");\n\n/** @internal */\nexport const CURRENT_INVOCATION = Symbol.for(\"@bentley/imodeljs-common/RpcInvocation/__current__\");\n\n/** @internal */\nexport class RpcRegistry {\n  private static _instance: RpcRegistry;\n\n  private constructor() {\n  }\n\n  public static get instance() {\n    if (!RpcRegistry._instance) {\n      const globalObj: any = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n      if (!globalObj[REGISTRY])\n        globalObj[REGISTRY] = new RpcRegistry();\n\n      RpcRegistry._instance = globalObj[REGISTRY];\n    }\n\n    return RpcRegistry._instance;\n  }\n\n  public lookupInterfaceDefinition(name: string): RpcInterfaceDefinition {\n    if (!this.definitionClasses.has(name))\n      throw new IModelError(BentleyStatus.ERROR, `RPC interface \"${name}\" is not initialized.`);\n\n    return this.definitionClasses.get(name) as RpcInterfaceDefinition;\n  }\n\n  public async describeAvailableEndpoints(): Promise<RpcInterfaceEndpoints[]> {\n    const requests: Array<Promise<RpcInterfaceEndpoints[]>> = [];\n    for (const channel of RpcControlChannel.channels) {\n      requests.push(channel.describeEndpoints());\n    }\n\n    return Promise.all(requests).then((responses) => {\n      const endpoints = responses.reduce((a, b) => a.concat(b), []);\n      for (const endpoint of endpoints) {\n        const definition = this.definitionClasses.get(endpoint.interfaceName);\n        endpoint.compatible = (definition && RpcInterface.isVersionCompatible(endpoint.interfaceVersion, definition.interfaceVersion)) ? true : false;\n      }\n\n      return endpoints;\n    });\n  }\n\n  public getClientForInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): T {\n    let instance = this.proxies.get(definition.interfaceName) as (T | undefined);\n    if (!instance)\n      instance = this.instantiateClient(definition);\n\n    return instance;\n  }\n\n  public getImplForInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): T {\n    let instance = this.implementations.get(definition.interfaceName) as (T | undefined);\n    if (!instance)\n      instance = this.instantiateImpl(definition);\n\n    return instance;\n  }\n\n  public lookupImpl<T extends RpcInterface>(interfaceName: string): T {\n    const definition = this.lookupInterfaceDefinition(interfaceName);\n    return this.getImplForInterface(definition) as T;\n  }\n\n  public registerImpl<TDefinition extends RpcInterface, TImplementation extends TDefinition>(definition: RpcInterfaceDefinition<TDefinition>, implementation: RpcInterfaceImplementation<TImplementation>) {\n    this.unregisterImpl(definition);\n    this.implementationClasses.set(definition.interfaceName, implementation);\n  }\n\n  public unregisterImpl<TDefinition extends RpcInterface>(definition: RpcInterfaceDefinition<TDefinition>) {\n    this.implementationClasses.delete(definition.interfaceName);\n\n    const impl = this.implementations.get(definition.interfaceName);\n    if (impl) {\n      impl.configuration.onRpcImplTerminated(definition, impl);\n      this.implementations.delete(definition.interfaceName);\n    }\n  }\n\n  public supplyImplInstance<TDefinition extends RpcInterface, TImplementation extends TDefinition>(definition: RpcInterfaceDefinition<TDefinition>, instance: TImplementation): void {\n    this.suppliedImplementations.set(definition.interfaceName, instance);\n  }\n\n  public isRpcInterfaceInitialized<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): boolean {\n    return this.definitionClasses.has(definition.interfaceName);\n  }\n\n  public initializeRpcInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): void {\n    if (this.definitionClasses.has(definition.interfaceName))\n      return;\n\n    this.notifyInitialize();\n    this.definitionClasses.set(definition.interfaceName, definition);\n    this.configureOperations(definition);\n  }\n\n  public terminateRpcInterface<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>) {\n    this.unregisterImpl(definition);\n    this.purgeClient(definition);\n    this.definitionClasses.delete(definition.interfaceName);\n  }\n\n  public definitionClasses: Map<string, RpcInterfaceDefinition> = new Map();\n  public proxies: Map<string, RpcInterface> = new Map();\n  public implementations: Map<string, RpcInterface> = new Map();\n  public suppliedImplementations: Map<string, RpcInterface> = new Map();\n  public implementationClasses: Map<string, RpcInterfaceImplementation> = new Map();\n\n  public id = (() => {\n    let i = 0;\n    return () => ++i;\n  })();\n\n  private instantiateImpl<TDefinition extends RpcInterface, TImplementation extends TDefinition>(definition: RpcInterfaceDefinition<TDefinition>): TImplementation {\n    this.checkInitialized(definition);\n\n    const registeredImplementation = this.implementationClasses.get(definition.interfaceName) as RpcInterfaceImplementation<TImplementation>;\n    if (!registeredImplementation)\n      throw new IModelError(BentleyStatus.ERROR, `An RPC interface implementation class for \"${definition.interfaceName}\" is not registered.`);\n\n    if (definition.prototype.configurationSupplier)\n      registeredImplementation.prototype.configurationSupplier = definition.prototype.configurationSupplier;\n\n    const supplied = this.suppliedImplementations.get(definition.interfaceName);\n    const implementation = supplied || new registeredImplementation();\n    if (!(implementation instanceof registeredImplementation))\n      throw new IModelError(BentleyStatus.ERROR, `Invalid RPC interface implementation.`);\n\n    if (supplied) {\n      (supplied.configuration as any) = RpcConfiguration.supply(supplied);\n    }\n\n    this.implementations.set(definition.interfaceName, implementation);\n    implementation.configuration.onRpcImplInitialized(definition, implementation);\n    return implementation;\n  }\n\n  private instantiateClient<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>): T {\n    this.checkInitialized(definition);\n\n    const proxy = new (definition as any)() as T;\n    this.proxies.set(definition.interfaceName, proxy);\n\n    Object.getOwnPropertyNames(definition.prototype).forEach((operationName) => {\n      if (operationName === \"constructor\" || operationName === \"configurationSupplier\")\n        return;\n\n      this.interceptOperation(proxy, operationName);\n    });\n\n    proxy.configuration.onRpcClientInitialized(definition, proxy);\n    return proxy;\n  }\n\n  private interceptOperation(proxy: RpcInterface, operation: string) {\n    const clientFunction = (proxy as any)[operation];\n    // tslint:disable-next-line:only-arrow-functions\n    (proxy as any)[operation] = function () {\n      const args = Array.from(arguments);\n      args.push(operation);\n      return clientFunction.apply(proxy, args);\n    };\n  }\n\n  private checkInitialized<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>) {\n    if (!this.definitionClasses.has(definition.interfaceName))\n      throw new IModelError(BentleyStatus.ERROR, `RPC interface \"${definition.interfaceName}\" is not initialized.`);\n  }\n\n  private configureOperations<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>) {\n    const proto = (definition.prototype as any);\n\n    Object.getOwnPropertyNames(proto).forEach((operationName) => {\n      if (operationName === \"constructor\" || operationName === \"configurationSupplier\")\n        return;\n\n      const propertyName = RpcOperation.computeOperationName(operationName);\n\n      if (!proto[propertyName][OPERATION]) {\n        const policy = (definition as any)[POLICY] || new RpcOperationPolicy();\n        proto[propertyName][OPERATION] = new RpcOperation(definition, propertyName, policy);\n      }\n    });\n  }\n\n  private purgeClient<T extends RpcInterface>(definition: RpcInterfaceDefinition<T>) {\n    const proxy = this.proxies.get(definition.interfaceName);\n    if (proxy) {\n      proxy.configuration.onRpcClientTerminated(definition, proxy);\n      this.proxies.delete(definition.interfaceName);\n    }\n  }\n\n  private notifyInitialize() {\n    initializeRpcRequest();\n    RpcPendingQueue.initialize();\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BeEvent, BentleyStatus, Guid, SerializedClientRequestContext, Logger } from \"@bentley/bentleyjs-core\";\nimport { RpcInterface } from \"../../RpcInterface\";\nimport { RpcOperation } from \"./RpcOperation\";\nimport { RpcProtocol } from \"./RpcProtocol\";\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcMarshaling, RpcSerializedValue } from \"./RpcMarshaling\";\nimport { CURRENT_REQUEST } from \"./RpcRegistry\";\nimport { RpcNotFoundResponse } from \"./RpcControl\";\nimport { IModelTokenProps } from \"../../IModel\";\nimport { IModelError, BackendError } from \"../../IModelError\";\nimport { RpcResponseCacheControl, RpcRequestEvent, RpcRequestStatus, RpcProtocolEvent } from \"./RpcConstants\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\n\nconst aggregateLoad = { lastRequest: 0, lastResponse: 0 };\n\n/** @public */\nexport class ResponseLike implements Response {\n  private _data: Promise<any>;\n  public get body() { return null; }\n  public async arrayBuffer(): Promise<ArrayBuffer> { return this._data; }\n  public async blob(): Promise<Blob> { throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\"); }\n  public async formData(): Promise<FormData> { throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\"); }\n  public async json(): Promise<any> { return this._data; }\n  public async text(): Promise<string> { return this._data; }\n  public get bodyUsed() { return false; }\n  public get headers(): Headers { throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\"); }\n  public get ok(): boolean { return this.status >= 200 && this.status <= 299; }\n  public get redirected() { return false; }\n  public get status() { return 200; }\n  public get statusText() { return \"\"; }\n  public get trailer(): Promise<Headers> { throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\"); }\n  public get type(): ResponseType { return \"basic\"; }\n  public get url() { return \"\"; }\n  public clone() { return Object.assign({}, this); }\n\n  public constructor(data: any) {\n    this._data = Promise.resolve(data);\n  }\n}\n\n/** Supplies an IModelTokenProps for an RPC request.\n * @public\n */\nexport type RpcRequestTokenSupplier_T = (request: RpcRequest) => IModelTokenProps | undefined;\n\n/** Supplies the initial retry interval for an RPC request.\n * @public\n */\nexport type RpcRequestInitialRetryIntervalSupplier_T = (configuration: RpcConfiguration) => number;\n\n/** Notification callback for an RPC request.\n * @public\n */\nexport type RpcRequestCallback_T = (request: RpcRequest) => void;\n\n/** Determines if caching is permitted for a RPC response.\n * @public\n */\nexport type RpcResponseCachingCallback_T = (request: RpcRequest) => RpcResponseCacheControl;\n\n/** Runtime information related to the operation load of one or more RPC interfaces.\n * @public\n */\nexport interface RpcOperationsProfile {\n  readonly lastRequest: number;\n  readonly lastResponse: number;\n}\n\n/** Handles RPC request events.\n * @public\n */\nexport type RpcRequestEventHandler = (type: RpcRequestEvent, request: RpcRequest) => void;\n\n/** Resolves \"not found\" responses for RPC requests.\n * @public\n */\nexport type RpcRequestNotFoundHandler = (request: RpcRequest, response: RpcNotFoundResponse, resubmit: () => void, reject: (reason: any) => void) => void;\n\n/** A RPC operation request.\n * @public\n */\nexport abstract class RpcRequest<TResponse = any> {\n  private _resolve: (value?: TResponse | PromiseLike<TResponse> | undefined) => void = () => undefined;\n  protected _resolveRaw: (value?: Response | PromiseLike<Response> | undefined) => void = () => undefined;\n  private _reject: (reason?: any) => void = () => undefined;\n  private _rejectRaw: (reason?: any) => void = () => undefined;\n  private _created: number = 0;\n  private _lastSubmitted: number = 0;\n  private _lastUpdated: number = 0;\n  private _status: RpcRequestStatus = RpcRequestStatus.Unknown;\n  private _extendedStatus: string = \"\";\n  private _connecting: boolean = false;\n  private _active: boolean = true;\n  private _hasRawListener = false;\n  private _raw: ArrayBuffer | string | undefined = undefined;\n  protected _response: Response | undefined = undefined;\n  protected _rawPromise: Promise<Response>;\n\n  /** Events raised by RpcRequest. See [[RpcRequestEvent]] */\n  public static readonly events: BeEvent<RpcRequestEventHandler> = new BeEvent();\n\n  /** Resolvers for \"not found\" requests. See [[RpcRequestNotFoundHandler]] */\n  public static readonly notFoundHandlers: BeEvent<RpcRequestNotFoundHandler> = new BeEvent();\n\n  /** The aggregate operations profile of all active RPC interfaces. */\n  public static get aggregateLoad(): RpcOperationsProfile { return aggregateLoad; }\n\n  /**\n   * The request for the current RPC operation.\n   * @note The return value of this function is only reliable if program control was received from a RPC interface class member function that directly returns the result of calling RpcInterface.forward.\n   */\n  public static current(context: RpcInterface): RpcRequest {\n    return (context as any)[CURRENT_REQUEST];\n  }\n\n  /** The unique identifier of this request. */\n  public readonly id: string;\n\n  /** The operation for this request. */\n  public readonly operation: RpcOperation;\n\n  /** The parameters for this request. */\n  public parameters: any[];\n\n  /** The RPC client instance for this request. */\n  public readonly client: RpcInterface;\n\n  /** Convenience access to the protocol of this request. */\n  public readonly protocol: RpcProtocol;\n\n  /** The implementation response for this request. */\n  public readonly response: Promise<TResponse>;\n\n  /** The status of this request. */\n  public get status() { return this._status; }\n\n  /** Extended status information for this request (if available). */\n  public get extendedStatus() { return this._extendedStatus; }\n\n  /** The last submission for this request. */\n  public get lastSubmitted() { return this._lastSubmitted; }\n\n  /** The last status update received for this request. */\n  public get lastUpdated() { return this._lastUpdated; }\n\n  /** The target interval (in milliseconds) between submission attempts for this request. */\n  public retryInterval: number;\n\n  /** Whether a connection is active for this request. */\n  public get connecting() { return this._connecting; }\n\n  /** Whether this request is pending. */\n  public get pending(): boolean {\n    switch (this.status) {\n      case RpcRequestStatus.Submitted:\n      case RpcRequestStatus.Pending: {\n        return true;\n      }\n\n      default: {\n        return false;\n      }\n    }\n  }\n\n  /** The elapsed time for this request. */\n  public get elapsed(): number {\n    return this._lastUpdated - this._created;\n  }\n\n  /** A protocol-specific path identifier for this request. */\n  public path: string;\n\n  /** A protocol-specific method identifier for this request. */\n  public method: string;\n\n  /** Finds the first parameter of a given structural type if present. */\n  public findParameterOfType<T>(requiredProperties: { [index: string]: string }): T | undefined {\n    for (const param of this.parameters) {\n      for (const prop of Object.getOwnPropertyNames(requiredProperties)) {\n        if (param.hasOwnProperty(prop) && typeof (param[prop]) === requiredProperties[prop]) {\n          return param;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  /** Finds the first IModelTokenProps parameter if present. */\n  public findTokenPropsParameter(): IModelTokenProps | undefined {\n    if (RpcConfiguration.developmentMode) {\n      return this.findParameterOfType({ iModelId: \"string\" });\n    } else {\n      return this.findParameterOfType({ iModelId: \"string\", contextId: \"string\" });\n    }\n\n  }\n\n  /** The raw implementation response for this request. */\n  public get rawResponse(): Promise<Response> {\n    this._hasRawListener = true;\n    return this._rawPromise;\n  }\n\n  /** Constructs an RPC request. */\n  public constructor(client: RpcInterface, operation: string, parameters: any[]) {\n    this._created = new Date().getTime();\n    this.path = \"\";\n    this.method = \"\";\n    this.client = client;\n    this.protocol = client.configuration.protocol;\n    this.operation = RpcOperation.lookup(client.constructor as any, operation);\n    this.parameters = parameters;\n    this.retryInterval = this.operation.policy.retryInterval(client.configuration);\n    this.response = new Promise((resolve, reject) => { this._resolve = resolve; this._reject = reject; });\n    this._rawPromise = new Promise((resolve, reject) => { this._resolveRaw = resolve; this._rejectRaw = reject; });\n    this.id = RpcConfiguration.requestContext.getId(this) || Guid.createValue();\n    this.setStatus(RpcRequestStatus.Created);\n    this.operation.policy.requestCallback(this);\n  }\n\n  /** Override to send the request. */\n  protected abstract send(): Promise<number>;\n\n  /** Override to load response value. */\n  protected abstract load(): Promise<RpcSerializedValue>;\n\n  /** Override to set request header values. */\n  protected abstract setHeader(name: string, value: string): void;\n\n  /** Sets the last updated time for the request. */\n  protected setLastUpdatedTime() {\n    this._lastUpdated = new Date().getTime();\n  }\n\n  /* @internal */\n  public async submit(): Promise<void> {\n    if (!this._active)\n      return;\n\n    this._lastSubmitted = new Date().getTime();\n\n    if (this.status === RpcRequestStatus.Created || this.status === RpcRequestStatus.NotFound) {\n      this.setStatus(RpcRequestStatus.Submitted);\n    }\n\n    try {\n      this._connecting = true;\n      this.protocol.events.raiseEvent(RpcProtocolEvent.RequestCreated, this);\n      const sent = this.setHeaders().then(() => this.send());\n      this.operation.policy.sentCallback(this);\n      const response: number = await sent;\n\n      const status = this.protocol.getStatus(response);\n\n      if (this._hasRawListener && status === RpcRequestStatus.Resolved && typeof (this._response) !== \"undefined\") {\n        this._connecting = false;\n        this.resolveRaw();\n      } else {\n        this.protocol.events.raiseEvent(RpcProtocolEvent.ResponseLoading, this);\n\n        if (status === RpcRequestStatus.Unknown) {\n          this._connecting = false;\n          this.handleUnknownResponse(response);\n          return;\n        }\n\n        const value = await this.load();\n        this.protocol.events.raiseEvent(RpcProtocolEvent.ResponseLoaded, this);\n        this._connecting = false;\n        this.handleResponse(response, value);\n      }\n    } catch (err) {\n      this.protocol.events.raiseEvent(RpcProtocolEvent.ConnectionErrorReceived, this, err);\n      this._connecting = false;\n      this.reject(err);\n    }\n  }\n\n  protected handleUnknownResponse(code: number) {\n    this.reject(new IModelError(BentleyStatus.ERROR, `Unknown response ${code}.`));\n  }\n\n  private handleResponse(code: number, value: RpcSerializedValue) {\n    const status = this.protocol.getStatus(code);\n\n    switch (status) {\n      case RpcRequestStatus.Resolved: {\n        return this.handleResolved(value);\n      }\n\n      case RpcRequestStatus.Rejected: {\n        return this.handleRejected(value);\n      }\n\n      case RpcRequestStatus.Pending: {\n        return this.setPending(status, value.objects);\n      }\n\n      case RpcRequestStatus.NotFound: {\n        return this.handleNotFound(status, value);\n      }\n    }\n  }\n\n  private handleResolved(value: RpcSerializedValue) {\n    try {\n      this._raw = value.objects;\n      const result: TResponse = RpcMarshaling.deserialize(this.protocol, value);\n\n      if (ArrayBuffer.isView(result)) {\n        this._raw = result.buffer;\n      }\n\n      return this.resolve(result);\n    } catch (err) {\n      return this.reject(err);\n    }\n  }\n\n  private handleRejected(value: RpcSerializedValue) {\n    this.protocol.events.raiseEvent(RpcProtocolEvent.BackendErrorReceived, this);\n\n    try {\n      const error = RpcMarshaling.deserialize(this.protocol, value);\n      const hasInfo = error && typeof (error) === \"object\" && error.hasOwnProperty(\"name\") && error.hasOwnProperty(\"message\");\n      const name = hasInfo ? error.name : \"\";\n      const message = hasInfo ? error.message : \"\";\n      const errorNumber = (hasInfo && error.hasOwnProperty(\"errorNumber\")) ? error.errorNumber : BentleyStatus.ERROR;\n      return this.reject(new BackendError(errorNumber, name, message, Logger.logError, CommonLoggerCategory.RpcInterfaceFrontend, () => error));\n    } catch (err) {\n      return this.reject(err);\n    }\n  }\n\n  private handleNotFound(status: RpcRequestStatus, value: RpcSerializedValue) {\n    const response = RpcMarshaling.deserialize(this.protocol, value);\n    this.setStatus(status);\n\n    let resubmitted = false;\n    RpcRequest.notFoundHandlers.raiseEvent(this, response, () => {\n      if (resubmitted)\n        throw new IModelError(BentleyStatus.ERROR, `Already resubmitted using this handler.`);\n\n      resubmitted = true;\n      this.submit(); // tslint:disable-line:no-floating-promises\n    }, (reason: any) => this.reject(reason));\n    return;\n  }\n\n  private resolve(result: TResponse): void {\n    if (!this._active)\n      return;\n\n    this._active = false;\n    this.setLastUpdatedTime();\n    this._resolve(result);\n\n    if (this._hasRawListener) {\n      if (typeof (this._raw) === \"undefined\") {\n        throw new IModelError(BentleyStatus.ERROR, \"Cannot access raw response.\");\n      }\n\n      this._resolveRaw(new ResponseLike(this._raw));\n    }\n\n    this.setStatus(RpcRequestStatus.Resolved);\n    this.dispose();\n  }\n\n  private resolveRaw() {\n    if (typeof (this._response) === \"undefined\") {\n      throw new IModelError(BentleyStatus.ERROR, \"Cannot access raw response.\");\n    }\n\n    this._active = false;\n    this.setLastUpdatedTime();\n    this._resolveRaw(this._response);\n    this.setStatus(RpcRequestStatus.Resolved);\n    this.dispose();\n  }\n\n  protected reject(reason: any): void {\n    if (!this._active)\n      return;\n\n    this._active = false;\n    this.setLastUpdatedTime();\n    this._reject(reason);\n\n    if (this._hasRawListener) {\n      this._rejectRaw(reason);\n    }\n\n    this.setStatus(RpcRequestStatus.Rejected);\n    this.dispose();\n  }\n\n  /** @internal */\n  public dispose(): void {\n    this.setStatus(RpcRequestStatus.Disposed);\n    this._raw = undefined;\n    this._response = undefined;\n\n    const client = this.client as any;\n    if (client[CURRENT_REQUEST] === this) {\n      client[CURRENT_REQUEST] = undefined;\n    }\n  }\n\n  private setPending(status: RpcRequestStatus.Pending, extendedStatus: string): void {\n    if (!this._active)\n      return;\n\n    this.setLastUpdatedTime();\n    this._extendedStatus = extendedStatus;\n    this.setStatus(status);\n    RpcRequest.events.raiseEvent(RpcRequestEvent.PendingUpdateReceived, this);\n  }\n\n  private async setHeaders(): Promise<void> {\n    const headerNames: SerializedClientRequestContext = this.protocol.serializedClientRequestContextHeaderNames;\n    const headerValues: SerializedClientRequestContext = await RpcConfiguration.requestContext.serialize(this);\n\n    if (headerNames.id)\n      this.setHeader(headerNames.id, headerValues.id || this.id); // Cannot be empty\n\n    if (headerNames.applicationVersion)\n      this.setHeader(headerNames.applicationVersion, headerValues.applicationVersion);\n\n    if (headerNames.applicationId)\n      this.setHeader(headerNames.applicationId, headerValues.applicationId);\n\n    if (headerNames.sessionId)\n      this.setHeader(headerNames.sessionId, headerValues.sessionId);\n\n    if (headerNames.authorization && headerValues.authorization)\n      this.setHeader(headerNames.authorization, headerValues.authorization);\n\n    if (headerNames.userId && headerValues.userId)\n      this.setHeader(headerNames.userId, headerValues.userId);\n  }\n\n  private setStatus(status: RpcRequestStatus): void {\n    if (this._status === status)\n      return;\n\n    this._status = status;\n    RpcRequest.events.raiseEvent(RpcRequestEvent.StatusChanged, this);\n  }\n}\n\n/** @internal */\nexport const initializeRpcRequest = (() => {\n  let initialized = false;\n\n  return () => {\n    if (initialized) {\n      return;\n    }\n\n    initialized = true;\n\n    RpcRequest.events.addListener((type, request) => {\n      if (type !== RpcRequestEvent.StatusChanged)\n        return;\n\n      switch (request.status) {\n        case RpcRequestStatus.Submitted: {\n          aggregateLoad.lastRequest = request.lastSubmitted;\n          break;\n        }\n\n        case RpcRequestStatus.Pending:\n        case RpcRequestStatus.Resolved:\n        case RpcRequestStatus.Rejected: {\n          aggregateLoad.lastResponse = request.lastUpdated;\n          break;\n        }\n      }\n    });\n\n    RpcProtocol.events.addListener((type) => {\n      const now = new Date().getTime();\n\n      switch (type) {\n        case RpcProtocolEvent.RequestReceived: {\n          aggregateLoad.lastRequest = now;\n          break;\n        }\n\n        case RpcProtocolEvent.BackendReportedPending:\n        case RpcProtocolEvent.BackendErrorOccurred:\n        case RpcProtocolEvent.BackendResponseCreated: {\n          aggregateLoad.lastResponse = now;\n          break;\n        }\n      }\n    });\n  };\n})();\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\nimport { IModelError } from \"../../IModelError\";\nimport { SerializedRpcRequest, RpcRequestFulfillment } from \"../core/RpcProtocol\";\nimport { ElectronRpcRequest } from \"./ElectronRpcRequest\";\nimport { RpcSerializedValue } from \"../core/RpcMarshaling\";\nimport { ElectronRpcProtocol } from \"./ElectronRpcProtocol\";\n\nconst OBJECTS_CHANNEL = \"@bentley/imodeljs-common/ElectronRpcProtocol/objects\";\nconst DATA_CHANNEL = \"@bentley/imodeljs-common/ElectronRpcProtocol/data\";\n\n/** @internal */\nexport const interop = (() => {\n  let electron = null;\n  if (typeof (global) !== \"undefined\" && global && global.process && (global.process as any).type) {\n    // tslint:disable-next-line:no-eval\n    electron = eval(\"require\")(\"electron\");\n  }\n\n  return electron;\n})();\n\ninterface PartialPayload { id: string; index: number; data: Uint8Array; }\n\n/** @internal */\nexport interface IpcTransportMessage { id: string; parameters?: RpcSerializedValue; result?: RpcSerializedValue; }\n\n/** @internal */\nexport abstract class ElectronIpcTransport<TIn extends IpcTransportMessage = IpcTransportMessage, TOut extends IpcTransportMessage = IpcTransportMessage> {\n  private _ipc: any;\n  private _partials: Map<string, { message: TIn; received: number; } | PartialPayload[]>;\n\n  public sendRequest(request: SerializedRpcRequest) {\n    const value = this._extractValue(request);\n    this._send(request, value);\n  }\n\n  public constructor(ipc: any) {\n    this._ipc = ipc;\n    this._partials = new Map();\n    this._setupDataChannel();\n    this._setupObjectsChannel();\n  }\n\n  private _setupDataChannel() {\n    this._ipc.on(DATA_CHANNEL, async (evt: any, chunk: PartialPayload) => {\n      let pending = this._partials.get(chunk.id);\n      if (!pending) {\n        pending = [];\n        this._partials.set(chunk.id, pending);\n      }\n\n      if (Array.isArray(pending)) {\n        pending.push(chunk);\n      } else {\n        ++pending.received;\n\n        const value = this._extractValue(pending.message);\n        value.data[chunk.index] = chunk.data;\n\n        if (pending.received === (value.chunks || 0)) {\n          this.handleComplete(pending.message.id, evt);\n        }\n      }\n    });\n  }\n\n  private _setupObjectsChannel() {\n    this._ipc.on(OBJECTS_CHANNEL, async (evt: any, message: TIn) => {\n      const pending = this._partials.get(message.id);\n      if (pending && !Array.isArray(pending)) {\n        throw new IModelError(BentleyStatus.ERROR, `Message already received for id \"${message.id}\".`);\n      }\n\n      const partial = { message, received: 0 };\n      this._partials.set(message.id, partial);\n      const value = this._extractValue(partial.message);\n\n      if (pending && Array.isArray(pending)) {\n        for (const chunk of pending) {\n          ++partial.received;\n          value.data[chunk.index] = chunk.data;\n        }\n      }\n\n      if (partial.received === (value.chunks || 0)) {\n        this.handleComplete(message.id, evt);\n      }\n    });\n  }\n\n  private _extractValue(t: IpcTransportMessage): RpcSerializedValue {\n    if (t.parameters) {\n      return t.parameters;\n    }\n\n    if (t.result) {\n      return t.result;\n    }\n\n    throw new IModelError(BentleyStatus.ERROR, \"Unknown value type.\");\n  }\n\n  private _send(message: IpcTransportMessage, value: RpcSerializedValue, evt?: any) {\n    const chunks = value.data;\n    if (chunks.length) {\n      value.chunks = chunks.length;\n      value.data = [];\n    }\n\n    (evt ? evt.sender : this._ipc).send(OBJECTS_CHANNEL, message);\n\n    for (let index = 0; index !== chunks.length; ++index) {\n      const chunk: PartialPayload = { id: message.id, index, data: chunks[index] };\n      (evt ? evt.sender : this._ipc).send(DATA_CHANNEL, chunk);\n    }\n  }\n\n  protected abstract handleComplete(id: string, evt: any): void;\n\n  protected sendResponse(message: TOut, evt: any) {\n    const value = this._extractValue(message);\n    this._send(message, value, evt);\n  }\n\n  protected loadMessage(id: string) {\n    const partial = this._partials.get(id);\n    if (!partial || Array.isArray(partial)) {\n      throw new IModelError(BentleyStatus.ERROR, `Incomplete transmission for id \"${id}\".`);\n    }\n\n    this._partials.delete(id);\n    return partial.message;\n  }\n}\n\nclass FrontendIpcTransport extends ElectronIpcTransport<RpcRequestFulfillment> {\n  protected async handleComplete(id: string) {\n    const message = this.loadMessage(id);\n    const protocol = ElectronRpcProtocol.instances.get(message.interfaceName) as ElectronRpcProtocol;\n    const request = protocol.requests.get(message.id) as ElectronRpcRequest;\n    protocol.requests.delete(message.id);\n    request.notifyResponse(message);\n  }\n}\n\nclass BackendIpcTransport extends ElectronIpcTransport<SerializedRpcRequest, RpcRequestFulfillment> {\n  protected async handleComplete(id: string, evt: any) {\n    const message = this.loadMessage(id);\n\n    let response: RpcRequestFulfillment;\n    try {\n      const protocol = ElectronRpcProtocol.obtainInstance(message);\n      response = await protocol.fulfill(message);\n    } catch (err) {\n      response = await RpcRequestFulfillment.forUnknownError(message, err);\n    }\n\n    this.sendResponse(response, evt);\n  }\n}\n\nlet transport: ElectronIpcTransport | undefined;\n\nif (interop) {\n  if (interop.ipcMain) {\n    transport = new BackendIpcTransport(interop.ipcMain);\n  } else if (interop.ipcRenderer) {\n    transport = new FrontendIpcTransport(interop.ipcRenderer);\n  }\n}\n\n/** @internal */\nexport const ipcTransport = transport;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcManager } from \"../../RpcManager\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\nimport { interop } from \"./ElectronIpcTransport\";\nimport { ElectronRpcProtocol } from \"./ElectronRpcProtocol\";\n\n/** Initialization parameters for ElectronRpcConfiguration.\n * @beta\n */\nexport interface ElectronRpcParams {\n  protocol?: typeof ElectronRpcProtocol;\n}\n\n/** RPC interface configuration for an Electron-based application.\n * @beta\n */\nexport abstract class ElectronRpcConfiguration extends RpcConfiguration {\n  public static get isElectron() { return interop !== null; }\n\n  /** The protocol of the configuration. */\n  public abstract protocol: ElectronRpcProtocol;\n}\n\n/** Coordinates usage of RPC interfaces for an Electron-based application.\n * @beta\n */\nexport class ElectronRpcManager extends RpcManager {\n  /** Initializes ElectronRpcManager for the frontend of an application. */\n  public static initializeClient(params: ElectronRpcParams, interfaces: RpcInterfaceDefinition[]): ElectronRpcConfiguration {\n    return ElectronRpcManager.performInitialization(params, interfaces);\n  }\n\n  /** Initializes ElectronRpcManager for the backend of an application. */\n  public static initializeImpl(params: ElectronRpcParams, interfaces: RpcInterfaceDefinition[]): ElectronRpcConfiguration {\n    return ElectronRpcManager.performInitialization(params, interfaces);\n  }\n\n  private static performInitialization(params: ElectronRpcParams, interfaces: RpcInterfaceDefinition[]): ElectronRpcConfiguration {\n    const protocol = (params.protocol || ElectronRpcProtocol);\n\n    const config = class extends ElectronRpcConfiguration {\n      public interfaces = () => interfaces;\n      public protocol: ElectronRpcProtocol = new protocol(this);\n    };\n\n    for (const def of interfaces) {\n      RpcConfiguration.assign(def, () => config);\n    }\n\n    const instance = RpcConfiguration.obtain(config);\n    RpcConfiguration.initializeInterfaces(instance);\n\n    return instance;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\nimport { IModelError } from \"../../IModelError\";\nimport { RpcInterface, RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcProtocol, SerializedRpcRequest } from \"../core/RpcProtocol\";\nimport { RpcRegistry } from \"../core/RpcRegistry\";\nimport { ElectronRpcConfiguration } from \"./ElectronRpcManager\";\nimport { ElectronRpcRequest } from \"./ElectronRpcRequest\";\n\n/** RPC interface protocol for an Electron-based application.\n * @beta\n */\nexport class ElectronRpcProtocol extends RpcProtocol {\n  public static instances: Map<string, ElectronRpcProtocol> = new Map();\n\n  public static obtainInstance(request: SerializedRpcRequest) {\n    const interfaceName = request.operation.interfaceDefinition;\n\n    let protocol = ElectronRpcProtocol.instances.get(interfaceName) as ElectronRpcProtocol;\n    if (!protocol) {\n      RpcRegistry.instance.lookupImpl(interfaceName);\n      protocol = ElectronRpcProtocol.instances.get(interfaceName) as ElectronRpcProtocol;\n    }\n\n    return protocol;\n  }\n\n  /** The RPC request class for this protocol. */\n  public readonly requestType = ElectronRpcRequest;\n\n  /** Specifies where to break large binary request payloads. */\n  public transferChunkThreshold = 48 * 1024 * 1024;\n\n  /** @internal */\n  public requests: Map<string, ElectronRpcRequest> = new Map();\n\n  /** Constructs an Electron protocol. */\n  public constructor(configuration: ElectronRpcConfiguration) {\n    super(configuration);\n  }\n\n  /** @internal */\n  public onRpcClientInitialized(definition: RpcInterfaceDefinition, _client: RpcInterface): void {\n    this.registerInterface(definition);\n  }\n\n  /** @internal */\n  public onRpcImplInitialized(definition: RpcInterfaceDefinition, _impl: RpcInterface): void {\n    this.registerInterface(definition);\n  }\n\n  /** @internal */\n  public onRpcClientTerminated(definition: RpcInterfaceDefinition, _client: RpcInterface): void {\n    this.purgeInterface(definition);\n  }\n\n  /** @internal */\n  public onRpcImplTerminated(definition: RpcInterfaceDefinition, _impl: RpcInterface): void {\n    this.purgeInterface(definition);\n  }\n\n  private registerInterface(definition: RpcInterfaceDefinition) {\n    if (ElectronRpcProtocol.instances.has(definition.interfaceName))\n      throw new IModelError(BentleyStatus.ERROR, `RPC interface \"${definition.interfaceName}\"\" is already associated with a protocol.`);\n\n    ElectronRpcProtocol.instances.set(definition.interfaceName, this);\n  }\n\n  private purgeInterface(definition: RpcInterfaceDefinition) {\n    ElectronRpcProtocol.instances.delete(definition.interfaceName);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcRequest } from \"../core/RpcRequest\";\nimport { RpcRequestFulfillment } from \"../core/RpcProtocol\";\nimport { ElectronRpcProtocol } from \"./ElectronRpcProtocol\";\nimport { RpcProtocolEvent } from \"../core/RpcConstants\";\nimport { ipcTransport } from \"./ElectronIpcTransport\";\n\n/** @beta */\nexport class ElectronRpcRequest extends RpcRequest {\n  private _res: (value: number) => void = () => undefined;\n  private _fulfillment: RpcRequestFulfillment | undefined = undefined;\n\n  /** Convenience access to the protocol of this request. */\n  public readonly protocol: ElectronRpcProtocol = this.client.configuration.protocol as any;\n\n  /** Sends the request. */\n  protected async send() {\n    try {\n      this.protocol.requests.set(this.id, this);\n      const request = await this.protocol.serialize(this);\n      ipcTransport!.sendRequest(request);\n    } catch (e) {\n      this.protocol.events.raiseEvent(RpcProtocolEvent.ConnectionErrorReceived, this);\n    }\n\n    return new Promise<number>((resolve) => { this._res = resolve; });\n  }\n\n  /** Loads the request. */\n  protected async load() {\n    const fulfillment = this._fulfillment;\n    if (!fulfillment) {\n      return Promise.reject(\"No request fulfillment available.\");\n    }\n\n    return Promise.resolve(fulfillment.result);\n  }\n\n  /** Sets request header values. */\n  protected setHeader(_name: string, _value: string): void {\n    // No implementation\n  }\n\n  /** @internal */\n  public notifyResponse(fulfillment: RpcRequestFulfillment) {\n    this._fulfillment = fulfillment;\n    this._res(fulfillment.status);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { RpcInterfaceDefinition } from \"../../RpcInterface\";\r\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\r\nimport { RpcEndpoint, RpcMobilePlatform } from \"../core/RpcConstants\";\r\nimport { interop, MobileRpcProtocol } from \"./MobileRpcProtocol\";\r\n\r\n/** Holds configuration for the RpcInterfaces used by the application.\r\n * @beta\r\n */\r\nexport abstract class MobileRpcConfiguration extends RpcConfiguration {\r\n  public abstract protocol: MobileRpcProtocol;\r\n  private static getMobilePlatform(): RpcMobilePlatform {\r\n    if (typeof window === \"undefined\") {\r\n      return RpcMobilePlatform.Unknown;\r\n    }\r\n\r\n    const win: any = window;\r\n    const userAgent = win.navigator.userAgent || win.navigator.vendor || win.opera;\r\n\r\n    if (/android/i.test(userAgent)) {\r\n      return RpcMobilePlatform.Android;\r\n    }\r\n\r\n    if (/iPad|iPhone|iPod/.test(userAgent) && !win.MSStream) {\r\n      return RpcMobilePlatform.iOS;\r\n    }\r\n\r\n    return RpcMobilePlatform.Unknown;\r\n  }\r\n\r\n  /** Return type of mobile platform using browser userAgent */\r\n  public static readonly platform: RpcMobilePlatform = MobileRpcConfiguration.getMobilePlatform();\r\n\r\n  /** Check if running backend running on mobile */\r\n  public static get isMobileBackend() { return interop !== null; }\r\n\r\n  /** Check if running backend running on mobile */\r\n  public static get isMobileFrontend() { return MobileRpcConfiguration.platform !== RpcMobilePlatform.Unknown; }\r\n\r\n  /** Check if running backend running on wkwebview on ios */\r\n  public static get isIOSFrontend() { return MobileRpcConfiguration.isMobileFrontend && (window as any).webkit && (window as any).webkit.messageHandlers; }\r\n}\r\n\r\n/** Coordinates usage of RPC interfaces for an Mobile-based application.\r\n * @beta\r\n */\r\nexport class MobileRpcManager {\r\n  private static performInitialization(interfaces: RpcInterfaceDefinition[], endPoint: RpcEndpoint): MobileRpcConfiguration {\r\n    const config = class extends MobileRpcConfiguration {\r\n      public interfaces = () => interfaces;\r\n      public protocol: MobileRpcProtocol = new MobileRpcProtocol(this, endPoint);\r\n    };\r\n\r\n    for (const def of interfaces) {\r\n      RpcConfiguration.assign(def, () => config);\r\n    }\r\n\r\n    const instance = RpcConfiguration.obtain(config);\r\n    RpcConfiguration.initializeInterfaces(instance);\r\n\r\n    return instance;\r\n  }\r\n\r\n  /** Initializes MobileRpcManager for the frontend of an application. */\r\n  public static initializeClient(interfaces: RpcInterfaceDefinition[]): MobileRpcConfiguration {\r\n    return MobileRpcManager.performInitialization(interfaces, RpcEndpoint.Frontend);\r\n  }\r\n  /** Initializes MobileRpcManager for the backend of an application. */\r\n  public static initializeImpl(interfaces: RpcInterfaceDefinition[]): MobileRpcConfiguration {\r\n    return MobileRpcManager.performInitialization(interfaces, RpcEndpoint.Backend);\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { RpcProtocol, SerializedRpcRequest, RpcRequestFulfillment } from \"../core/RpcProtocol\";\r\nimport { MobileRpcConfiguration } from \"./MobileRpcManager\";\r\nimport { MobileRpcRequest } from \"./MobileRpcRequest\";\r\nimport { BentleyStatus } from \"@bentley/bentleyjs-core\";\r\nimport { IModelError } from \"../../IModelError\";\r\nimport { RpcSerializedValue } from \"../core/RpcMarshaling\";\r\nimport { RpcEndpoint } from \"../core/RpcConstants\";\r\n/** @internal */\r\ndeclare var bentley: any;\r\n\r\n/** @internal */\r\nexport const CHANNEL = \"@bentley/imodeljs-mobilegateway\";\r\n\r\n/** @internal */\r\nexport const interop = (() => {\r\n  let mobilegateway = null;\r\n\r\n  if (typeof window === \"undefined\" && typeof (bentley) !== \"undefined\") {\r\n    // tslint:disable-next-line:no-eval\r\n    mobilegateway = bentley.imodeljs.servicesTier.require(CHANNEL);\r\n  }\r\n\r\n  return mobilegateway;\r\n})();\r\n\r\n/** @beta */\r\nexport type MobileRpcChunks = Array<string | Uint8Array>;\r\n\r\ninterface MobileRpcGateway {\r\n  handler: (payload: ArrayBuffer | string) => void;\r\n  sendString: (message: string) => void;\r\n  sendBinary: (message: Uint8Array) => void;\r\n  port: number;\r\n}\r\n\r\n/** RPC interface protocol for an Mobile-based application.\r\n * @beta\r\n */\r\nexport class MobileRpcProtocol extends RpcProtocol {\r\n  public socket: WebSocket = (undefined as any);\r\n  public requests: Map<string, MobileRpcRequest> = new Map();\r\n  private _pending: MobileRpcChunks[] = [];\r\n  private _capacity: number = 1;\r\n  private _sendInterval: number | undefined = undefined;\r\n  private _sendIntervalHandler = () => this.trySend();\r\n  public readonly requestType = MobileRpcRequest;\r\n  private _partialRequest: SerializedRpcRequest | undefined = undefined;\r\n  private _partialFulfillment: RpcRequestFulfillment | undefined = undefined;\r\n  private _partialData: Uint8Array[] = [];\r\n\r\n  public static async encodeRequest(request: MobileRpcRequest): Promise<MobileRpcChunks> {\r\n    const serialized = await request.protocol.serialize(request);\r\n    const data = serialized.parameters.data;\r\n    serialized.parameters.data = data.map((v) => v.byteLength) as any[];\r\n    return [JSON.stringify(serialized), ...data];\r\n  }\r\n\r\n  private static encodeResponse(fulfillment: RpcRequestFulfillment): MobileRpcChunks {\r\n    const data = fulfillment.result.data;\r\n    fulfillment.result.data = data.map((v) => v.byteLength) as any[];\r\n    const raw = fulfillment.rawResult;\r\n    fulfillment.rawResult = undefined;\r\n    const encoded = [JSON.stringify(fulfillment), ...data];\r\n    fulfillment.rawResult = raw;\r\n    return encoded;\r\n  }\r\n\r\n  constructor(configuration: MobileRpcConfiguration, endPoint: RpcEndpoint) {\r\n    super(configuration);\r\n\r\n    if (endPoint === RpcEndpoint.Frontend) {\r\n      this.initializeFrontend();\r\n    } else if (endPoint === RpcEndpoint.Backend) {\r\n      this.initializeBackend();\r\n    }\r\n  }\r\n\r\n  private initializeFrontend() {\r\n    if (typeof (WebSocket) === \"undefined\") {\r\n      throw new IModelError(BentleyStatus.ERROR, \"MobileRpcProtocol on frontend require websocket to work\");\r\n    }\r\n\r\n    this.socket = new WebSocket(`ws://localhost:${window.location.hash.substr(1)}`);\r\n    this.socket.binaryType = \"arraybuffer\";\r\n    this.socket.addEventListener(\"message\", async (event) => this.handleMessageFromBackend(event.data));\r\n    this.socket.addEventListener(\"open\", (_event) => this.scheduleSend());\r\n  }\r\n\r\n  private scheduleSend() {\r\n    if (!this._pending.length) {\r\n      return;\r\n    }\r\n\r\n    this.trySend();\r\n\r\n    if (this._pending.length && typeof (this._sendInterval) === \"undefined\") {\r\n      this._sendInterval = window.setInterval(this._sendIntervalHandler, 0);\r\n    }\r\n  }\r\n\r\n  private trySend() {\r\n    if (this.socket.readyState !== WebSocket.OPEN) {\r\n      return;\r\n    }\r\n\r\n    while (this._capacity !== 0 && this._pending.length) {\r\n      --this._capacity;\r\n      const next = this._pending.shift()!;\r\n      for (const chunk of next) {\r\n        this.socket.send(chunk);\r\n      }\r\n    }\r\n\r\n    if (!this._pending.length && typeof (this._sendInterval) !== \"undefined\") {\r\n      window.clearInterval(this._sendInterval);\r\n      this._sendInterval = undefined;\r\n    }\r\n  }\r\n\r\n  private handleMessageFromBackend(data: string | ArrayBuffer) {\r\n    if (typeof (data) === \"string\") {\r\n      this.handleStringFromBackend(data);\r\n    } else {\r\n      this.handleBinaryFromBackend(data);\r\n    }\r\n  }\r\n\r\n  private handleStringFromBackend(data: string) {\r\n    if (this._partialFulfillment) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (already receiving response).\");\r\n    }\r\n\r\n    const response = JSON.parse(data) as RpcRequestFulfillment;\r\n    this._partialFulfillment = response;\r\n\r\n    if (!response.result.data.length) {\r\n      this.notifyResponse();\r\n    }\r\n  }\r\n\r\n  private handleBinaryFromBackend(data: ArrayBuffer) {\r\n    const fulfillment = this._partialFulfillment;\r\n    if (!fulfillment) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (no response received).\");\r\n    }\r\n\r\n    this._partialData.push(new Uint8Array(data));\r\n    if (this._partialData.length === fulfillment.result.data.length) {\r\n      this.notifyResponse();\r\n    }\r\n  }\r\n\r\n  private notifyResponse() {\r\n    const response = this._partialFulfillment;\r\n    if (!response) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (no response exists).\");\r\n    }\r\n\r\n    ++this._capacity;\r\n    this.consumePartialData(response.result);\r\n    this._partialFulfillment = undefined;\r\n\r\n    const request = this.requests.get(response.id) as MobileRpcRequest;\r\n    this.requests.delete(response.id);\r\n    request.notifyResponse(response);\r\n  }\r\n\r\n  private consumePartialData(value: RpcSerializedValue) {\r\n    for (let i = 0, l = value.data.length; i !== l; ++i) {\r\n      value.data[i] = this._partialData[i];\r\n    }\r\n\r\n    this._partialData.length = 0;\r\n  }\r\n\r\n  private initializeBackend() {\r\n    const mobilegateway: MobileRpcGateway = interop as MobileRpcGateway;\r\n    if (mobilegateway === undefined || mobilegateway == null) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"MobileRpcProtocol on backend require native bridge to be setup\");\r\n    }\r\n\r\n    mobilegateway.handler = (payload) => this.handleMessageFromFrontend(payload);\r\n    (self as any).__imodeljs_mobilegateway_handler__ = mobilegateway.handler;\r\n  }\r\n\r\n  private handleMessageFromFrontend(data: string | ArrayBuffer) {\r\n    if (typeof (data) === \"string\") {\r\n      this.handleStringFromFrontend(data);\r\n    } else {\r\n      this.handleBinaryFromFrontend(data);\r\n    }\r\n  }\r\n\r\n  private handleStringFromFrontend(data: string) {\r\n    if (this._partialRequest) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (already receiving request).\");\r\n    }\r\n\r\n    const request = JSON.parse(data) as SerializedRpcRequest;\r\n    this._partialRequest = request;\r\n\r\n    if (!request.parameters.data.length) {\r\n      this.notifyRequest(); // tslint:disable-line:no-floating-promises\r\n    }\r\n  }\r\n\r\n  private handleBinaryFromFrontend(data: ArrayBuffer) {\r\n    const request = this._partialRequest;\r\n    if (!request) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (no request received).\");\r\n    }\r\n\r\n    this._partialData.push(new Uint8Array(data));\r\n    if (this._partialData.length === request.parameters.data.length) {\r\n      this.notifyRequest(); // tslint:disable-line:no-floating-promises\r\n    }\r\n  }\r\n\r\n  private async notifyRequest() {\r\n    const request = this._partialRequest;\r\n    if (!request) {\r\n      throw new IModelError(BentleyStatus.ERROR, \"Invalid state (no request exists).\");\r\n    }\r\n\r\n    this.consumePartialData(request.parameters);\r\n    this._partialRequest = undefined;\r\n\r\n    const fulfillment = await this.fulfill(request);\r\n    const response = MobileRpcProtocol.encodeResponse(fulfillment);\r\n    this.sendToFrontend(response);\r\n  }\r\n\r\n  public sendToBackend(message: MobileRpcChunks): void {\r\n    this._pending.push(message);\r\n    this.scheduleSend();\r\n  }\r\n\r\n  private sendToFrontend(message: MobileRpcChunks): void {\r\n    const mobilegateway: MobileRpcGateway = interop as MobileRpcGateway;\r\n\r\n    for (const chunk of message) {\r\n      if (typeof (chunk) === \"string\") {\r\n        mobilegateway.sendString(chunk);\r\n      } else {\r\n        mobilegateway.sendBinary(chunk);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { RpcRequestFulfillment } from \"../core/RpcProtocol\";\r\nimport { RpcRequest } from \"../core/RpcRequest\";\r\nimport { MobileRpcProtocol } from \"./MobileRpcProtocol\";\r\nimport { RpcSerializedValue } from \"../core/RpcMarshaling\";\r\n\r\n/** @beta */\r\nexport class MobileRpcRequest extends RpcRequest {\r\n  private _res: (value: number) => void = () => undefined;\r\n  private _fulfillment: RpcRequestFulfillment | undefined = undefined;\r\n\r\n  /** Convenience access to the protocol of this request. */\r\n  public readonly protocol: MobileRpcProtocol = this.client.configuration.protocol as any;\r\n\r\n  /** Sends the request. */\r\n  protected async send(): Promise<number> {\r\n    this.protocol.requests.set(this.id, this);\r\n    const parts = await MobileRpcProtocol.encodeRequest(this);\r\n    this.protocol.sendToBackend(parts);\r\n    return new Promise<number>((resolve) => { this._res = resolve; });\r\n  }\r\n\r\n  /** Loads the request. */\r\n  protected async load(): Promise<RpcSerializedValue> {\r\n    const fulfillment = this._fulfillment;\r\n    if (!fulfillment) {\r\n      return Promise.reject(\"No request fulfillment available.\");\r\n    }\r\n\r\n    return Promise.resolve(fulfillment.result);\r\n  }\r\n\r\n  /** Sets request header values. */\r\n  protected setHeader(_name: string, _value: string): void {\r\n    // No implementation\r\n  }\r\n\r\n  /** @internal */\r\n  public notifyResponse(fulfillment: RpcRequestFulfillment) {\r\n    this._fulfillment = fulfillment;\r\n    this._res(fulfillment.status);\r\n  }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcManager } from \"../../RpcManager\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\nimport { RpcRequest, RpcRequestEventHandler } from \"../core/RpcRequest\";\nimport { OpenAPIInfo } from \"./OpenAPI\";\nimport { BentleyCloudRpcProtocol } from \"./BentleyCloudRpcProtocol\";\nimport { RpcRequestEvent } from \"../core/RpcConstants\";\n\n/** Initialization parameters for BentleyCloudRpcConfiguration.\n * @public\n */\nexport interface BentleyCloudRpcParams {\n  /** Identifies the remote server that implements a set of RpcInterfaces. Note that the ID of the remote server is not a URI or hostname. It is a string that matches a key in the orchestrator's app registry. */\n  info: OpenAPIInfo;\n  /** The protocol for Bentley cloud RPC interface deployments */\n  protocol?: typeof BentleyCloudRpcProtocol;\n  /** The URI of the orchestrator that will route requests to the remote RpcInterface server. If not supplied, this default to the origin of the Web page. This is required only when calling initializeClient and only if the server is not the origin of the Web page. */\n  uriPrefix?: string;\n  /** Handler for RPC request events. */\n  pendingRequestListener?: RpcRequestEventHandler;\n}\n\n/** Operating parameters for Bentley cloud RPC interface deployments.\n * @public\n */\nexport abstract class BentleyCloudRpcConfiguration extends RpcConfiguration {\n  /** The protocol of the configuration. */\n  public abstract readonly protocol: BentleyCloudRpcProtocol;\n}\n\n/** Coordinates usage of RPC interfaces for Bentley cloud deployments.\n * @public\n */\nexport class BentleyCloudRpcManager extends RpcManager {\n  /** Initializes BentleyCloudRpcManager for the frontend of an application. */\n  public static initializeClient(params: BentleyCloudRpcParams, interfaces: RpcInterfaceDefinition[]): BentleyCloudRpcConfiguration {\n    return BentleyCloudRpcManager.performInitialization(params, interfaces);\n  }\n\n  /** Initializes BentleyCloudRpcManager for the backend of an application. */\n  public static initializeImpl(params: BentleyCloudRpcParams, interfaces: RpcInterfaceDefinition[]): BentleyCloudRpcConfiguration {\n    return BentleyCloudRpcManager.performInitialization(params, interfaces);\n  }\n\n  private static performInitialization(params: BentleyCloudRpcParams, interfaces: RpcInterfaceDefinition[]): BentleyCloudRpcConfiguration {\n    const protocol = class extends (params.protocol || BentleyCloudRpcProtocol) {\n      public pathPrefix = params.uriPrefix || \"\";\n      public info = params.info;\n    };\n\n    const config = class extends BentleyCloudRpcConfiguration {\n      public interfaces = () => interfaces;\n      public protocol: BentleyCloudRpcProtocol = new protocol(this);\n    };\n\n    for (const def of interfaces) {\n      RpcConfiguration.assign(def, () => config);\n    }\n\n    const instance = RpcConfiguration.obtain(config);\n    RpcConfiguration.initializeInterfaces(instance);\n\n    if (params.pendingRequestListener) {\n      const listener = params.pendingRequestListener;\n\n      RpcRequest.events.addListener((type, request) => {\n        if (type === RpcRequestEvent.PendingUpdateReceived && request.protocol === instance.protocol) {\n          listener(type, request);\n        }\n      });\n    }\n\n    return instance;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { assert, BentleyStatus, Logger, OpenMode, SerializedClientRequestContext } from \"@bentley/bentleyjs-core\";\nimport { URL } from \"url\";\nimport { IModelError } from \"../../IModelError\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\nimport { RpcOperation } from \"../core/RpcOperation\";\nimport { SerializedRpcOperation, SerializedRpcRequest } from \"../core/RpcProtocol\";\nimport { RpcRequest } from \"../core/RpcRequest\";\nimport { OpenAPIParameter } from \"./OpenAPI\";\nimport { WebAppRpcProtocol } from \"./WebAppRpcProtocol\";\nimport { IModelToken, IModelTokenProps } from \"../../IModel\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\n\nenum AppMode {\n  MilestoneReview = \"1\",\n  WorkGroupEdit = \"2\",\n}\n\n/** An http protocol for Bentley cloud RPC interface deployments.\n * @public\n */\nexport abstract class BentleyCloudRpcProtocol extends WebAppRpcProtocol {\n  public checkToken = true;\n\n  /** The name of various HTTP request headers based on client's request context */\n  public serializedClientRequestContextHeaderNames: SerializedClientRequestContext = {\n    /** The name of the HTTP request id header. */\n    id: \"X-Correlation-Id\",\n\n    /** The name of the HTTP application id header. */\n    applicationId: \"X-Application-Id\",\n\n    /** The name of the HTTP application version header. */\n    applicationVersion: \"X-Application-Version\",\n\n    /** The name of the HTTP session id header. */\n    sessionId: \"X-Session-Id\",\n\n    /** The name of the HTTP authorization header. */\n    authorization: \"Authorization\",\n\n    /** The id of the authorized user */\n    userId: \"X-User-Id\",\n  };\n\n  /** Returns the operation specified by an OpenAPI-compatible URI path. */\n  public getOperationFromPath(path: string): SerializedRpcOperation {\n    const url = new URL(path, \"https://localhost/\");\n    const components = url.pathname.split(\"/\");\n\n    const operationComponent = components.slice(-1)[0];\n    const encodedRequest = url.searchParams.get(\"parameters\") || \"\";\n\n    const firstHyphen = operationComponent.indexOf(\"-\");\n    const lastHyphen = operationComponent.lastIndexOf(\"-\");\n    const interfaceDefinition = operationComponent.slice(0, firstHyphen);\n    const interfaceVersion = operationComponent.slice(firstHyphen + 1, lastHyphen);\n    const operationName = operationComponent.slice(lastHyphen + 1);\n\n    return { interfaceDefinition, operationName, interfaceVersion, encodedRequest };\n  }\n\n  /** Supplies the OpenAPI-compatible URI path for an RPC operation. */\n  public supplyPathForOperation(operation: RpcOperation, request: RpcRequest | undefined) {\n    const prefix = this.pathPrefix;\n    const appTitle = this.info.title;\n    const appVersion = this.info.version;\n    const operationId = `${operation.interfaceDefinition.interfaceName}-${operation.interfaceVersion}-${operation.operationName}`;\n\n    let appMode: string;\n    let contextId: string;\n    let iModelId: string;\n    let routeChangeSetId: string | undefined;\n    /* Note: The changeSetId field is omitted in the route in the case of ReadWrite connections since the connection is generally expected to be at the\n     * latest version and not some specific changeSet. Also, for the first version (before any changeSets), the changeSetId in the route is arbitrarily\n     * set to \"0\" instead of an empty string, since the latter is more un-intuitive for a route. However, in all other use cases, including the changeSetId\n     * held by the IModelToken itself, the changeSetId of \"\" (i.e., empty string) signifies the first version - this is more intuitive and retains\n     * compatibility with the majority of use cases. */\n\n    if (request === undefined) {\n      appMode = \"{modeId}\";\n      contextId = \"{contextId}\";\n      iModelId = \"{iModelId}\";\n      routeChangeSetId = \"{changeSetId}\";\n    } else {\n      const token = operation.policy.token(request);\n      if (!token || (!token.contextId && !RpcConfiguration.developmentMode) || !token.iModelId)\n        throw new IModelError(BentleyStatus.ERROR, \"Invalid iModelToken for RPC operation request\", Logger.logError, CommonLoggerCategory.RpcInterfaceFrontend);\n\n      contextId = encodeURIComponent(token.contextId || \"\");\n      iModelId = encodeURIComponent(token.iModelId);\n\n      if (token.openMode === OpenMode.Readonly) {\n        appMode = AppMode.MilestoneReview;\n        assert(token.changeSetId !== undefined, \"ChangeSetId needs to be setup in IModelToken before open\");\n        routeChangeSetId = token.changeSetId === \"\" ? \"0\" : token.changeSetId;\n      } else {\n        appMode = AppMode.WorkGroupEdit;\n      }\n    }\n\n    return `${prefix}/${appTitle}/${appVersion}/mode/${appMode}/context/${contextId}/imodel/${iModelId}${!!routeChangeSetId ? \"/changeset/\" + routeChangeSetId : \"\"}/${operationId}`;\n  }\n\n  /**\n   * Inflates the IModelToken from the URL path for each request on the backend.\n   * @note This function updates the IModelToken value supplied in the request body.\n   */\n  public inflateToken(tokenFromBody: IModelTokenProps, request: SerializedRpcRequest): IModelTokenProps {\n    const urlPathComponents = request.path.split(\"/\");\n\n    const iModelKey = tokenFromBody.key;\n    let openMode = tokenFromBody.openMode;\n    let iModelId = tokenFromBody.iModelId;\n    let contextId = tokenFromBody.contextId;\n    let changeSetId = tokenFromBody.changeSetId;\n\n    for (let i = 0; i <= urlPathComponents.length; ++i) {\n      const key = urlPathComponents[i];\n      const value = urlPathComponents[i + 1];\n      if (key === \"mode\") {\n        openMode = (value === AppMode.WorkGroupEdit) ? OpenMode.ReadWrite : OpenMode.Readonly;\n        ++i;\n      } else if (key === \"context\") {\n        contextId = value;\n        ++i;\n      } else if (key === \"imodel\") {\n        iModelId = value;\n        ++i;\n      } else if (key === \"changeset\") {\n        changeSetId = (value === \"0\") ? \"\" : value;\n        ++i;\n      }\n    }\n\n    return new IModelToken(iModelKey, contextId, iModelId, changeSetId, openMode);\n  }\n\n  /** Returns the OpenAPI-compatible URI path parameters for an RPC operation.\n   * @internal\n   */\n  public supplyPathParametersForOperation(_operation: RpcOperation): OpenAPIParameter[] {\n    return [\n      { name: \"modeId\", in: \"path\", required: true, schema: { type: \"string\" } },\n      { name: \"contextId\", in: \"path\", required: true, schema: { type: \"string\" } },\n      { name: \"iModelId\", in: \"path\", required: true, schema: { type: \"string\" } },\n      { name: \"changeSetId\", in: \"path\", required: false, schema: { type: \"string\" } },\n    ];\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcOperation } from \"../core/RpcOperation\";\nimport { WebAppRpcProtocol } from \"./WebAppRpcProtocol\";\n\n/** An OpenAPI 3.0 root document object.\n * @internal\n */\nexport interface OpenAPIDocument {\n  openapi: \"3.0.0\";\n  info: OpenAPIInfo;\n  paths: OpenAPIPaths;\n}\n\n/** An OpenAPI 3.0 info object.\n * @public\n */\nexport interface OpenAPIInfo {\n  title: string;\n  version: string;\n}\n\n/** An OpenAPI 3.0 paths object.\n * @internal\n */\nexport interface OpenAPIPaths {\n  [index: string]: OpenAPIPathItem;\n}\n\n/** An OpenAPI 3.0 path item object.\n * @internal\n */\nexport interface OpenAPIPathItem {\n  summary?: string;\n  get?: OpenAPIOperation;\n  put?: OpenAPIOperation;\n  post?: OpenAPIOperation;\n  delete?: OpenAPIOperation;\n  options?: OpenAPIOperation;\n  head?: OpenAPIOperation;\n  patch?: OpenAPIOperation;\n  trace?: OpenAPIOperation;\n  parameters?: OpenAPIParameter[];\n}\n\n/** An OpenAPI 3.0 operation object.\n * @internal\n */\nexport interface OpenAPIOperation {\n  summary?: string;\n  operationId?: string;\n  parameters?: OpenAPIParameter[];\n  requestBody?: OpenAPIRequestBody;\n  responses: OpenAPIResponses;\n}\n\n/** An OpenAPI 3.0 content map.\n * @internal\n */\nexport interface OpenAPIContentMap {\n  [index: string]: OpenAPIMediaType;\n}\n\n/** An OpenAPI 3.0 parameter object.\n * @internal\n */\nexport interface OpenAPIParameter {\n  name: string;\n  in: \"query\" | \"header\" | \"path\" | \"cookie\";\n  description?: string;\n  required?: boolean;\n  allowEmptyValue?: boolean;\n  style?: \"matrix\" | \"label\" | \"form\" | \"simple\" | \"spaceDelimited\" | \"pipeDelimited\" | \"deepObject\";\n  explode?: boolean;\n  allowReserved?: boolean;\n  schema?: OpenAPISchema;\n  content?: OpenAPIContentMap;\n}\n\n/** An OpenAPI 3.0 media type object.\n * @internal\n */\nexport interface OpenAPIMediaType {\n  schema?: OpenAPISchema;\n}\n\n/** An OpenAPI 3.0 schema object.\n * @internal\n */\nexport interface OpenAPISchema {\n  type?: \"boolean\" | \"object\" | \"array\" | \"number\" | \"string\";\n  nullable?: boolean;\n  description?: string;\n}\n\n/** An OpenAPI 3.0 encoding object.\n * @internal\n */\nexport interface OpenAPIEncoding {\n  contentType?: string;\n  style?: string;\n  explode?: boolean;\n  allowReserved?: boolean;\n}\n\n/** An OpenAPI 3.0 parameter object.\n * @internal\n */\nexport interface OpenAPIRequestBody {\n  description?: string;\n  content: OpenAPIContentMap;\n  required?: boolean;\n}\n\n/** An OpenAPI 3.0 responses object.\n * @internal\n */\nexport interface OpenAPIResponses {\n  default?: OpenAPIResponse;\n  \"200\"?: OpenAPIResponse;\n  \"301\"?: OpenAPIResponse;\n  \"302\"?: OpenAPIResponse;\n  \"400\"?: OpenAPIResponse;\n  \"404\"?: OpenAPIResponse;\n  \"500\"?: OpenAPIResponse;\n}\n\n/** An OpenAPI 3.0 response object.\n * @internal\n */\nexport interface OpenAPIResponse {\n  description: string;\n  content?: { [index: string]: OpenAPIMediaType };\n}\n\n/** An OpenAPI-compatible description of an RPC protocol.\n * @internal\n */\nexport class RpcOpenAPIDescription {\n  /** The protocol for this description. */\n  public readonly protocol: WebAppRpcProtocol;\n\n  /** The OpenAPI paths object for the protocol. */\n  public get paths(): OpenAPIPaths {\n    const paths: OpenAPIPaths = {};\n\n    this.protocol.configuration.interfaces().forEach((definition) => {\n      RpcOperation.forEach(definition, (operation) => {\n        const path = this.protocol.supplyPathForOperation(operation, undefined);\n        paths[path] = this.generateDescription(operation);\n      });\n    });\n\n    return paths;\n  }\n\n  /** An OpenAPI 3.0 (Swagger) description of the RESTful API that is exposed through the protocol. */\n  public get document(): OpenAPIDocument {\n    return {\n      openapi: \"3.0.0\",\n      info: this.protocol.info,\n      paths: this.paths,\n    };\n  }\n\n  /** Creates an OpenAPI description of an RPC protocol. */\n  public constructor(protocol: WebAppRpcProtocol) {\n    this.protocol = protocol;\n  }\n\n  /** Converts to JSON. */\n  public toJSON() {\n    return this.document;\n  }\n\n  private generateDescription(operation: RpcOperation): OpenAPIPathItem {\n    const requestContent: OpenAPIContentMap = { \"application/json\": { schema: { type: \"array\" } } };\n    const responseContent: OpenAPIContentMap = { \"application/json\": { schema: { type: \"object\" } } };\n\n    const description: OpenAPIPathItem = {};\n\n    description.head = {\n      requestBody: { content: requestContent, required: true },\n      responses: {\n        200: { description: \"Success\", content: responseContent },\n        default: { description: \"Error\", content: responseContent },\n      },\n    };\n\n    const parameters = this.protocol.supplyPathParametersForOperation(operation);\n    if (parameters.length)\n      description.parameters = parameters;\n\n    return description;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { Readable } from \"stream\";\nimport { BentleyStatus, IModelError } from \"../../IModelError\";\nimport { RpcSerializedValue } from \"../core/RpcMarshaling\";\nimport { HttpServerRequest } from \"../web/WebAppRpcProtocol\";\n\n/** @internal */\nexport interface FormDataCommon {\n  append(name: string, value: string | Blob | Buffer, fileName?: string): void;\n}\n\n/** @internal */\nexport interface ReadableFormData extends Readable {\n  getHeaders(): { [key: string]: any };\n}\n\n/** Support for transporting RPC values using the HTTP multipart content type.\n * @internal\n */\nexport class RpcMultipart {\n  /** Creates a multipart form object for an RPC value. */\n  public static createForm(value: RpcSerializedValue): FormData {\n    const form = new FormData();\n    RpcMultipart.writeValueToForm(form, value);\n    return form;\n  }\n\n  /** Creates a multipart stream for an RPC value. */\n  public static createStream(_value: RpcSerializedValue): ReadableFormData {\n    throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\");\n  }\n\n  /** Obtains the RPC value from a multipart HTTP request. */\n  public static async parseRequest(_req: HttpServerRequest): Promise<RpcSerializedValue> {\n    throw new IModelError(BentleyStatus.ERROR, \"Not implemented.\");\n  }\n\n  /** @internal */\n  public static writeValueToForm(form: FormDataCommon, value: RpcSerializedValue) {\n    form.append(\"objects\", value.objects);\n\n    for (let i = 0; i !== value.data.length; ++i) {\n      if (typeof (Blob) !== \"undefined\") {\n        form.append(`data-${i}`, new Blob([value.data[i]], { type: \"application/octet-stream\" }));\n      } else {\n        const buf = value.data[i];\n        form.append(`data-${i}`, Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));\n      }\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { RpcRequest } from \"../core/RpcRequest\";\nimport { SerializedRpcRequest, SerializedRpcOperation } from \"../core/RpcProtocol\";\nimport { RpcInvocation } from \"../core/RpcInvocation\";\nimport { WebAppRpcRequest } from \"./WebAppRpcRequest\";\nimport { Logger } from \"@bentley/bentleyjs-core\";\nimport { RpcInterfaceDefinition } from \"../../RpcInterface\";\nimport { RpcProtocolEvent } from \"../core/RpcConstants\";\nimport { RpcOperation } from \"../core/RpcOperation\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\n\n// tslint:disable-next-line:no-var-requires\nconst os = (typeof (process) !== \"undefined\") ? require(\"os\") : undefined;\nfunction getHostname(): string {\n  if (os !== undefined) {\n    return os.hostname();\n  } else {\n    if (typeof (window) !== \"undefined\") {\n      return window.location.host;\n    } else {\n      return \"imodeljs-mobile\";\n    }\n  }\n}\n\n/** @internal */\nexport class WebAppRpcLogging {\n  public static logProtocolEvent(event: RpcProtocolEvent, object: RpcRequest | RpcInvocation): void {\n    if (object instanceof WebAppRpcRequest) {\n      switch (event) {\n        case RpcProtocolEvent.RequestCreated: return WebAppRpcLogging.logRequest(CommonLoggerCategory.RpcInterfaceFrontend, \"RpcInterface.frontend.request\", object);\n        case RpcProtocolEvent.ResponseLoaded: return WebAppRpcLogging.logResponse(CommonLoggerCategory.RpcInterfaceFrontend, \"RpcInterface.frontend.response\", object, object.metadata.status, object.elapsed);\n        case RpcProtocolEvent.ConnectionErrorReceived: return WebAppRpcLogging.logErrorFrontend(\"RpcInterface.frontend.connectionError\", object);\n        case RpcProtocolEvent.ConnectionAborted: return WebAppRpcLogging.logErrorFrontend(\"RpcInterface.frontend.connectionAborted\", object);\n      }\n    } else if (object instanceof RpcInvocation) {\n      switch (event) {\n        case RpcProtocolEvent.RequestReceived: return WebAppRpcLogging.logRequest(CommonLoggerCategory.RpcInterfaceBackend, \"RpcInterface.backend.request\", object.request);\n        case RpcProtocolEvent.BackendErrorOccurred: return WebAppRpcLogging.logErrorBackend(\"RpcInterface.backend.error\", object);\n        case RpcProtocolEvent.BackendResponseCreated: return WebAppRpcLogging.logResponse(CommonLoggerCategory.RpcInterfaceBackend, \"RpcInterface.backend.response\", object.request, object.status, object.elapsed);\n      }\n    }\n  }\n\n  private static getRpcInterfaceName(g: string | RpcInterfaceDefinition): string {\n    return (typeof g === \"string\") ? g : g.interfaceName;\n  }\n\n  private static findPathIds(path: string) {\n    let contextId = \"\";\n    let iModelId = \"\";\n\n    const tokens = path.split(\"/\");\n    for (let i = 0; i !== tokens.length; ++i) {\n      if ((/^context$/i).test(tokens[i])) {\n        contextId = tokens[i + 1] || \"\";\n      }\n\n      if ((/^imodel$/i).test(tokens[i])) {\n        iModelId = tokens[i + 1] || \"\";\n      }\n    }\n\n    return { contextId, iModelId };\n  }\n\n  private static buildOperationDescriptor(operation: RpcOperation | SerializedRpcOperation): string {\n    const interfaceName = typeof (operation.interfaceDefinition) === \"string\" ? operation.interfaceDefinition : operation.interfaceDefinition.interfaceName;\n    const operationName = operation.operationName;\n    return `${interfaceName}.${operationName}`;\n  }\n\n  private static logRequest(loggerCategory: string, message: string, object: WebAppRpcRequest | SerializedRpcRequest): void {\n    const operationDescriptor = WebAppRpcLogging.buildOperationDescriptor(object.operation);\n    const pathIds = WebAppRpcLogging.findPathIds(object.path);\n\n    Logger.logTrace(loggerCategory, `${message}.${operationDescriptor}`, () => ({\n      method: object.method,\n      path: object.path,\n      operation: object.operation.operationName,\n      rpcInterface: WebAppRpcLogging.getRpcInterfaceName(object.operation.interfaceDefinition),\n      // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n      ActivityId: object.id,\n      TimeElapsed: (\"elapsed\" in object) ? object.elapsed : 0,\n      MachineName: getHostname(),\n      ...pathIds,\n    }));\n  }\n\n  private static logResponse(loggerCategory: string, message: string, object: WebAppRpcRequest | SerializedRpcRequest, status: number, elapsed: number): void {\n    const operationDescriptor = WebAppRpcLogging.buildOperationDescriptor(object.operation);\n    const pathIds = WebAppRpcLogging.findPathIds(object.path);\n\n    Logger.logTrace(loggerCategory, `${message}.${operationDescriptor}`, () => ({\n      method: object.method,\n      path: object.path,\n      operation: object.operation.operationName,\n      rpcInterface: WebAppRpcLogging.getRpcInterfaceName(object.operation.interfaceDefinition),\n      status,\n      // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n      ActivityId: object.id,\n      TimeElapsed: elapsed,\n      MachineName: getHostname(),\n      ...pathIds,\n    }));\n  }\n\n  private static logErrorFrontend(message: string, request: WebAppRpcRequest): void {\n    const operationDescriptor = WebAppRpcLogging.buildOperationDescriptor(request.operation);\n    const pathIds = WebAppRpcLogging.findPathIds(request.path);\n\n    Logger.logInfo(CommonLoggerCategory.RpcInterfaceFrontend, `${message}.${operationDescriptor}`, () => ({\n      method: request.method,\n      path: request.path,\n      // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n      ActivityId: request.id,\n      MachineName: getHostname(),\n      ...pathIds,\n    }));\n  }\n\n  private static logErrorBackend(message: string, invocation: RpcInvocation): void {\n    const operationDescriptor = WebAppRpcLogging.buildOperationDescriptor(invocation.operation);\n    const pathIds = WebAppRpcLogging.findPathIds(invocation.request.path);\n\n    Logger.logInfo(CommonLoggerCategory.RpcInterfaceBackend, `${message}.${operationDescriptor}`, () => ({\n      method: invocation.request.method,\n      path: invocation.request.path,\n      status: invocation.status,\n      error: invocation.result,\n      // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n      ActivityId: invocation.request.id,\n      MachineName: getHostname(),\n      ...pathIds,\n    }));\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { Readable, Writable } from \"stream\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\nimport { RpcContentType, RpcRequestStatus, WEB_RPC_CONSTANTS } from \"../core/RpcConstants\";\nimport { RpcOperation } from \"../core/RpcOperation\";\nimport { RpcProtocol } from \"../core/RpcProtocol\";\nimport { OpenAPIInfo, OpenAPIParameter, RpcOpenAPIDescription } from \"./OpenAPI\";\nimport { WebAppRpcLogging } from \"./WebAppRpcLogging\";\nimport { WebAppRpcRequest } from \"./WebAppRpcRequest\";\n\n/** An HTTP server request object.\n * @public\n */\nexport interface HttpServerRequest extends Readable {\n  httpVersion: string;\n  httpVersionMajor: number;\n  httpVersionMinor: number;\n  connection: any;\n  headers: { [header: string]: string | string[] | undefined };\n  rawHeaders: string[];\n  trailers: { [key: string]: string | undefined };\n  rawTrailers: string[];\n  setTimeout(msecs: number, callback: () => void): this;\n  url?: string;\n  statusCode?: number;\n  statusMessage?: string;\n  socket: any;\n  destroy(error?: Error): void;\n  body: string | Buffer;\n  path: string;\n  method: string;\n  header: (field: string) => string | undefined;\n}\n\n/** An HTTP server response object.\n * @public\n */\nexport interface HttpServerResponse extends Writable {\n  send(body?: any): HttpServerResponse;\n  status(code: number): HttpServerResponse;\n  set(field: string, value: string): void;\n}\n\n/** The HTTP application protocol.\n * @public\n */\nexport abstract class WebAppRpcProtocol extends RpcProtocol {\n  public preserveStreams = true;\n\n  /** Convenience handler for an RPC operation get request for an HTTP server. */\n  public async handleOperationGetRequest(req: HttpServerRequest, res: HttpServerResponse) {\n    return this.handleOperationPostRequest(req, res);\n  }\n\n  /** Convenience handler for an RPC operation post request for an HTTP server. */\n  public async handleOperationPostRequest(req: HttpServerRequest, res: HttpServerResponse) {\n    const request = await WebAppRpcRequest.parseRequest(this, req);\n    const fulfillment = await this.fulfill(request);\n    WebAppRpcRequest.sendResponse(this, request, fulfillment, res);\n  }\n\n  /** Convenience handler for an OpenAPI description request for an HTTP server. */\n  public handleOpenApiDescriptionRequest(_req: HttpServerRequest, res: HttpServerResponse) {\n    const description = JSON.stringify(this.openAPIDescription);\n    res.send(description);\n  }\n\n  /** Converts an HTTP content type value to an RPC content type value. */\n  public static computeContentType(httpType: string | null | undefined): RpcContentType {\n    if (!httpType)\n      return RpcContentType.Unknown;\n\n    if (httpType.indexOf(WEB_RPC_CONSTANTS.ANY_TEXT) === 0) {\n      return RpcContentType.Text;\n    } else if (httpType.indexOf(WEB_RPC_CONSTANTS.BINARY) === 0) {\n      return RpcContentType.Binary;\n    } else if (httpType.indexOf(WEB_RPC_CONSTANTS.MULTIPART) === 0) {\n      return RpcContentType.Multipart;\n    } else {\n      return RpcContentType.Unknown;\n    }\n  }\n\n  /** The OpenAPI-compatible info object for this protocol. */\n  public abstract info: OpenAPIInfo;\n\n  /** An optional prefix for RPC operation URI paths. */\n  public pathPrefix: string = \"\";\n\n  /** The RPC request class for this protocol. */\n  public readonly requestType = WebAppRpcRequest;\n\n  /** Supplies the status corresponding to a protocol-specific code value. */\n  public getStatus(code: number): RpcRequestStatus {\n    switch (code) {\n      case 404: return RpcRequestStatus.NotFound;\n      case 202: return RpcRequestStatus.Pending;\n      case 200: return RpcRequestStatus.Resolved;\n      case 500: return RpcRequestStatus.Rejected;\n      default: return RpcRequestStatus.Unknown;\n    }\n  }\n\n  /** Supplies the protocol-specific code corresponding to a status value. */\n  public getCode(status: RpcRequestStatus): number {\n    switch (status) {\n      case RpcRequestStatus.NotFound: return 404;\n      case RpcRequestStatus.Pending: return 202;\n      case RpcRequestStatus.Resolved: return 200;\n      case RpcRequestStatus.Rejected: return 500;\n      default: return 501;\n    }\n  }\n\n  /** Whether an HTTP status code indicates a request timeout. */\n  public isTimeout(code: number): boolean {\n    return code === 504;\n  }\n\n  /** An OpenAPI-compatible description of this protocol.\n   * @internal\n   */\n  public get openAPIDescription() { return new RpcOpenAPIDescription(this); }\n\n  /** Returns the OpenAPI-compatible URI path parameters for an RPC operation.\n   * @internal\n   */\n  public abstract supplyPathParametersForOperation(_operation: RpcOperation): OpenAPIParameter[];\n\n  /** Constructs an HTTP protocol. */\n  public constructor(configuration: RpcConfiguration) {\n    super(configuration);\n    this.events.addListener(WebAppRpcLogging.logProtocolEvent);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RpcInterface */\n\nimport { BentleyStatus, SerializedClientRequestContext } from \"@bentley/bentleyjs-core\";\nimport { IModelError, ServerError, ServerTimeoutError } from \"../../IModelError\";\nimport { RpcInterface } from \"../../RpcInterface\";\nimport { RpcContentType, RpcProtocolEvent, RpcRequestStatus, RpcResponseCacheControl, WEB_RPC_CONSTANTS } from \"../core/RpcConstants\";\nimport { MarshalingBinaryMarker, RpcSerializedValue } from \"../core/RpcMarshaling\";\nimport { RpcRequestFulfillment, SerializedRpcOperation, SerializedRpcRequest } from \"../core/RpcProtocol\";\nimport { RpcRequest } from \"../core/RpcRequest\";\nimport { RpcMultipartParser } from \"./multipart/RpcMultipartParser\";\nimport { RpcMultipart } from \"./RpcMultipart\";\nimport { HttpServerRequest, HttpServerResponse, WebAppRpcProtocol } from \"./WebAppRpcProtocol\";\nimport URLSearchParams = require(\"url-search-params\");\n\n/** @public */\nexport type HttpMethod_T = \"get\" | \"put\" | \"post\" | \"delete\" | \"options\" | \"head\" | \"patch\" | \"trace\";\n\n/** A web application RPC request.\n * @public\n */\nexport class WebAppRpcRequest extends RpcRequest {\n  private _loading: boolean = false;\n  private _request: RequestInit = {};\n  private _pathSuffix: string = \"\";\n  private get _headers() { return this._request.headers as { [key: string]: string }; }\n\n  /** The maximum size permitted for an encoded component in a URL.\n   * @note This is used for features like encoding the payload of a cacheable request in the URL.\n   */\n  public static maxUrlComponentSize = 1024;\n\n  /** The HTTP method for this request. */\n  public method: HttpMethod_T;\n\n  /** Convenience access to the protocol of this request. */\n  public readonly protocol: WebAppRpcProtocol = this.client.configuration.protocol as any;\n\n  /** Standardized access to metadata about the request (useful for purposes such as logging). */\n  public metadata = { status: 0, message: \"\" };\n\n  /** Parse headers */\n  private static parseHeaders(protocol: WebAppRpcProtocol, req: HttpServerRequest): SerializedClientRequestContext {\n    const headerNames: SerializedClientRequestContext = protocol.serializedClientRequestContextHeaderNames;\n    const parsedHeaders: SerializedClientRequestContext = {\n      id: req.header(headerNames.id) || \"\",\n      applicationId: req.header(headerNames.applicationId) || \"\",\n      applicationVersion: req.header(headerNames.applicationVersion) || \"\",\n      sessionId: req.header(headerNames.sessionId) || \"\",\n      authorization: headerNames.authorization ? req.header(headerNames.authorization) : undefined,\n      userId: headerNames.userId ? req.header(headerNames.userId) : undefined,\n    };\n    return parsedHeaders;\n  }\n\n  /** Parses a request. */\n  public static async parseRequest(protocol: WebAppRpcProtocol, req: HttpServerRequest): Promise<SerializedRpcRequest> {\n    const operation = protocol.getOperationFromPath(req.url!);\n\n    const parsedHeaders = this.parseHeaders(protocol, req);\n\n    const request: SerializedRpcRequest = {\n      ...parsedHeaders,\n      operation: {\n        interfaceDefinition: operation.interfaceDefinition,\n        operationName: operation.operationName,\n        interfaceVersion: operation.interfaceVersion,\n      },\n      method: req.method,\n      path: req.url!,\n      parameters: operation.encodedRequest ? WebAppRpcRequest.parseFromPath(operation) : await WebAppRpcRequest.parseFromBody(req),\n      caching: operation.encodedRequest ? RpcResponseCacheControl.Immutable : RpcResponseCacheControl.None,\n    };\n\n    if (!request.id) {\n      throw new IModelError(BentleyStatus.ERROR, `Invalid request.`);\n    }\n\n    return request;\n  }\n\n  /** Sends the response for a web request. */\n  public static sendResponse(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const transportType = WebAppRpcRequest.computeTransportType(fulfillment.result, fulfillment.rawResult);\n    if (transportType === RpcContentType.Text) {\n      WebAppRpcRequest.sendText(protocol, request, fulfillment, res);\n    } else if (transportType === RpcContentType.Binary) {\n      WebAppRpcRequest.sendBinary(protocol, request, fulfillment, res);\n    } else if (transportType === RpcContentType.Multipart) {\n      WebAppRpcRequest.sendMultipart(protocol, request, fulfillment, res);\n    } else if (transportType === RpcContentType.Stream) {\n      WebAppRpcRequest.sendStream(protocol, request, fulfillment, res);\n    } else {\n      throw new IModelError(BentleyStatus.ERROR, \"Unknown response type.\");\n    }\n  }\n\n  /** Determines the most efficient transport type for an RPC value. */\n  protected static computeTransportType(value: RpcSerializedValue, source: any): RpcContentType {\n    if (source instanceof Uint8Array || (Array.isArray(source) && source[0] instanceof Uint8Array)) {\n      return RpcContentType.Binary;\n    } else if (value.data.length > 0) {\n      return RpcContentType.Multipart;\n    } else if (value.stream) {\n      return RpcContentType.Stream;\n    } else {\n      return RpcContentType.Text;\n    }\n  }\n\n  /** Constructs a web application request. */\n  public constructor(client: RpcInterface, operation: string, parameters: any[]) {\n    super(client, operation, parameters);\n    this.path = this.protocol.supplyPathForOperation(this.operation, this);\n    this.method = \"head\";\n    this._request.headers = {};\n  }\n\n  /** Sets request header values. */\n  protected setHeader(name: string, value: string): void {\n    this._headers[name] = value;\n  }\n\n  /** Sends the request. */\n  protected async send(): Promise<number> {\n    this._loading = true;\n    await this.setupTransport();\n\n    return new Promise<number>(async (resolve, reject) => {\n      try {\n        resolve(await this.performFetch());\n      } catch (reason) {\n        reject(new ServerError(-1, reason || \"Server connection error.\"));\n      }\n    });\n  }\n\n  protected handleUnknownResponse(code: number) {\n    if (this.protocol.isTimeout(code)) {\n      this.reject(new ServerTimeoutError(\"Request timeout.\"));\n    } else {\n      this.reject(new ServerError(code, \"Unknown server response code.\"));\n    }\n  }\n\n  protected async load(): Promise<RpcSerializedValue> {\n    return new Promise<RpcSerializedValue>(async (resolve, reject) => {\n      try {\n        if (!this._loading)\n          return;\n\n        const response = this._response;\n        if (!response) {\n          reject(new IModelError(BentleyStatus.ERROR, \"Invalid state.\"));\n          return;\n        }\n\n        const contentType = response.headers.get(WEB_RPC_CONSTANTS.CONTENT);\n        const responseType = WebAppRpcProtocol.computeContentType(contentType);\n\n        if (responseType === RpcContentType.Text) {\n          resolve(await this.loadText(response));\n        } else if (responseType === RpcContentType.Binary) {\n          resolve(await this.loadBinary(response));\n        } else if (responseType === RpcContentType.Multipart) {\n          resolve(await this.loadMultipart(response, contentType!));\n        } else {\n          reject(new IModelError(BentleyStatus.ERROR, \"Unknown response type\"));\n        }\n\n        this._loading = false;\n        this.setLastUpdatedTime();\n        this.protocol.events.raiseEvent(RpcProtocolEvent.ResponseLoaded, this);\n      } catch (reason) {\n        if (!this._loading)\n          return;\n\n        this._loading = false;\n        reject(new ServerError(this.metadata.status, reason || \"Unknown server response error.\"));\n      }\n    });\n  }\n\n  private static configureResponse(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const success = protocol.getStatus(fulfillment.status) === RpcRequestStatus.Resolved;\n\n    if (success && request.caching === RpcResponseCacheControl.Immutable) {\n      res.set(\"Cache-Control\", \"private, max-age=31536000, immutable\");\n    }\n  }\n\n  private static sendText(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const response = fulfillment.result.objects;\n    res.set(WEB_RPC_CONSTANTS.CONTENT, WEB_RPC_CONSTANTS.TEXT);\n    WebAppRpcRequest.configureResponse(protocol, request, fulfillment, res);\n    res.status(fulfillment.status).send(response);\n  }\n\n  private static sendBinary(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const data = fulfillment.result.data[0];\n    const response = Buffer.isBuffer(data) ? data : Buffer.from(data);\n\n    res.set(WEB_RPC_CONSTANTS.CONTENT, WEB_RPC_CONSTANTS.BINARY);\n    WebAppRpcRequest.configureResponse(protocol, request, fulfillment, res);\n    res.status(fulfillment.status).send(response);\n  }\n\n  private static sendMultipart(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const response = RpcMultipart.createStream(fulfillment.result);\n    const headers = response.getHeaders();\n    for (const header in headers) {\n      if (headers.hasOwnProperty(header)) {\n        res.set(header, headers[header]);\n      }\n    }\n\n    WebAppRpcRequest.configureResponse(protocol, request, fulfillment, res);\n    res.status(fulfillment.status);\n    response.pipe(res);\n  }\n\n  private static sendStream(protocol: WebAppRpcProtocol, request: SerializedRpcRequest, fulfillment: RpcRequestFulfillment, res: HttpServerResponse) {\n    const response = fulfillment.result.stream;\n    WebAppRpcRequest.configureResponse(protocol, request, fulfillment, res);\n    res.status(fulfillment.status);\n    response!.pipe(res);\n  }\n\n  private static parseFromPath(operation: SerializedRpcOperation): RpcSerializedValue {\n    const decoded = operation.encodedRequest ? Buffer.from(operation.encodedRequest, \"base64\").toString(\"binary\") : \"\";\n    return RpcSerializedValue.create(decoded);\n  }\n\n  private static async parseFromBody(req: HttpServerRequest): Promise<RpcSerializedValue> {\n    const contentType = WebAppRpcProtocol.computeContentType(req.header(WEB_RPC_CONSTANTS.CONTENT));\n    if (contentType === RpcContentType.Text) {\n      return RpcSerializedValue.create(req.body as string);\n    } else if (contentType === RpcContentType.Binary) {\n      const objects = JSON.stringify([MarshalingBinaryMarker.createDefault()]);\n      const data = [req.body as Buffer];\n      return RpcSerializedValue.create(objects, data);\n    } else if (contentType === RpcContentType.Multipart) {\n      return RpcMultipart.parseRequest(req);\n    } else {\n      throw new IModelError(BentleyStatus.ERROR, `Unknown content type.`);\n    }\n  }\n\n  private async performFetch(): Promise<number> {\n    const path = new URL(this.path, location.origin);\n    if (this._pathSuffix) {\n      const params = new URLSearchParams();\n      params.set(\"parameters\", this._pathSuffix);\n      path.search = `?${params.toString()}`;\n    }\n\n    const request = new Request(path.toString(), this._request);\n    const response = await fetch(request);\n    this._response = response;\n    this.metadata.status = response.status;\n    return response.status;\n  }\n\n  private async loadText(response: Response) {\n    const value = await response.text();\n    this.metadata.message = value;\n    return RpcSerializedValue.create(value);\n  }\n\n  private async loadBinary(response: Response) {\n    const value = new Uint8Array(await response.arrayBuffer());\n    const objects = JSON.stringify(MarshalingBinaryMarker.createDefault());\n    return RpcSerializedValue.create(objects, [value]);\n  }\n\n  private async loadMultipart(response: Response, contentType: string) {\n    const data = await response.arrayBuffer();\n    const value = new RpcMultipartParser(contentType!, Buffer.from(data)).parse();\n    return value;\n  }\n\n  private async setupTransport(): Promise<void> {\n    const parameters = (await this.protocol.serialize(this)).parameters;\n    const transportType = WebAppRpcRequest.computeTransportType(parameters, this.parameters);\n\n    if (transportType === RpcContentType.Binary) {\n      this.setupBinaryTransport(parameters);\n    } else if (transportType === RpcContentType.Multipart) {\n      this.setupMultipartTransport(parameters);\n    } else if (transportType === RpcContentType.Text) {\n      this.setupTextTransport(parameters);\n    } else {\n      throw new IModelError(BentleyStatus.ERROR, \"Unknown request type.\");\n    }\n  }\n\n  private setupBinaryTransport(parameters: RpcSerializedValue) {\n    this._headers[WEB_RPC_CONSTANTS.CONTENT] = WEB_RPC_CONSTANTS.BINARY;\n    this._request.method = \"post\";\n    this._request.body = parameters.data[0];\n  }\n\n  private setupMultipartTransport(parameters: RpcSerializedValue) {\n    // IMPORTANT: do not set a multipart Content-Type header value. The browser does this automatically!\n    delete this._headers[WEB_RPC_CONSTANTS.CONTENT];\n    this._request.method = \"post\";\n    this._request.body = RpcMultipart.createForm(parameters);\n  }\n\n  private setupTextTransport(parameters: RpcSerializedValue) {\n    if (this.operation.policy.allowResponseCaching(this)) {\n      const encodedBody = btoa(parameters.objects);\n      if (encodedBody.length <= WebAppRpcRequest.maxUrlComponentSize) {\n        this._request.method = \"get\";\n        this._request.body = undefined;\n        delete this._headers[WEB_RPC_CONSTANTS.CONTENT];\n        this._pathSuffix = encodedBody;\n        return;\n      }\n    }\n\n    this._pathSuffix = \"\";\n    this._headers[WEB_RPC_CONSTANTS.CONTENT] = WEB_RPC_CONSTANTS.TEXT;\n    this._request.method = \"post\";\n    this._request.body = parameters.objects;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/*\nAdapted from https://github.com/pillarjs/multiparty. Multiparty license as follows:\n(The MIT License)\n\nCopyright (c) 2013 Felix Geisendörfer\nCopyright (c) 2014 Andrew Kelley\nCopyright (c) 2014 Douglas Christopher Wilson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nimport { NodeStringDecoder, StringDecoder } from \"string_decoder\";\nimport { RpcSerializedValue } from \"../../core/RpcMarshaling\";\n\nconst START = 0;\nconst START_BOUNDARY = 1;\nconst HEADER_FIELD_START = 2;\nconst HEADER_FIELD = 3;\nconst HEADER_VALUE_START = 4;\nconst HEADER_VALUE = 5;\nconst HEADER_VALUE_ALMOST_DONE = 6;\nconst HEADERS_ALMOST_DONE = 7;\nconst PART_DATA_START = 8;\nconst PART_DATA = 9;\nconst CLOSE_BOUNDARY = 10;\nconst END = 11;\n\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\n\nconst CONTENT_TYPE_RE = /^multipart\\/(?:form-data|related)(?:;|$)/i;\nconst CONTENT_TYPE_PARAM_RE = /;\\s*([^=]+)=(?:\"([^\"]+)\"|([^;]+))/gi;\n\nexport class RpcMultipartParser {\n  private _headerFieldMark: number | null;\n  private _headerValueMark: number | null;\n  private _partDataMark: number | null;\n  private _partBoundaryFlag: boolean;\n  private _headerFieldDecoder: NodeStringDecoder | null;\n  private _headerValueDecoder: NodeStringDecoder | null;\n  private _headerField: string;\n  private _partHeaders: { [index: string]: string };\n  private _partName: string | null;\n  private _partChunks: Buffer[];\n  private _headerValue: string;\n  private _boundary: string;\n  private _buffer: Buffer;\n  private _value: RpcSerializedValue;\n\n  public constructor(contentType: string, buffer: Buffer) {\n    let m = CONTENT_TYPE_RE.exec(contentType);\n    if (!m) {\n      throw new Error(\"unsupported content-type\");\n    }\n\n    let boundary = \"\";\n    CONTENT_TYPE_PARAM_RE.lastIndex = m.index + m[0].length - 1;\n    while ((m = CONTENT_TYPE_PARAM_RE.exec(contentType))) {\n      if (m[1].toLowerCase() !== \"boundary\") continue;\n      boundary = m[2] || m[3];\n      break;\n    }\n\n    if (!boundary) {\n      throw new Error(\"content-type missing boundary\");\n    }\n\n    this._headerFieldDecoder = null;\n    this._headerValueDecoder = null;\n    this._headerField = \"\";\n    this._partHeaders = {};\n    this._partName = null;\n    this._partChunks = [];\n    this._headerValue = \"\";\n\n    this._headerFieldMark = null;\n    this._headerValueMark = null;\n    this._partDataMark = null;\n    this._partBoundaryFlag = false;\n\n    this._boundary = boundary;\n    this._buffer = buffer;\n    this._value = RpcSerializedValue.create();\n  }\n\n  public parse(): RpcSerializedValue {\n    let i = 0;\n    const len = this._buffer.length;\n    let prevIndex = 0;\n    let index = 0;\n    let state = START;\n\n    const boundary = Buffer.alloc(this._boundary.length + 4);\n    boundary.write(\"\\r\\n--\", 0, this._boundary.length + 4, \"ascii\");\n    boundary.write(this._boundary, 4, this._boundary.length, \"ascii\");\n\n    const boundaryChars: { [index: number]: boolean } = {};\n    for (const char of boundary) {\n      boundaryChars[char] = true;\n    }\n\n    const boundaryLength = boundary.length;\n    const boundaryEnd = boundaryLength - 1;\n    const bufferLength = this._buffer.length;\n    const lookbehind = Buffer.alloc(boundaryLength + 8);\n\n    let c;\n    let cl;\n\n    for (i = 0; i < len; i++) {\n      c = this._buffer[i];\n      switch (state) {\n        case START:\n          index = 0;\n          state = START_BOUNDARY;\n        /* falls through */\n        case START_BOUNDARY:\n          if (index === boundaryLength - 2 && c === HYPHEN) {\n            index = 1;\n            state = CLOSE_BOUNDARY;\n            break;\n          } else if (index === boundaryLength - 2) {\n            if (c !== CR) throw new Error(\"Expected CR Received \" + c);\n            index++;\n            break;\n          } else if (index === boundaryLength - 1) {\n            if (c !== LF) throw new Error(\"Expected LF Received \" + c);\n            index = 0;\n            this._onParsePartBegin();\n            state = HEADER_FIELD_START;\n            break;\n          }\n\n          if (c !== boundary[index + 2]) index = -2;\n          if (c === boundary[index + 2]) index++;\n          break;\n        case HEADER_FIELD_START:\n          state = HEADER_FIELD;\n          this._headerFieldMark = i;\n          index = 0;\n        /* falls through */\n        case HEADER_FIELD:\n          if (c === CR) {\n            this._headerFieldMark = null;\n            state = HEADERS_ALMOST_DONE;\n            break;\n          }\n\n          index++;\n          if (c === HYPHEN) break;\n\n          if (c === COLON) {\n            if (index === 1) {\n              // empty header field\n              throw new Error(\"Empty header field\");\n            }\n            this._onParseHeaderField(this._buffer.slice(this._headerFieldMark as number, i));\n            this._headerFieldMark = null;\n            state = HEADER_VALUE_START;\n            break;\n          }\n\n          cl = c | 0x20;\n          if (cl < A || cl > Z) {\n            throw new Error(\"Expected alphabetic character, received \" + c);\n          }\n          break;\n        case HEADER_VALUE_START:\n          if (c === SPACE) break;\n\n          this._headerValueMark = i;\n          state = HEADER_VALUE;\n        /* falls through */\n        case HEADER_VALUE:\n          if (c === CR) {\n            this._onParseHeaderValue(this._buffer.slice(this._headerValueMark as number, i));\n            this._headerValueMark = null;\n            this._onParseHeaderEnd();\n            state = HEADER_VALUE_ALMOST_DONE;\n          }\n          break;\n        case HEADER_VALUE_ALMOST_DONE:\n          if (c !== LF) throw new Error(\"Expected LF Received \" + c);\n          state = HEADER_FIELD_START;\n          break;\n        case HEADERS_ALMOST_DONE:\n          if (c !== LF) throw new Error(\"Expected LF Received \" + c);\n          const err: any = this._onParseHeadersEnd(i + 1);\n          if (err) throw err;\n          state = PART_DATA_START;\n          break;\n        case PART_DATA_START:\n          state = PART_DATA;\n          this._partDataMark = i;\n        /* falls through */\n        case PART_DATA:\n          prevIndex = index;\n\n          if (index === 0) {\n            // boyer-moore derrived algorithm to safely skip non-boundary data\n            i += boundaryEnd;\n            while (i < bufferLength && !(this._buffer[i] in boundaryChars)) {\n              i += boundaryLength;\n            }\n            i -= boundaryEnd;\n            c = this._buffer[i];\n          }\n\n          if (index < boundaryLength) {\n            if (boundary[index] === c) {\n              if (index === 0) {\n                this._onParsePartData(this._buffer.slice(this._partDataMark as number, i));\n                this._partDataMark = null;\n              }\n              index++;\n            } else {\n              index = 0;\n            }\n          } else if (index === boundaryLength) {\n            index++;\n            if (c === CR) {\n              // CR = part boundary\n              this._partBoundaryFlag = true;\n            } else if (c === HYPHEN) {\n              index = 1;\n              state = CLOSE_BOUNDARY;\n              break;\n            } else {\n              index = 0;\n            }\n          } else if (index - 1 === boundaryLength) {\n            if (this._partBoundaryFlag) {\n              index = 0;\n              if (c === LF) {\n                this._partBoundaryFlag = false;\n                this._onParsePartEnd();\n                this._onParsePartBegin();\n                state = HEADER_FIELD_START;\n                break;\n              }\n            } else {\n              index = 0;\n            }\n          }\n\n          if (index > 0) {\n            // when matching a possible boundary, keep a lookbehind reference\n            // in case it turns out to be a false lead\n            lookbehind[index - 1] = c;\n          } else if (prevIndex > 0) {\n            // if our boundary turned out to be rubbish, the captured lookbehind\n            // belongs to partData\n            this._onParsePartData(lookbehind.slice(0, prevIndex));\n            prevIndex = 0;\n            this._partDataMark = i;\n\n            // reconsider the current character even so it interrupted the sequence\n            // it could be the beginning of a new sequence\n            i--;\n          }\n\n          break;\n        case CLOSE_BOUNDARY:\n          if (c !== HYPHEN) throw new Error(\"Expected HYPHEN Received \" + c);\n          if (index === 1) {\n            this._onParsePartEnd();\n            state = END;\n          } else if (index > 1) {\n            throw new Error(\"Parser has invalid state.\");\n          }\n          index++;\n          break;\n        case END:\n          break;\n        default:\n          throw new Error(\"Parser has invalid state.\");\n      }\n    }\n\n    if (this._headerFieldMark != null) {\n      this._onParseHeaderField(this._buffer.slice(this._headerFieldMark));\n      this._headerFieldMark = 0;\n    }\n    if (this._headerValueMark != null) {\n      this._onParseHeaderValue(this._buffer.slice(this._headerValueMark));\n      this._headerValueMark = 0;\n    }\n    if (this._partDataMark != null) {\n      this._onParsePartData(this._buffer.slice(this._partDataMark));\n      this._partDataMark = 0;\n    }\n\n    return this._value;\n  }\n\n  private _onParsePartBegin() {\n    this._clearPartVars();\n  }\n\n  private _clearPartVars() {\n    this._partHeaders = {};\n    this._partName = null;\n    this._partChunks.length = 0;\n\n    this._headerFieldDecoder = new StringDecoder(\"utf8\");\n    this._headerField = \"\";\n    this._headerValueDecoder = new StringDecoder(\"utf8\");\n    this._headerValue = \"\";\n  }\n\n  private _onParseHeaderField(b: Buffer) {\n    this._headerField += this._headerFieldDecoder!.write(b);\n  }\n\n  private _onParseHeaderValue(b: Buffer) {\n    this._headerValue += this._headerValueDecoder!.write(b);\n  }\n\n  private _onParseHeaderEnd() {\n    this._headerField = this._headerField.toLowerCase();\n    this._partHeaders[this._headerField] = this._headerValue;\n\n    let m: RegExpMatchArray | null;\n    if (this._headerField === \"content-disposition\") {\n      if (m = this._headerValue.match(/\\bname=\"([^\"]+)\"/i)) {\n        this._partName = m[1];\n      }\n      // this._partFilename = parseFilename(this._headerValue);\n    } else if (this._headerField === \"content-transfer-encoding\") {\n      // this._partTransferEncoding = this._headerValue.toLowerCase();\n    }\n\n    this._headerFieldDecoder = new StringDecoder(\"utf8\");\n    this._headerField = \"\";\n    this._headerValueDecoder = new StringDecoder(\"utf8\");\n    this._headerValue = \"\";\n  }\n\n  private _onParsePartData(b: Buffer) {\n    this._partChunks.push(b);\n  }\n\n  private _onParsePartEnd() {\n    const partValue = this._partChunks.length === 1 ? this._partChunks[0] : Buffer.concat(this._partChunks);\n\n    if (this._partName === \"objects\") {\n      this._value.objects = partValue.toString();\n    } else {\n      this._value.data.push(partValue);\n    }\n\n    this._clearPartVars();\n  }\n\n  private _onParseHeadersEnd(_offset: number) {\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__;","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_geometry_core__;","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_clients__;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChvaA;AACA;AACA;;;;;;;;;;;;;;ACphBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpvrtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrBA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAEA;AACA;AASA;AAuCA;AAtCA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAnFA;;;;;;;;;;;;;;;ACnCA;AACA;AASA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApDA;;;;;;;;;;;;;;AChBA;;;AAGA;AACA;;AAEA;AAiBA;;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AApBA;;;;;;;;;;;;;;ACzHA;;;AAGA;AACA;;AAEA;AAEA;AACA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAHA;AACA;AACA;AACA;AAVA;AAYA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA;AA5BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AAOA;;;;;;;;;;;;;;AAcA;AACA;AAMA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAtBA;AACA;AAuBA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhYA;AAkYA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;;;;;;;;;;;;;;ACzoBA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjBA;;;AAGA;AACA;;AAEA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;;;;;;;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAjHA;;;;;;;;;;;;;;AC/GA;;;AAGA;AACA;;AAEA;AAKA;AACA;AA+BA;;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;;AAEA;AACA;AACA;AADA;;;;;;;;;;;;;;ACrEA;;;AAGA;AACA;;AAEA;AACA;AACA;AAgCA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAyCA;;AAEA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAlFA;AAkGA;;AAEA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;;;;;;;;;;;;;;;ACvMA;;;AAGA;AACA;AAKA;;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAmCA;AAjCA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AAxCA;;;;;;;;;;;;;;ACZA;;;AAGA;AACA;;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAJA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAZA;;;;;;;;;;;;;;AClDA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;AAGA;AACA;AAEA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;ACzBA;;;AAGA;AACA;;AAEA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAGA;AACA;AAHA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzIA;;;;;;;;;;;;;;ACnEA;;;AAGA;AACA;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClBA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AA+CA;;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA2EA;;AAEA;AACA;AA0DA;AACA;AA9CA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AAEA;;;;;;;AAOA;AACA;AAEA;;;;;;AAMA;AACA;AAEA;;;;;;;AAOA;AACA;;AAlIA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;;;AChKA;;;AAGA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;ACnCA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhHA;;;;;;;;;;;;;;ACbA;;;AAGA;AACA;;AAEA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAqDA;;;AAGA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AAQA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;AC3HA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA5BA;AAsCA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;ACrFA;;;AAGA;AACA;;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACrBA;;;AAGA;AACA;;AAEA;AAEA;AACA;AAoBA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApCA;AADA;AAwCA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;;;;;;;;;;;;;;;AC1BA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1CA;;;AAGA;AACA;;AAEA;AACA;AAEA;;;;;;;;AAQA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;;AAEA;AACA;AAIA;AAHA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAxCA;AA0CA;;AAEA;AACA;AASA;AARA;AACA;AAOA;AALA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;;AAEA;AACA;AAIA;AAFA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAlEA;AAoEA;;AAEA;AACA;AAIA;AAHA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AArDA;AAuDA;;AAEA;AACA;AAYA;AAXA;AACA;AACA;AASA;AAPA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AArFA;AAuFA;;AAEA;AACA;AAKA;AAJA;AAKA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAhFA;;;;;;;;;;;;;;ACzWA;;;AAGA;AACA;;AAEA;AACA;AAEA;AACA;AAMA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AArDA;AAuDA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AAKA;AAJA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAdA;AAgBA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA;AAeA;;;;AAIA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AA3BA;AA6BA;;;;AAIA;AACA;AAaA;AACA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAvBA;AAyBA;AAEA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAZA;AAcA;;AAEA;AACA;AACA;AACA;AAiBA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbA;AACA;AApBA;AAkCA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAJA;AAKA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoCA;AA/BA;;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AAgDA;;;;;;;;;;;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AA0CA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAmKA;AAjgOA;AACA;AAAA;AA8BA;;AAEA;AACA;AAOA;AACA;AAPA;AACA;AAOA;AACA;AACA;AAPA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA3FA;AA4FA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3FA;AA6FA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AAEA;;AAEA;AACA;AAAA;AAmBA;AACA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3CA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AA9BA;AA8CA;AAEA;;AAEA;AACA;AAAA;AA2BA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AACA;AA0CA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxCA;AACA;AA1CA;AAoGA;AACA;AAoCA;AACA;AACA;AACA;AACA;AA3BA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnBA;AACA;AAhBA;AA0CA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AA/BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BA;AATA;AAgDA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAPA;AA6BA;;;AAGA;AACA;AAAA;AACA;AACA;AAGA;AAGA;AAyUA;AAvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAjVA;AAkVA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AACA;AAHA;AAIA;AAHA;AAIA;AAAA;AACA;AAPA;AASA;;;AAGA;AACA;AA2DA;;;;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AArLA;AAuLA;;AAEA;AACA;AAAA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AApBA;AAqBA;AAEA;;;;;;;;;;;;;;AAcA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAnCA;AAqCA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA5CA;AA8CA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAHA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAvBA;AA0CA;AACA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9HA;AA+HA;AAgBA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA5CA;AA8CA;;AAEA;AACA;AAYA;AAXA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AA3DA;AA4DA;;AAEA;AACA;AAAA;AAUA;;;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBA;AADA;AAoBA;;;;;;;;;;;;;;ACv9EA;;;AAGA;AACA;;AAEA;AACA;AACA;AASA;;;AAGA;AACA;AAAA;AAaA;AACA;AAeA;AA5BA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AA7BA;AA+BA;;;;;;;;;;;;;;ACpDA;;;AAGA;AACA;;AAGA;AAYA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAvCA;;;;;;;;;;;;;;;ACfA;;;;AAIA;AACA;AAAA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;;AAEA;AACA;AAMA;AALA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAPA;AAqBA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAcA;;;;;;;;;;;;;;ACrFA;;;AAGA;AACA;;AAEA;AACA;AAEA;;;;AAIA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;;AAEA;AA3FA;AA2HA;;;;;;;;AAQA;AACA;AA2EA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAnEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAYA;AACA;AAtFA;AAyFA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvPA;;;AAGA;AACA;;AAKA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACVA;;;AAGA;AACA;;AAEA;AAIA;AACA;AACA;AAwHA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AA6BA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoOA;;;AAGA;AACA;AAQA;;;;;AAKA;AACA;AATA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAEA;;;;;AAKA;AACA;AAEA;;;;AAIA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AApMA;AAsMA;;;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAlDA;;;;;;;;;;;;;;ACvmBA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAaA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkDA;AACA;AAelMA;AAmMA;;;;;;;;;;;;;;AC9QA;;;AAGA;AACA;;AAEA;AAUA;;AAEA;AACA;AACA;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAYA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AA5MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAyFA;AACA;AA9IA;AA0PA;;AAEA;AACA;AASA;AANA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAxDA;;;;;;;;;;;;;;AChRA;;;AAGA;AACA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AA6DA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AAuCA;;AAEA;AACA;AAAA;AAGA;AACA;AA0KA;AAxKA;;;AAGA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9KA;AAgLA;;AAEA;AACA;AAoBA;AACA;AACA;AACA;AAvBA;AAyBA;;;AAGA;AACA;AAQA;;AAEA;AACA;AANA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9KA;;;;;;;;;;;;;;AC5WA;;;AAGA;AACA;;AAEA;AAGA;AACA;AAAA;AAkCA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAnHA;AAqHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA2BA;;;;;;;;;;;;;;AC9LA;;;AAGA;AACA;;AAEA;AAEA;AA2BA;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA1CA;AA4CA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;;;;;;;;;;;;;;ACtFA;;;AAGA;AACA;;AAEA;AA2BA;;;;AAIA;AACA;AAmBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA;;;;;;;;;;;;;;;;;;ACtCA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;;;;;;;;;;;;AC7HA;;;AAGA;AACA;;AAEA;AACA;AAIA;;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAUA;;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAtBA;AACA;AAEA;;AAEA;AACA;AAVA;;;;;;;;;;;;;;ACzBA;;;AAGA;AACA;;AAIA;AACA;AACA;AAUA;;;AAGA;AACA;AACA;AADA;AAGA;;;;AAIA;AACA;AACA;AACA;AAQA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjCA;AACA;AAEA;AACA;AARA;;;;;;;;;;;;;;AChCA;;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAQA;;;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAhCA;AACA;AAEA;AACA;AAPA;;;;;;;;;;;;;;ACdA;;;AAGA;AACA;;AAEA;AACA;AAIA;;;;AAIA;AACA;AACA;AACA;AAQA;;;AAGA;AACA;AACA;AACA;AACA;;AAbA;AACA;AAEA;AACA;AARA;;;;;;;;;;;;;;AChBA;;;AAGA;AACA;;AAEA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AAQA;;;AAGA;AAEA;AACA;;AAZA;AACA;AAEA;AACA;AARA;;;;;;;;;;;;;;ACdA;;;AAGA;AACA;;AAEA;AAGA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAAA;;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAZA;;;;;;;;;;;;;;ACtBA;;;AAGA;AACA;;AAIA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAUA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBA;AACA;AAEA;;AAEA;AACA;AAVA;;;;;;;;;;;;;;;ACnBA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;;;AAGA;AACA;AAAA;AAsDA;AACA;AAEA;;AAEA;AACA;AAgCA;AAxEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AA8BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AA1FA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;;AAIA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AA8FA;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAHA;AAKA;;AAEA;AACA;AAAA;;AACA;AACA;AAAA;AAFA;AAIA;;AAEA;AACA;AAAA;;AACA;AACA;AAqBA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvBA;;;;;;;;;;;;;;ACrIA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzFA;;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AADA;AAGA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;;AAEA;AACA;AACA;AADA;AAGA;;AAEA;AACA;AASA;;AAJA;AACA;AACA;AAyBA;AAGA;AACA;AAHA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AA3CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AA7GA;AACA;AACA;AAHA;;;;;;;;;;;;;;;AC/CA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;;AAEA;AACA;AAiDA;AACA;AAjDA;AACA;AACA;AACA;AACA;AAQA;AACA;AAqCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAzDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAkCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1LA;;;;;;;;;;;;;;AC3BA;;;AAGA;AACA;;AAEA;AAEA;AAIA;AACA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAlCA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AClLA;;;AAGA;AACA;;AAEA;AAEA;AAEA;AAGA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AA3BA;AA6BA;;AAEA;AACA;AAuCA;AACA;AACA;AACA;AACA;AACA;AAxCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;;AApDA;AACA;AAFA;AA2DA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;;AACA;AACA;AAAA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;;;;;;;;;;;;;;AC/IA;;;AAGA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAaA;AAJA;AACA;AACA;AAuCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AApDA;AACA;AAZA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA/FA;;;;;;;;;;;;;;ACZA;;;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AA8CA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAWA;AAOA;;AAEA;AACA;AA0FA;AACA;AAvFA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAiDA;AACA;AACA;AAjDA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAzGA;AACA;AAFA;;;;;;;;;;;;;;AChFA;;;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAkGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1GA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAaA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AApMA;;;;;;;;;;;;;;;ACnCA;;;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtBA;AA8DA;;AAEA;AACA;AA4HA;AACA;AA5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApHA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAoBA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA4BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAhWA;AACA;AAEA;AACA;AArBA;AAoXA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3fA;;;AAGA;AACA;;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1GA;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;AClLA;;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AASA;;AAEA;AACA;AACA;AAIA;AALA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA5BA;;;;;;;;;;;;;;AChCA;;;AAGA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AAEA;;AAEA;AACA;AAwBA;AACA;AACA;AAXA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAxBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAgBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAzDA;AADA;;;;;;;;;;;;;;ACjBA;;;AAGA;AACA;;AAEA;AAGA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AAEA;AACA;AAmCA;AAjCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxCA;;;;;;;;;;;;;;;ACRA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;;AAVA;AACA;AAtBA;AAkCA;;AAEA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;;;;;;ACjDA;;;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAYA;;AAEA;AACA;AA6BA;AACA;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAzlNA;;;;;;;;;;;;;;;ACrCA;AACA;AAGA;AACA;AAAA;;AACA;AACA;AAEA;AACA;AA8BA;AA5BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnCA;;;;;;;;;;;;;;ACVA;;;AAGA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AAgBA;;AAEA;AACA;AAGA;AAHA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAEA;AAAA;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzCA;;;;;;;;;;;;;;ACvCA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA0GA;AAxGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhIA;;;;;;;;;;;;;;AC1BA;;;AAGA;AACA;;AAEA;AAqIA;;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAzDA;;;;;;;;;;;;;;AC9IA;;;AAGA;AACA;;AAGA;AAcA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;;;;;;;;;;;;;;ACxBA;;;AAGA;AACA;;AAIA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAIA;AACA;AA9GA;;;;;;;;;;;;;;;AC/BA;;;AAGA;AACA;;AAIA;AAEA;AACA;AACA;AACA;AAmCA;;AAEA;AACA;AAmFA;AACA;AACA;AApFA;AAuCA;AACA;AAEA;AACA;AA0CA;AACA;AApFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAYA;AAxFA;;;;;;;;;;;;;;ACnDA;;;AAGA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;;AAEA;AACA;AAyFA;AACA;AACA;AA1FA;AACA;AACA;AAWA;AACA;AAEA;AACA;AA0EA;AACA;AACA;AACA;AA3FA;AAgxBA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAgnUA;;;;;;;;;;;;;AC1DA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;A","sourceRoot":""}