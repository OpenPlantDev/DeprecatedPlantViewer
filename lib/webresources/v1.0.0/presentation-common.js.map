{"version":3,"file":"presentation-common.js","sources":["file:///webpack/universalModuleDefinition","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\EC.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\Error.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\KeySet.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\Logging.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\PresentationRpcInterface.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\RegisteredRuleset.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\RpcRequestsHandler.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\RulesetVariables.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\RulesetsFactory.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\Utils.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Content.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Descriptor.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\DisplayTypes.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Fields.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Item.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Property.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\TypeDescription.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\content\\Value.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\hierarchy\\Key.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\hierarchy\\Node.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\hierarchy\\NodePathElement.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\presentation-common.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\RelationshipDirection.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\Rule.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\Variables.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\content\\ContentSpecification.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\content\\modifiers\\PropertyEditorsSpecification.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\content\\modifiers\\RelatedPropertiesSpecification.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\customization\\GroupingRule.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\customization\\InstanceLabelOverride.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\hierarchy\\ChildNodeSpecification.ts","file:///D:\\vsts_b\\5\\s\\presentation\\common\\src\\rules\\hierarchy\\CustomQueryInstanceNodesSpecification.ts","file:///external \"bentleyjs_core\"","file:///external \"imodeljs_common\""],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"bentleyjs_core\"), require(\"imodeljs_common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"presentation_common\", [\"bentleyjs_core\", \"imodeljs_common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"presentation_common\"] = factory(require(\"bentleyjs_core\"), require(\"imodeljs_common\"));\n\telse\n\t\troot[\"presentation_common\"] = factory(root[\"bentleyjs_core\"], root[\"imodeljs_common\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__, __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_common__) {\nreturn ","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { Id64String, Id64 } from \"@bentley/bentleyjs-core\";\n\n/**\n * Type of an ECClass ID.\n * @public\n */\nexport type ClassId = Id64String;\n\n/**\n * Type of an ECInstance ID.\n * @public\n */\nexport type InstanceId = Id64String;\n\n/**\n * A key that uniquely identifies an instance in an iModel\n * @public\n */\nexport interface InstanceKey {\n  /** Full class name in format `SchemaName:ClassName` */\n  className: string;\n  /** ECInstance ID */\n  id: InstanceId;\n}\n/** @public */\nexport namespace InstanceKey {\n  /**\n   * Compare 2 instance keys\n   * @public\n   */\n  export function compare(lhs: InstanceKey, rhs: InstanceKey): number {\n    const classNameCompare = lhs.className.localeCompare(rhs.className);\n    if (classNameCompare !== 0)\n      return classNameCompare;\n    return lhs.id.localeCompare(rhs.id);\n  }\n\n  /** @internal */\n  export function toJSON(json: InstanceKey): InstanceKeyJSON {\n    return { ...json, id: json.id.toString() };\n  }\n\n  /**\n   * Deserializes [[InstanceKey]] from [[InstanceKeyJSON]]\n   * @internal\n   */\n  export function fromJSON(json: InstanceKeyJSON) {\n    return { ...json, id: Id64.fromJSON(json.id) };\n  }\n}\n\n/**\n * A serialized version of [[InstanceKey]]\n * @internal\n */\nexport interface InstanceKeyJSON {\n  className: string;\n  id: string;\n}\n\n/**\n * Information about an ECClass\n * @public\n */\nexport interface ClassInfo {\n  /** ECClass ID */\n  id: ClassId;\n  /** Full class name in format `SchemaName:ClassName` */\n  name: string;\n  /** ECClass label */\n  label: string;\n}\n/** @public */\nexport namespace ClassInfo {\n  /** @internal */\n  export function toJSON(info: ClassInfo): ClassInfoJSON {\n    return { ...info, id: info.id.toString() };\n  }\n  /**\n   * Deserializes [[ClassInfo]] from [[ClassInfoJSON]]\n   * @internal\n   */\n  export function fromJSON(json: ClassInfoJSON): ClassInfo {\n    return { ...json, id: Id64.fromJSON(json.id) };\n  }\n}\n\n/**\n * A serialized version of [[ClassInfo]]\n * @internal\n */\nexport interface ClassInfoJSON {\n  id: string;\n  name: string;\n  label: string;\n}\n\n/**\n * A single choice in enumeration\n * @public\n */\nexport interface EnumerationChoice {\n  /** Label of the choice */\n  label: string;\n  /** Value of the choice */\n  value: string | number;\n}\n\n/**\n * Enumeration information\n * @public\n */\nexport interface EnumerationInfo {\n  /** Available enumeration choices */\n  choices: EnumerationChoice[];\n  /** Is the enumeration strict (values only allowed from `choices` list) */\n  isStrict: boolean;\n}\n\n/**\n * Kind of quantity information\n * @public\n */\nexport interface KindOfQuantityInfo {\n  /** Full name of KindOfQuantity in format `SchemaName:KindOfQuantityName` */\n  name: string;\n  /** Label of KindOfQuantity */\n  label: string;\n  /**\n   * Persistence unit identifier.\n   * @alpha Still not entirely clear how kind of quantities will be handled and what data we'll need\n   */\n  persistenceUnit: string;\n  /**\n   * Current format identifier\n   * @alpha Still not entirely clear how kind of quantities will be handled and what data we'll need\n   */\n  currentFormatId: string;\n}\n\n/**\n * A structure that describes an ECProperty\n * @public\n */\nexport interface PropertyInfo {\n  /** Information about ECProperty class */\n  classInfo: ClassInfo;\n  /** Name of the ECProperty */\n  name: string;\n  /** Type name of the ECProperty */\n  type: string;\n  /** Enumeration info if the property is enumerable */\n  enumerationInfo?: EnumerationInfo;\n  /**\n   * Kind of quantity information, if any.\n   * @alpha Still not entirely clear how kind of quantities will be handled and what data we'll need\n   */\n  kindOfQuantity?: KindOfQuantityInfo;\n}\n/** @public */\nexport namespace PropertyInfo {\n  /** @internal */\n  export function toJSON(info: PropertyInfo): PropertyInfoJSON {\n    return { ...info, classInfo: ClassInfo.toJSON(info.classInfo) };\n  }\n  /**\n   * Deserializes [[PropertyInfo]] from [[PropertyInfoJSON]]\n   * @internal\n   */\n  export function fromJSON(json: PropertyInfoJSON): PropertyInfo {\n    return { ...json, classInfo: ClassInfo.fromJSON(json.classInfo) };\n  }\n}\n\n/**\n * A serialized version of [[PropertyInfo]]\n * @internal\n */\nexport interface PropertyInfoJSON {\n  classInfo: ClassInfoJSON;\n  name: string;\n  type: string;\n  enumerationInfo?: EnumerationInfo;\n  kindOfQuantity?: KindOfQuantityInfo;\n}\n\n/**\n * A structure that describes a related class and the properties of that relationship.\n * @public\n */\nexport interface RelatedClassInfo {\n  /** Information about the source ECClass */\n  sourceClassInfo: ClassInfo;\n\n  /** Information about the target ECClass */\n  targetClassInfo: ClassInfo;\n\n  /** Information about the ECRelationship */\n  relationshipInfo: ClassInfo;\n\n  /** Should the relationship be followed in a forward direction to access the related class. */\n  isForwardRelationship: boolean;\n\n  /** Is the relationship handled polymorphically */\n  isPolymorphicRelationship: boolean;\n}\n/** @public */\nexport namespace RelatedClassInfo {\n  /** @internal */\n  export function toJSON(info: RelatedClassInfo): RelatedClassInfoJSON {\n    return {\n      ...info,\n      sourceClassInfo: ClassInfo.toJSON(info.sourceClassInfo),\n      targetClassInfo: ClassInfo.toJSON(info.targetClassInfo),\n      relationshipInfo: ClassInfo.toJSON(info.relationshipInfo),\n    };\n  }\n  /**\n   * Deserializes [[RelatedClassInfo]] from [[RelatedClassInfoJSON]]\n   * @internal\n   */\n  export function fromJSON(json: RelatedClassInfoJSON): RelatedClassInfo {\n    return {\n      ...json,\n      sourceClassInfo: ClassInfo.fromJSON(json.sourceClassInfo),\n      targetClassInfo: ClassInfo.fromJSON(json.targetClassInfo),\n      relationshipInfo: ClassInfo.fromJSON(json.relationshipInfo),\n    };\n  }\n}\n\n/**\n * A serialized version of [[RelatedClassInfo]]\n * @internal\n */\nexport interface RelatedClassInfoJSON {\n  sourceClassInfo: ClassInfoJSON;\n  targetClassInfo: ClassInfoJSON;\n  relationshipInfo: ClassInfoJSON;\n  isForwardRelationship: boolean;\n  isPolymorphicRelationship: boolean;\n}\n\n/**\n * A structure that describes a related class path.\n * @public\n */\nexport type RelationshipPath = RelatedClassInfo[];\n\n/**\n * Serialized [[RelationshipPathInfo]]\n * @internal\n */\nexport type RelationshipPathJSON = RelatedClassInfoJSON[];\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { BentleyError, LogFunction, GetMetaDataFunction } from \"@bentley/bentleyjs-core\";\n\n/**\n * Status codes used by Presentation APIs.\n * @public\n */\nexport enum PresentationStatus {\n  /** Success result */\n  Success = 0,\n  /** Error: Unknown */\n  Error = 0x10000,\n  /** Error: Not initialized */\n  NotInitialized = Error + 1,\n  /** Error: Attempting to use something after disposal */\n  UseAfterDisposal = Error + 2,\n  /** Error: Argument is invalid */\n  InvalidArgument = Error + 3,\n  /** Error: Received invalid response */\n  InvalidResponse = Error + 4,\n  /** Error: Requested content when there is none. */\n  NoContent = Error + 5,\n  /** Error: Backend needs to be synced with client state */\n  BackendOutOfSync = Error + 6,\n  /** Error: The timeout for the request was reached which prevented it from being fulfilled */\n  BackendTimeout = Error + 7,\n}\n\n/**\n * An error type thrown by Presentation APIs.\n * @public\n */\nexport class PresentationError extends BentleyError {\n\n  /**\n   * Creates an instance of Error.\n   * @param errorNumber Error code\n   * @param message Optional brief description of the error. The `message` property combined with the `name`\n   * property is used by the `Error.prototype.toString()` method to create a string representation of the Error.\n   * @param log Optional log function which logs the error.\n   * @param getMetaData Optional function that returns meta-data related to an error.\n   */\n  public constructor(errorNumber: PresentationStatus, message?: string, log?: LogFunction, getMetaData?: GetMetaDataFunction) {\n    super(errorNumber, message, log, \"Presentation\", getMetaData);\n  }\n\n  /**\n   * Returns the name of each error status. The name is used by the `Error.prototype.toString()`\n   * method to create a string representation of the error.\n   */\n  // tslint:disable-next-line:naming-convention\n  protected _initName(): string {\n    let value = PresentationStatus[this.errorNumber];\n    if (!value)\n      value = `Unknown Error (${this.errorNumber})`;\n    return value;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { Id64, GuidString, Guid, Id64String } from \"@bentley/bentleyjs-core\";\nimport { InstanceId, InstanceKey } from \"./EC\";\nimport { NodeKey, NodeKeyJSON } from \"./hierarchy/Key\";\nimport { EntityProps } from \"@bentley/imodeljs-common\";\nimport { PresentationError, PresentationStatus } from \"./Error\";\n\n/**\n * A single key that identifies something in iModel.js application\n * @public\n */\nexport type Key = Readonly<NodeKey> | Readonly<InstanceKey> | Readonly<EntityProps>;\n\n/** @public */\nexport namespace Key {\n  /** Check if the supplied key is a `NodeKey` */\n  export function isNodeKey(key: Key): key is NodeKey {\n    return (key as any).type;\n  }\n\n  /** Check if the supplied key is an `InstanceKey` */\n  export function isInstanceKey(key: Key): key is InstanceKey {\n    return (key as any).className && (key as any).id;\n  }\n\n  /** Check if the supplied key is an `EntityProps` */\n  export function isEntityProps(key: Key): key is EntityProps {\n    return (key as any).classFullName && (key as any).id;\n  }\n}\n\n/**\n * A type for multiple keys that identify something in iModel.js application\n * @public\n */\nexport type Keys = ReadonlyArray<Key> | Readonly<KeySet>;\n\n/**\n * A data structure of serialized [[KeySet]]\n * @internal\n */\nexport interface KeySetJSON {\n  instanceKeys: Array<[string, string[]]>;\n  nodeKeys: NodeKeyJSON[];\n}\n\n/**\n * A class that holds multiple [[Key]] objects. It's basically\n * used as a container that holds multiple keys of different types.\n *\n * @public\n */\nexport class KeySet {\n  // note: all keys are stored as strings because we need ability to find them by value\n  private _instanceKeys: Map<string, Set<string>>; // class name => instance ids\n  private _nodeKeys: Set<string>;\n  private _guid: GuidString;\n\n  /**\n   * Creates an instance of KeySet.\n   * @param source Optional source to initialize from.\n   */\n  constructor(source?: Keys) {\n    this._instanceKeys = new Map();\n    this._nodeKeys = new Set();\n    this._guid = Guid.createValue();\n    if (source)\n      this.add(source);\n  }\n\n  /**\n   * Get a GUID that identifies changes in this keyset. The value\n   * does not uniquely identify contents of the keyset, but it can be\n   * used to check whether keyset has changed.\n   */\n  public get guid(): GuidString { return this._guid; }\n\n  /**\n   * Get a map of instance keys stored in this KeySet\n   *\n   * **Warning**: getting instance keys might be expensive for\n   * large KeySets.\n   */\n  public get instanceKeys(): Map<string, Set<InstanceId>> {\n    const map = new Map<string, Set<InstanceId>>();\n    for (const entry of this._instanceKeys)\n      map.set(entry[\"0\"], new Set([...entry[\"1\"]].map((key: string) => Id64.fromJSON(key))));\n    return map;\n  }\n\n  /**\n   * Get instance keys count\n   */\n  public get instanceKeysCount(): number {\n    let count = 0;\n    this._instanceKeys.forEach((set: Set<string>) => count += set.size);\n    return count;\n  }\n\n  /**\n   * Get a set of node keys stored in this KeySet\n   *\n   * **Warning**: getting node keys might be expensive for\n   * large KeySets.\n   */\n  public get nodeKeys(): Set<NodeKey> {\n    const set = new Set<NodeKey>();\n    for (const serialized of this._nodeKeys) {\n      const key = NodeKey.fromJSON(JSON.parse(serialized));\n      set.add(key);\n    }\n    return set;\n  }\n\n  /**\n   * Get node keys count\n   */\n  public get nodeKeysCount(): number {\n    return this._nodeKeys.size;\n  }\n\n  private isKeySet(set: Keys | Key): set is Readonly<KeySet> {\n    return (set as any)._nodeKeys && (set as any)._instanceKeys;\n  }\n\n  private isKeysArray(keys: Keys | Key): keys is ReadonlyArray<Key> {\n    return Array.isArray(keys);\n  }\n\n  /**\n   * Clear this KeySet.\n   * @returns itself\n   */\n  public clear(): KeySet {\n    if (this.isEmpty)\n      return this;\n\n    this._instanceKeys = new Map();\n    this._nodeKeys = new Set();\n    this._guid = Guid.createValue();\n    return this;\n  }\n\n  private addKeySet(keyset: Readonly<KeySet>, pred?: (key: Key) => boolean): void {\n    for (const key of (keyset as any)._nodeKeys) {\n      if (!pred || pred(NodeKey.fromJSON(JSON.parse(key))))\n        this._nodeKeys.add(key);\n    }\n    for (const entry of (keyset as any)._instanceKeys) {\n      let set = this._instanceKeys.get(entry[\"0\"]);\n      if (!set) {\n        set = new Set();\n        this._instanceKeys.set(entry[\"0\"], set);\n      }\n      entry[\"1\"].forEach((id: Id64String) => {\n        if (!pred || pred({ className: entry[0], id }))\n          set!.add(id);\n      });\n    }\n  }\n\n  private addKeySetJSON(keyset: Readonly<KeySetJSON>): void {\n    for (const key of keyset.nodeKeys)\n      this._nodeKeys.add(JSON.stringify(key));\n    for (const entry of keyset.instanceKeys)\n      this._instanceKeys.set(entry[\"0\"], new Set(entry[\"1\"]));\n  }\n\n  /**\n   * Add a key or keys to this KeySet.\n   * @param value A key or keys to add.\n   * @param pred An optional predicate function that indicates whether a key should be added\n   * @returns itself\n   */\n  public add(value: Keys | Key, pred?: (key: Key) => boolean): KeySet {\n    if (!value)\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n    const sizeBefore = this.size;\n    if (this.isKeySet(value)) {\n      this.addKeySet(value, pred);\n    } else if (this.isKeysArray(value)) {\n      value.forEach((key) => (!pred || pred(key)) ? this.add(key) : undefined);\n    } else if (Key.isEntityProps(value)) {\n      this.add({ className: value.classFullName, id: Id64.fromJSON(value.id) } as InstanceKey);\n    } else if (Key.isInstanceKey(value)) {\n      if (!this._instanceKeys.has(value.className))\n        this._instanceKeys.set(value.className, new Set());\n      this._instanceKeys.get(value.className)!.add(value.id);\n    } else if (Key.isNodeKey(value)) {\n      this._nodeKeys.add(JSON.stringify(value));\n    } else {\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n    }\n    if (this.size !== sizeBefore)\n      this._guid = Guid.createValue();\n    return this;\n  }\n\n  private deleteKeySet(keyset: Readonly<KeySet>): void {\n    for (const key of (keyset as any)._nodeKeys)\n      this._nodeKeys.delete(key);\n    for (const entry of (keyset as any)._instanceKeys) {\n      const set = this._instanceKeys.get(entry[\"0\"]);\n      if (set) {\n        entry[\"1\"].forEach((key: string) => {\n          set.delete(key);\n        });\n      }\n    }\n  }\n\n  /**\n   * Deletes a key or keys from this KeySet.\n   * @param value A key or keys to delete.\n   * @returns itself\n   */\n  public delete(value: Keys | Key): KeySet {\n    if (!value)\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n    const sizeBefore = this.size;\n    if (this.isKeySet(value)) {\n      this.deleteKeySet(value);\n    } else if (this.isKeysArray(value)) {\n      for (const key of value)\n        this.delete(key);\n    } else if (Key.isEntityProps(value)) {\n      this.delete({ className: value.classFullName, id: value.id! } as InstanceKey);\n    } else if (Key.isInstanceKey(value)) {\n      const set = this._instanceKeys.get(value.className);\n      if (set)\n        set.delete(value.id);\n    } else if (Key.isNodeKey(value)) {\n      this._nodeKeys.delete(JSON.stringify(value));\n    } else {\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n    }\n    if (this.size !== sizeBefore)\n      this._guid = Guid.createValue();\n    return this;\n  }\n\n  /**\n   * Check if this KeySet contains the specified key.\n   * @param value The key to check.\n   */\n  public has(value: Key): boolean {\n    if (!value)\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n    if (Key.isEntityProps(value))\n      return this.has({ className: value.classFullName, id: value.id! } as InstanceKey);\n    if (Key.isInstanceKey(value)) {\n      const set = this._instanceKeys.get(value.className);\n      return !!(set && set.has(value.id));\n    }\n    if (Key.isNodeKey(value))\n      return this._nodeKeys.has(JSON.stringify(value));\n    throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${value}`);\n  }\n\n  private hasKeySet(readonlyKeys: Readonly<KeySet>, checkType: \"all\" | \"any\"): boolean {\n    // note: cast-away read-onlyness to access private members...\n    const keys = readonlyKeys as KeySet;\n\n    if (checkType === \"all\") {\n      if (this._nodeKeys.size < keys._nodeKeys.size || this._instanceKeys.size < keys._instanceKeys.size)\n        return false;\n      if ([...keys._nodeKeys].some((key) => !this._nodeKeys.has(key)))\n        return false;\n      for (const otherEntry of keys._instanceKeys) {\n        const thisEntryKeys = this._instanceKeys.get(otherEntry[\"0\"]);\n        if (!thisEntryKeys || thisEntryKeys.size < otherEntry[\"1\"].size)\n          return false;\n        if ([...otherEntry[\"1\"]].some((key) => !thisEntryKeys.has(key)))\n          return false;\n      }\n      return true;\n    }\n\n    // \"any\" check type\n    if ([...keys._nodeKeys].some((key) => this._nodeKeys.has(key)))\n      return true;\n    for (const otherEntry of keys._instanceKeys) {\n      const thisEntryKeys = this._instanceKeys.get(otherEntry[\"0\"]);\n      if (thisEntryKeys && [...otherEntry[\"1\"]].some((key) => thisEntryKeys.has(key)))\n        return true;\n    }\n    return false;\n  }\n\n  private hasKeysArray(keys: ReadonlyArray<Key>, checkType: \"all\" | \"any\"): boolean {\n    if (checkType === \"all\") {\n      if (this.size < keys.length)\n        return false;\n      for (const key of keys) {\n        if (!this.has(key))\n          return false;\n      }\n      return true;\n    }\n\n    // \"any\" check type\n    for (const key of keys) {\n      if (this.has(key))\n        return true;\n    }\n    return false;\n  }\n\n  /**\n   * Check if this KeySet contains all the specified keys.\n   * @param keys The keys to check.\n   */\n  public hasAll(keys: Keys): boolean {\n    if (!keys)\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${keys}`);\n    if (this.isKeySet(keys))\n      return this.hasKeySet(keys, \"all\");\n    if (this.isKeysArray(keys))\n      return this.hasKeysArray(keys, \"all\");\n    throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: keys = ${keys}`);\n  }\n\n  /**\n   * Check if this KeySet contains any of the specified keys.\n   * @param keys The keys to check.\n   */\n  public hasAny(keys: Keys): boolean {\n    if (!keys)\n      throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: value = ${keys}`);\n    if (this.isKeySet(keys))\n      return this.hasKeySet(keys, \"any\");\n    if (this.isKeysArray(keys))\n      return this.hasKeysArray(keys, \"any\");\n    throw new PresentationError(PresentationStatus.InvalidArgument, `Invalid argument: keys = ${keys}`);\n  }\n\n  /**\n   * Get the number of keys stored in this KeySet.\n   */\n  public get size(): number {\n    const nodeKeysCount = this._nodeKeys.size;\n    let instanceIdsCount = 0;\n    for (const set of this._instanceKeys.values())\n      instanceIdsCount += set.size;\n    return nodeKeysCount + instanceIdsCount;\n  }\n\n  /**\n   * Is this KeySet currently empty.\n   */\n  public get isEmpty(): boolean {\n    return 0 === this.size;\n  }\n\n  /**\n   * Serializes this KeySet to JSON\n   * @internal\n   */\n  public toJSON(): KeySetJSON {\n    const instanceKeys = new Array();\n    for (const entry of this._instanceKeys.entries()) {\n      if (entry[\"1\"].size > 0)\n        instanceKeys.push([entry[\"0\"], [...entry[\"1\"]]]);\n    }\n    const nodeKeys = new Array<NodeKeyJSON>();\n    for (const serializedKey of this._nodeKeys.values())\n      nodeKeys.push(JSON.parse(serializedKey));\n    return {\n      instanceKeys,\n      nodeKeys,\n    };\n  }\n\n  /**\n   * Creates a KeySet from JSON\n   * @internal\n   */\n  public static fromJSON(json: KeySetJSON): KeySet {\n    const keyset = new KeySet();\n    keyset.addKeySetJSON(json);\n    return keyset;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\n// tslint:disable:naming-convention\n/**\n * Enum of logging namespaces used by Presentation library.\n * Use `@bentley/bentleyjs-core/Logger` to enable logging for these namespaces.\n *\n * @public\n */\nexport  enum LoggingNamespaces {\n  ECObjects = \"ECObjects\",\n  ECObjects_ECExpressions = \"ECObjects.ECExpressions\",\n  ECObjects_ECExpressions_Parse = \"ECObjects.ECExpressions.Parse\",\n  ECObjects_ECExpressions_Evaluate = \"ECObjects.ECExpressions.Evaluate\",\n\n  ECPresentation = \"ECPresentation\",\n  ECPresentation_Connections = \"ECPresentation.Connections\",\n  ECPresentation_RulesEngine = \"ECPresentation.RulesEngine\",\n  ECPresentation_RulesEngine_Content = \"ECPresentation.RulesEngine.Content\",\n  ECPresentation_RulesEngine_Localization = \"ECPresentation.RulesEngine.Localization\",\n  ECPresentation_RulesEngine_Navigation = \"ECPresentation.RulesEngine.Navigation\",\n  ECPresentation_RulesEngine_Navigation_Cache = \"ECPresentation.RulesEngine.Navigation.Cache\",\n  ECPresentation_RulesEngine_Threads = \"ECPresentation.RulesEngine.Threads\",\n  ECPresentation_RulesEngine_Update = \"ECPresentation.RulesEngine.Update\",\n  ECPresentation_RulesEngine_RulesetVariables = \"ECPresentation.RulesEngine.RulesetVariables\",\n}\n\n// tslint:enable:naming-convention\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RPC */\n\nimport { Id64String } from \"@bentley/bentleyjs-core\";\nimport { RpcInterface, IModelToken, IModelTokenProps } from \"@bentley/imodeljs-common\";\nimport { NodeKeyJSON } from \"./hierarchy/Key\";\nimport { NodePathElementJSON } from \"./hierarchy/NodePathElement\";\nimport { NodeJSON } from \"./hierarchy/Node\";\nimport { SelectionInfo, DescriptorJSON, DescriptorOverrides } from \"./content/Descriptor\";\nimport { ContentJSON } from \"./content/Content\";\nimport {\n  HierarchyRequestOptions, ContentRequestOptions,\n  LabelRequestOptions, SelectionScopeRequestOptions, Paged,\n} from \"./PresentationManagerOptions\";\nimport { KeySetJSON } from \"./KeySet\";\nimport { InstanceKeyJSON } from \"./EC\";\nimport { Omit } from \"./Utils\";\nimport { SelectionScope } from \"./selection/SelectionScope\";\nimport { PresentationStatus } from \"./Error\";\n\n/**\n * Base options for all presentation RPC requests.\n * @public\n */\nexport interface PresentationRpcRequestOptions {\n  /** ID of the client requesting data */\n  clientId?: string;\n  /**\n   * Client state identifier. Backend requests client to synchronize state\n   * if client state ID doesn't match what's stored on the backend.\n   */\n  clientStateId?: string;\n}\n\n/**\n * Data structure for presentation RPC responses\n * @public\n */\nexport type PresentationRpcResponse<TResult = undefined> = Promise<{\n  /** Response status code */\n  statusCode: PresentationStatus;\n  /** In case of an error response, the error message */\n  errorMessage?: string;\n  /** In case of a success response, the result */\n  result?: TResult;\n}>;\n\n/**\n * Data structure for hierarchy request options.\n * @public\n */\nexport type HierarchyRpcRequestOptions = PresentationRpcRequestOptions & Omit<HierarchyRequestOptions<IModelToken>, \"imodel\">;\n/**\n * Data structure for content request options.\n * @public\n */\nexport type ContentRpcRequestOptions = PresentationRpcRequestOptions & Omit<ContentRequestOptions<IModelToken>, \"imodel\">;\n/**\n * Data structure for label request options.\n * @public\n */\nexport type LabelRpcRequestOptions = PresentationRpcRequestOptions & Omit<LabelRequestOptions<IModelToken>, \"imodel\">;\n/**\n * Data structure for selection scope request options.\n * @public\n */\nexport type SelectionScopeRpcRequestOptions = PresentationRpcRequestOptions & Omit<SelectionScopeRequestOptions<IModelToken>, \"imodel\">;\n/**\n * Data structure for ruleset variable request options.\n * @public\n */\nexport type RulesetVariableRpcRequestOptions = PresentationRpcRequestOptions & { rulesetId: string };\n/**\n * Data structure for synchronizing backend with frontend state.\n * @internal Sync is done by presentation framework - no need to expose that\n */\nexport type ClientStateSyncRequestOptions = PresentationRpcRequestOptions & { state: { [id: string]: unknown } };\n\n/**\n * Interface used for communication between Presentation backend and frontend.\n *\n * @public\n */\nexport class PresentationRpcInterface extends RpcInterface {\n  /** The immutable name of the interface. */\n  public static readonly interfaceName = \"PresentationRpcInterface\"; // tslint:disable-line: naming-convention\n\n  /** The semantic version of the interface. */\n  public static interfaceVersion = \"1.0.0\";\n\n  /*===========================================================================================\n    NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n    NOTE: Please consult the README in core/common/src/rpc for the semantic versioning rules.\n  ===========================================================================================*/\n\n  public async getNodesAndCount(_token: IModelTokenProps, _options: Paged<HierarchyRpcRequestOptions>, _parentKey?: NodeKeyJSON): PresentationRpcResponse<{ nodes: NodeJSON[], count: number }> { return this.forward(arguments); }\n  public async getNodes(_token: IModelTokenProps, _options: Paged<HierarchyRpcRequestOptions>, _parentKey?: NodeKeyJSON): PresentationRpcResponse<NodeJSON[]> { return this.forward(arguments); }\n  public async getNodesCount(_token: IModelTokenProps, _options: HierarchyRpcRequestOptions, _parentKey?: NodeKeyJSON): PresentationRpcResponse<number> { return this.forward(arguments); }\n  public async getNodePaths(_token: IModelTokenProps, _options: HierarchyRpcRequestOptions, _paths: InstanceKeyJSON[][], _markedIndex: number): PresentationRpcResponse<NodePathElementJSON[]> { return this.forward(arguments); }\n  public async getFilteredNodePaths(_token: IModelTokenProps, _options: HierarchyRpcRequestOptions, _filterText: string): PresentationRpcResponse<NodePathElementJSON[]> { return this.forward(arguments); }\n\n  public async getContentDescriptor(_token: IModelTokenProps, _options: ContentRpcRequestOptions, _displayType: string, _keys: KeySetJSON, _selection: SelectionInfo | undefined): PresentationRpcResponse<DescriptorJSON | undefined> { return this.forward(arguments); }\n  public async getContentSetSize(_token: IModelTokenProps, _options: ContentRpcRequestOptions, _descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, _keys: KeySetJSON): PresentationRpcResponse<number> { return this.forward(arguments); }\n  public async getContent(_token: IModelTokenProps, _options: ContentRpcRequestOptions, _descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, _keys: KeySetJSON): PresentationRpcResponse<ContentJSON | undefined> { return this.forward(arguments); }\n  public async getContentAndSize(_token: IModelTokenProps, _options: ContentRpcRequestOptions, _descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, _keys: KeySetJSON): PresentationRpcResponse<{ content?: ContentJSON, size: number }> { return this.forward(arguments); }\n  public async getDistinctValues(_token: IModelTokenProps, _options: ContentRpcRequestOptions, _descriptor: DescriptorJSON, _keys: KeySetJSON, _fieldName: string, _maximumValueCount: number): PresentationRpcResponse<string[]> { return this.forward(arguments); }\n\n  public async getDisplayLabel(_token: IModelTokenProps, _options: LabelRpcRequestOptions, _key: InstanceKeyJSON): PresentationRpcResponse<string> { return this.forward(arguments); }\n  public async getDisplayLabels(_token: IModelTokenProps, _options: LabelRpcRequestOptions, _keys: InstanceKeyJSON[]): PresentationRpcResponse<string[]> { return this.forward(arguments); }\n\n  public async getSelectionScopes(_token: IModelTokenProps, _options: SelectionScopeRpcRequestOptions): PresentationRpcResponse<SelectionScope[]> { return this.forward(arguments); }\n  public async computeSelection(_token: IModelTokenProps, _options: SelectionScopeRpcRequestOptions, _ids: Id64String[], _scopeId: string): PresentationRpcResponse<KeySetJSON> { return this.forward(arguments); }\n\n  /** @internal Used internally to sync backend with frontend state */\n  public async syncClientState(_token: IModelTokenProps, _options: ClientStateSyncRequestOptions): PresentationRpcResponse { return this.forward(arguments); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { IDisposable } from \"@bentley/bentleyjs-core\";\nimport { Ruleset, SupplementationInfo } from \"./rules/Ruleset\";\nimport { Rule } from \"./rules/Rule\";\nimport { VariablesGroup } from \"./rules/Variables\";\nimport { SchemasSpecification } from \"./rules/SchemasSpecification\";\n\n/**\n * A ruleset that is registered in a ruleset manager.\n * @public\n */\nexport class RegisteredRuleset implements IDisposable, Ruleset {\n  private _ruleset: Ruleset;\n  private _uniqueIdentifier: string;\n  private _disposeFunc: (ruleset: RegisteredRuleset) => void;\n\n  /** Create a registered ruleset */\n  public constructor(ruleset: Ruleset, uniqueIdentifier: string, disposeFunc: (ruleset: RegisteredRuleset) => void) {\n    this._disposeFunc = disposeFunc;\n    this._ruleset = ruleset;\n    this._uniqueIdentifier = uniqueIdentifier;\n  }\n\n  /** Dispose registered ruleset. */\n  public dispose() {\n    this._disposeFunc(this);\n  }\n\n  public get uniqueIdentifier() { return this._uniqueIdentifier; }\n  public get id(): string { return this._ruleset.id; }\n  public get supportedSchemas(): SchemasSpecification | undefined { return this._ruleset.supportedSchemas; }\n  public get supplementationInfo(): SupplementationInfo | undefined { return this._ruleset.supplementationInfo; }\n  public get rules(): Rule[] { return this._ruleset.rules; }\n  public get vars(): VariablesGroup[] | undefined { return this._ruleset.vars; }\n  public toJSON(): Ruleset { return this._ruleset; }\n}\n\n/** @internal */\nexport type RulesetManagerState = Ruleset[];\n\n/** @internal */\nexport namespace RulesetManagerState {\n  export const STATE_ID = \"rulesets\";\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module RPC */\n\nimport { Guid, BeEvent, IDisposable, Id64String } from \"@bentley/bentleyjs-core\";\nimport { IModelToken, RpcManager } from \"@bentley/imodeljs-common\";\nimport { KeySetJSON } from \"./KeySet\";\nimport { PresentationStatus, PresentationError } from \"./Error\";\nimport { InstanceKeyJSON } from \"./EC\";\nimport { NodeKeyJSON } from \"./hierarchy/Key\";\nimport { NodeJSON } from \"./hierarchy/Node\";\nimport { NodePathElementJSON } from \"./hierarchy/NodePathElement\";\nimport { SelectionInfo, DescriptorJSON, DescriptorOverrides } from \"./content/Descriptor\";\nimport { ContentJSON } from \"./content/Content\";\nimport { SelectionScope } from \"./selection/SelectionScope\";\nimport { HierarchyRequestOptions, ContentRequestOptions, Paged, SelectionScopeRequestOptions, LabelRequestOptions } from \"./PresentationManagerOptions\";\nimport { PresentationRpcInterface, PresentationRpcRequestOptions, PresentationRpcResponse } from \"./PresentationRpcInterface\";\nimport { Omit } from \"./Utils\";\n\n/**\n * Configuration parameters for [[RpcRequestsHandler]].\n *\n * @internal\n */\nexport interface RpcRequestsHandlerProps {\n  /**\n   * Optional ID used to identify client that requests data. If not specified,\n   * the handler creates a unique GUID as a client id.\n   * @internal\n   */\n  clientId?: string;\n}\n\n/**\n * An interface for something that stores client state that needs\n * to be synced with the backend.\n *\n * @internal\n */\nexport interface IClientStateHolder<TState> {\n  key: string;\n  state: TState | undefined;\n  onStateChanged: BeEvent<() => void>;\n}\n\n/**\n * RPC requests handler that wraps [[PresentationRpcInterface]] and\n * adds handling for cases when backend needs to be synced with client\n * state.\n *\n * @internal\n */\nexport class RpcRequestsHandler implements IDisposable {\n  private _maxRequestRepeatCount: number = 10;\n  private _clientStateId?: string;\n  private _clientStateHolders: Array<IClientStateHolder<any>>;\n\n  /** ID that identifies this handler as a client */\n  public readonly clientId: string;\n\n  /** ID that identifies current client state */\n  public get clientStateId() { return this._clientStateId; }\n\n  public constructor(props?: RpcRequestsHandlerProps) {\n    this.clientId = (props && props.clientId) ? props.clientId : Guid.createValue();\n    this._clientStateHolders = [];\n  }\n\n  public dispose() {\n    this._clientStateHolders.forEach((h) => h.onStateChanged.removeListener(this.onClientStateChanged));\n    this._clientStateHolders = [];\n  }\n\n  // tslint:disable-next-line:naming-convention\n  private get rpcClient(): PresentationRpcInterface { return RpcManager.getClientForInterface(PresentationRpcInterface); }\n\n  private createRequestOptions<T>(options: T): PresentationRpcRequestOptions & T {\n    return Object.assign({}, options, {\n      clientId: this.clientId,\n      clientStateId: this._clientStateId,\n    });\n  }\n\n  public registerClientStateHolder(holder: IClientStateHolder<any>) {\n    this._clientStateHolders.push(holder);\n    holder.onStateChanged.addListener(this.onClientStateChanged);\n  }\n\n  public unregisterClientStateHolder(holder: IClientStateHolder<any>) {\n    const index = this._clientStateHolders.indexOf(holder);\n    if (- 1 !== index)\n      this._clientStateHolders.splice(index, 1);\n    holder.onStateChanged.removeListener(this.onClientStateChanged);\n  }\n\n  // tslint:disable-next-line:naming-convention\n  private onClientStateChanged = (): void => {\n    this._clientStateId = Guid.createValue();\n  }\n\n  /**\n   * Syncs backend with the client state provided by client state holders\n   *\n   * @internal\n   */\n  public async sync(token: IModelToken): Promise<void> {\n    const clientState: { [stateKey: string]: any } = {};\n    for (const holder of this._clientStateHolders) {\n      const holderState = holder.state;\n      const existing = clientState[holder.key];\n      if (existing && typeof existing === \"object\" && typeof holderState === \"object\") {\n        clientState[holder.key] = { ...existing, ...holderState };\n      } else {\n        clientState[holder.key] = holderState;\n      }\n    }\n    await this.rpcClient.syncClientState(token.toJSON(), this.createRequestOptions({ state: clientState }));\n  }\n\n  private async requestRepeatedly<TResult, TOptions extends PresentationRpcRequestOptions>(func: (opts: TOptions) => PresentationRpcResponse<TResult>, options: TOptions, imodelToken: IModelToken, repeatCount: number = 1): Promise<TResult> {\n    const response = await func(options);\n\n    if (response.statusCode === PresentationStatus.Success)\n      return response.result!;\n\n    if (response.statusCode === PresentationStatus.BackendOutOfSync) {\n      options.clientStateId = this._clientStateId;\n      await this.sync(imodelToken);\n      return this.requestRepeatedly(func, options, imodelToken);\n    }\n    if (response.statusCode === PresentationStatus.BackendTimeout && repeatCount < this._maxRequestRepeatCount) {\n      repeatCount++;\n      return this.requestRepeatedly(func, options, imodelToken, repeatCount);\n    }\n\n    throw new PresentationError(response.statusCode, response.errorMessage);\n  }\n\n  /**\n   * Send request to current backend. If the backend is unknown to the requestor,\n   * the request is rejected with `PresentationStatus.UnknownBackend` status. In\n   * such case the client is synced with the backend using registered `syncHandlers`\n   * and the request is repeated.\n   *\n   * @internal\n   */\n  public async request<TResult, TOptions extends PresentationRpcRequestOptions & { imodel: IModelToken }, TArg = any>(\n    context: any,\n    func: (token: IModelToken, options: Omit<TOptions, \"imodel\">, ...args: TArg[]) => PresentationRpcResponse<TResult>,\n    options: TOptions,\n    ...args: TArg[]): Promise<TResult> {\n    type TFuncOptions = Omit<TOptions, \"imodel\">;\n    const { imodel, ...rpcOptions } = (options as (PresentationRpcRequestOptions & { imodel: IModelToken })); // TS2700: Rest types may only be created from object types...\n    const doRequest = async (funcOptions: TFuncOptions) => func.apply(context, [imodel, funcOptions, ...args]);\n    return this.requestRepeatedly(doRequest, rpcOptions as TFuncOptions, options.imodel);\n  }\n  public async getNodesAndCount(options: Paged<HierarchyRequestOptions<IModelToken>>, parentKey?: NodeKeyJSON) {\n    return this.request<{ nodes: NodeJSON[], count: number }, Paged<HierarchyRequestOptions<IModelToken>>, any>(\n      this.rpcClient, this.rpcClient.getNodesAndCount, this.createRequestOptions(options), parentKey);\n  }\n  public async getNodes(options: Paged<HierarchyRequestOptions<IModelToken>>, parentKey?: NodeKeyJSON): Promise<NodeJSON[]> {\n    return this.request<NodeJSON[], Paged<HierarchyRequestOptions<IModelToken>>>(\n      this.rpcClient, this.rpcClient.getNodes, this.createRequestOptions(options), parentKey);\n  }\n  public async getNodesCount(options: HierarchyRequestOptions<IModelToken>, parentKey?: NodeKeyJSON): Promise<number> {\n    return this.request<number, HierarchyRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getNodesCount, this.createRequestOptions(options), parentKey);\n  }\n  public async getNodePaths(options: HierarchyRequestOptions<IModelToken>, paths: InstanceKeyJSON[][], markedIndex: number): Promise<NodePathElementJSON[]> {\n    return this.request<NodePathElementJSON[], HierarchyRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getNodePaths, this.createRequestOptions(options), paths, markedIndex);\n  }\n  public async getFilteredNodePaths(options: HierarchyRequestOptions<IModelToken>, filterText: string): Promise<NodePathElementJSON[]> {\n    return this.request<NodePathElementJSON[], HierarchyRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getFilteredNodePaths, this.createRequestOptions(options), filterText);\n  }\n\n  public async getContentDescriptor(options: ContentRequestOptions<IModelToken>, displayType: string, keys: KeySetJSON, selection: SelectionInfo | undefined): Promise<DescriptorJSON | undefined> {\n    return this.request<DescriptorJSON | undefined, ContentRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getContentDescriptor, this.createRequestOptions(options), displayType, keys, selection);\n  }\n  public async getContentSetSize(options: ContentRequestOptions<IModelToken>, descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, keys: KeySetJSON): Promise<number> {\n    return this.request<number, ContentRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getContentSetSize, this.createRequestOptions(options), descriptorOrOverrides, keys);\n  }\n  public async getContent(options: ContentRequestOptions<IModelToken>, descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, keys: KeySetJSON): Promise<ContentJSON | undefined> {\n    return this.request<ContentJSON | undefined, ContentRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getContent, this.createRequestOptions(options), descriptorOrOverrides, keys);\n  }\n  public async getContentAndSize(options: ContentRequestOptions<IModelToken>, descriptorOrOverrides: DescriptorJSON | DescriptorOverrides, keys: KeySetJSON) {\n    return this.request<{ content?: ContentJSON, size: number }, ContentRequestOptions<IModelToken>, any>(\n      this.rpcClient, this.rpcClient.getContentAndSize, this.createRequestOptions(options), descriptorOrOverrides, keys);\n  }\n  public async getDistinctValues(options: ContentRequestOptions<IModelToken>, descriptor: DescriptorJSON, keys: KeySetJSON, fieldName: string, maximumValueCount: number): Promise<string[]> {\n    return this.request<string[], ContentRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getDistinctValues, this.createRequestOptions(options), descriptor, keys, fieldName, maximumValueCount);\n  }\n\n  public async getDisplayLabel(options: LabelRequestOptions<IModelToken>, key: InstanceKeyJSON): Promise<string> {\n    return this.request<string, LabelRequestOptions<IModelToken>, any>(\n      this.rpcClient, this.rpcClient.getDisplayLabel, this.createRequestOptions(options), key);\n  }\n  public async getDisplayLabels(options: LabelRequestOptions<IModelToken>, keys: InstanceKeyJSON[]): Promise<string[]> {\n    return this.request<string[], LabelRequestOptions<IModelToken>, any>(\n      this.rpcClient, this.rpcClient.getDisplayLabels, this.createRequestOptions(options), keys);\n  }\n\n  public async getSelectionScopes(options: SelectionScopeRequestOptions<IModelToken>): Promise<SelectionScope[]> {\n    return this.request<SelectionScope[], SelectionScopeRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.getSelectionScopes, this.createRequestOptions(options));\n  }\n  public async computeSelection(options: SelectionScopeRequestOptions<IModelToken>, ids: Id64String[], scopeId: string): Promise<KeySetJSON> {\n    return this.request<KeySetJSON, SelectionScopeRequestOptions<IModelToken>>(\n      this.rpcClient, this.rpcClient.computeSelection, this.createRequestOptions(options), ids, scopeId);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { Id64String } from \"@bentley/bentleyjs-core\";\n\n/**\n * Possible variable value types\n * @internal\n */\nexport enum VariableValueTypes {\n  /** Integer value */\n  Int = \"int\",\n\n  /** Array of integer values */\n  IntArray = \"int[]\",\n\n  /** Boolean value */\n  Bool = \"bool\",\n\n  /** String value */\n  String = \"string\",\n\n  /** Id64String value */\n  Id64 = \"id64\",\n\n  /** Array of Id64String values */\n  Id64Array = \"id64[]\",\n}\n\n/**\n * Union of all supported variable value types\n * @internal\n */\nexport type VariableValue = boolean | string | number | number[] | Id64String[];\n/** @internal */\nexport type VariableValueJSON = boolean | string | string[] | number | number[];\n\n/** @internal */\nexport interface RulesetVariablesState { [rulesetId: string]: Array<[string, VariableValueTypes, VariableValue]>; }\n\n/** @internal */\nexport namespace RulesetVariablesState {\n  export const STATE_ID = \"ruleset variables\";\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module Core */\r\n\r\nimport { Guid } from \"@bentley/bentleyjs-core\";\r\nimport { Ruleset } from \"./rules/Ruleset\";\r\nimport { Field, PropertiesField } from \"./content/Fields\";\r\nimport { Item } from \"./content/Item\";\r\nimport { RuleTypes } from \"./rules/Rule\";\r\nimport { ContentSpecificationTypes } from \"./rules/content/ContentSpecification\";\r\nimport { Value, DisplayValue } from \"./content/Value\";\r\nimport { MultiSchemaClassesSpecification, SingleSchemaClassSpecification } from \"./rules/ClassSpecifications\";\r\nimport { PropertyValueFormat } from \"./content/TypeDescription\";\r\nimport { ClassInfo, RelatedClassInfo } from \"./EC\";\r\nimport { RelatedInstanceSpecification } from \"./rules/RelatedInstanceSpecification\";\r\nimport { RelationshipDirection } from \"./rules/RelationshipDirection\";\r\n\r\n/**\r\n * A factory class that can be used to create presentation rulesets targeted towards\r\n * specific use cases.\r\n *\r\n * @public\r\n */\r\nexport class RulesetsFactory {\r\n  /**\r\n   * Create a ruleset with content rules for getting instances are of the\r\n   * same ECClass and have the same property value as the provided `record`.\r\n   * @param field A field identifying which property of the record we should use\r\n   * @param record A record whose similar instances should be found\r\n   */\r\n  public createSimilarInstancesRuleset(field: Field, record: Item): { ruleset: Ruleset, description: string } {\r\n    if (!field.isPropertiesField())\r\n      throw new Error(\"Can only create 'similar instances' ruleset for properties-based records\");\r\n    if (field.type.valueFormat !== PropertyValueFormat.Primitive)\r\n      throw new Error(\"Can only create 'similar instances' ruleset for primitive properties\");\r\n    if (field.properties.length === 0)\r\n      throw new Error(\"Invalid properties' field with no properties\");\r\n    if (record.isFieldMerged(field.name))\r\n      throw new Error(\"Can't create 'similar instances' ruleset for merged values\");\r\n    if (!record.classInfo)\r\n      throw new Error(\"Can't create 'similar instances' for records based on multiple different ECClass instances\");\r\n    const propertyName = getPropertyName(field);\r\n    const propertyValue = getPropertyValue(record, field);\r\n    const relatedInstances = createRelatedInstanceSpecs(field);\r\n    const relatedInstanceSpecs = relatedInstances.map((r) => r.spec);\r\n    const ruleset: Ruleset = {\r\n      id: `SimilarInstances/${propertyName}/${Guid.createValue()}`,\r\n      rules: [],\r\n    };\r\n    ruleset.rules.push({\r\n      ruleType: RuleTypes.Content,\r\n      specifications: [{\r\n        specType: ContentSpecificationTypes.ContentInstancesOfSpecificClasses,\r\n        classes: createMultiClassSpecification(record.classInfo),\r\n        arePolymorphic: true,\r\n        relatedInstances: relatedInstanceSpecs,\r\n        instanceFilter: createInstanceFilter(relatedInstanceSpecs, propertyName, propertyValue.v),\r\n      }],\r\n    });\r\n    const description = createDescription(record, relatedInstances.map((r) => r.class), field, propertyValue.d);\r\n    return { ruleset, description };\r\n  }\r\n}\r\n\r\nconst createDescription = (record: Item, relatedClasses: ClassInfo[], field: Field, value: string): string => {\r\n  const classes = (relatedClasses.length > 0) ? relatedClasses : [record.classInfo!];\r\n  return classes.reduce((descr, classInfo, index) => {\r\n    if (index !== 0)\r\n      descr += \" OR \";\r\n    descr += `[${classInfo.label}].[${field.label}] = ${value}`;\r\n    return descr;\r\n  }, \"\");\r\n};\r\n\r\nconst getPropertyName = (field: PropertiesField): string => {\r\n  let name = field.properties[0].property.name;\r\n  if (field.type.typeName === \"navigation\")\r\n    name += \".Id\";\r\n  return name;\r\n};\r\n\r\nconst toString = (displayValue: DisplayValue): string => {\r\n  if (!displayValue)\r\n    return \"NULL\";\r\n  return displayValue.toString();\r\n};\r\n\r\nconst getPropertyValue = (record: Item, field: Field): { v: Value, d: string } => {\r\n  const fieldNamesStack = [];\r\n  let currField: Field | undefined = field;\r\n  while (currField) {\r\n    fieldNamesStack.push(currField.name);\r\n    currField = currField.parent;\r\n  }\r\n  let currFieldName = fieldNamesStack.pop();\r\n  let displayValue: DisplayValue = record.displayValues[currFieldName!];\r\n  let value: Value = record.values[currFieldName!];\r\n  currFieldName = fieldNamesStack.pop();\r\n  while (currFieldName) {\r\n    if (!Value.isNestedContent(value) || value.length === 0)\r\n      throw new Error(\"Invalid record value\");\r\n    if (value.length > 1)\r\n      throw new Error(\"Can't create 'similar instances' for records related through many part of *-to-many relationship\");\r\n    if (value[0].mergedFieldNames.indexOf(currFieldName) !== -1)\r\n      throw new Error(\"Can't create 'similar instances' ruleset for merged values\");\r\n    displayValue = value[0].displayValues[currFieldName];\r\n    value = value[0].values[currFieldName];\r\n    currFieldName = fieldNamesStack.pop();\r\n  }\r\n  return { v: value, d: toString(displayValue) };\r\n};\r\n\r\nconst createInstanceFilter = (relatedInstances: Array<Readonly<RelatedInstanceSpecification>>, propertyName: string, propertyValue: Value): string => {\r\n  const aliases = relatedInstances.map((relatedInstanceSpec) => relatedInstanceSpec.alias);\r\n  if (aliases.length === 0)\r\n    aliases.push(\"this\");\r\n  return aliases.reduce((filter: string, alias: string, index: number): string => {\r\n    if (index !== 0)\r\n      filter += \" OR \";\r\n    filter += createComparison(`${alias}.${propertyName}`, \"=\", propertyValue);\r\n    return filter;\r\n  }, \"\");\r\n};\r\n\r\ntype Operator = \"=\" | \"!=\" | \">\" | \">=\" | \"<\" | \"<=\";\r\nconst createComparison = (name: string, operator: Operator, value: Value): string => {\r\n  let compareValue: string;\r\n  if (typeof value === \"undefined\")\r\n    compareValue = \"NULL\";\r\n  else if (typeof value === \"string\")\r\n    compareValue = `\"${value}\"`;\r\n  else if (typeof value === \"boolean\")\r\n    compareValue = value ? \"TRUE\" : \"FALSE\";\r\n  else if (typeof value === \"number\")\r\n    compareValue = value.toString();\r\n  else\r\n    throw new Error(\"Unsupported value format\");\r\n  return `${name} ${operator} ${compareValue}`;\r\n};\r\n\r\nconst createMultiClassSpecification = (classInfo: Readonly<ClassInfo>): MultiSchemaClassesSpecification => {\r\n  const [schemaName, className] = classInfo.name.split(\":\");\r\n  return { schemaName, classNames: [className] };\r\n};\r\n\r\nconst createSingleClassSpecification = (classInfo: Readonly<ClassInfo>): SingleSchemaClassSpecification => {\r\n  const [schemaName, className] = classInfo.name.split(\":\");\r\n  return { schemaName, className };\r\n};\r\n\r\nconst createRelatedInstanceSpec = (relatedClassInfo: RelatedClassInfo, index: number): { spec: RelatedInstanceSpecification, class: ClassInfo } => ({\r\n  spec: {\r\n    relationship: createSingleClassSpecification(relatedClassInfo.relationshipInfo),\r\n    class: createSingleClassSpecification(relatedClassInfo.isForwardRelationship ? relatedClassInfo.targetClassInfo : relatedClassInfo.sourceClassInfo),\r\n    requiredDirection: relatedClassInfo.isForwardRelationship ? RelationshipDirection.Backward : RelationshipDirection.Forward,\r\n    isRequired: true,\r\n    alias: `related_${index}`,\r\n  },\r\n  class: relatedClassInfo.isForwardRelationship ? relatedClassInfo.targetClassInfo : relatedClassInfo.sourceClassInfo,\r\n});\r\n\r\nconst createRelatedInstanceSpecs = (field: PropertiesField): Array<{ spec: RelatedInstanceSpecification, class: ClassInfo }> => {\r\n  const specs = new Array();\r\n  field.properties.forEach((property, index) => {\r\n    if (property.relatedClassPath.length === 0) {\r\n      // not related\r\n      return;\r\n    }\r\n    if (property.relatedClassPath.length > 1) {\r\n      // RelatedInstance presentation rule doesn't support multiple step relationships yet\r\n      throw new Error(\"Can't create related instance specification for property related through multiple relationships\");\r\n    }\r\n    specs.push(createRelatedInstanceSpec(property.relatedClassPath[0], index));\r\n  });\r\n  if (field.parent) {\r\n    if (specs.length > 0) {\r\n      // note: should prepend field.parent.pathToPrimaryClass to every spec, but\r\n      // RelatedInstance presentation rule doesn't support multiple step relationships yet\r\n      throw new Error(\"Can't create related instance specification for property related through multiple relationships\");\r\n    }\r\n    if (field.parent.pathToPrimaryClass.length === 0) {\r\n      throw new Error(\"Expecting nested fields to always have relationship path to primary class\");\r\n    }\r\n    if (field.parent.pathToPrimaryClass.length > 1) {\r\n      // RelatedInstance presentation rule doesn't support multiple step relationships yet\r\n      throw new Error(\"Can't create related instance specification for property related through multiple relationships\");\r\n    }\r\n    specs.push(createRelatedInstanceSpec(field.parent.pathToPrimaryClass[0], 0));\r\n  }\r\n  return specs;\r\n};\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nimport { KeySet } from \"./KeySet\";\nimport { NodeKey } from \"./hierarchy/Key\";\n\n/**\n * Create a type with `T` properties excluding properties listed in `K`.\n *\n * Usage example: `Omit<SomeType, \"exclude_prop1\" | \"exclude_prop2\">`\n *\n * @public\n */\nexport type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Create a type with `T` properties excluding all properties in type `K`.\n *\n * Usage example: `Subtract<SomeType, ExcludePropertiesInThisType>`\n *\n * @public\n */\nexport type Subtract<T, K> = Omit<T, keyof K>;\n\n/**\n * A dictionary data structure.\n * @public\n */\nexport interface ValuesDictionary<T> {\n  [key: string]: T;\n}\n\n/**\n * Get total number of instances included in the supplied key set. The\n * count is calculated by adding all of the following:\n * - `keys.instanceKeysCount`\n * - number of `keys.nodeKeys` which are *ECInstance* keys\n * - for every grouping node key in `keys.nodeKeys`, number of grouped instances\n *\n * E.g. if `keys` contains one instance key, one *ECInstance* node key\n * and one grouping node key which groups 3 instances, the result is 5.\n *\n * @public\n */\nexport const getInstancesCount = (keys: Readonly<KeySet>): number => {\n  let count = keys.instanceKeysCount;\n  keys.nodeKeys.forEach((key: NodeKey) => {\n    if (NodeKey.isInstanceNodeKey(key)) {\n      count++;\n    } else if (NodeKey.isGroupingNodeKey(key)) {\n      count += key.groupedInstancesCount;\n    }\n  });\n  return count;\n};\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport { Descriptor, DescriptorJSON } from \"./Descriptor\";\nimport { Item, ItemJSON } from \"./Item\";\n\n/**\n * Serialized [[Content]] JSON representation.\n * @internal\n */\nexport interface ContentJSON {\n  descriptor: DescriptorJSON;\n  contentSet: ItemJSON[];\n}\n\n/**\n * A data structure that contains the [[Descriptor]] and a list of [[Item]]\n * objects which are based on that descriptor.\n *\n * @public\n */\nexport class Content {\n  /** Descriptor used to create the content */\n  public readonly descriptor: Descriptor;\n  /** Content items */\n  public readonly contentSet: Item[];\n\n  /** Create a new [[Content]] instance */\n  public constructor(descriptor: Descriptor, items: Item[]) {\n    this.descriptor = descriptor;\n    this.contentSet = items;\n  }\n\n  /** @internal */\n  public toJSON(): ContentJSON {\n    return {\n      descriptor: this.descriptor.toJSON(),\n      contentSet: this.contentSet.map((item: Item) => item.toJSON()),\n    };\n  }\n\n  /**\n   * Deserialize Content from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized content or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: ContentJSON | string | undefined): Content | undefined {\n    if (!json)\n      return undefined;\n\n    if (typeof json === \"string\")\n      return JSON.parse(json, Content.reviver);\n\n    const descriptor = Descriptor.fromJSON(json.descriptor);\n    if (!descriptor)\n      return undefined;\n\n    const contentSet = json.contentSet\n      .map((itemJson: ItemJSON) => Item.fromJSON(itemJson))\n      .filter<Item>((item): item is Item => (item !== undefined));\n    return new Content(descriptor, contentSet);\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing Content objects.\n   *\n   * @internal\n   */\n  public static reviver(key: string, value: any): any {\n    return key === \"\" ? Content.fromJSON(value) : value;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport {\n  ClassInfo, ClassInfoJSON,\n  RelatedClassInfo, RelationshipPath, RelationshipPathJSON,\n} from \"../EC\";\nimport { Field, FieldJSON } from \"./Fields\";\n\n/**\n * Data structure that describes an ECClass in content [[Descriptor]].\n * @public\n */\nexport interface SelectClassInfo {\n  /** Information about the ECClass */\n  selectClassInfo: ClassInfo;\n  /** Is the class handled polymorphically */\n  isSelectPolymorphic: boolean;\n  /** Relationship path to the [Primary class]($docs/learning/content/Terminology#primary-class) */\n  pathToPrimaryClass: RelationshipPath;\n  /** Relationship paths to [Related property]($docs/learning/content/Terminology#related-properties) classes */\n  relatedPropertyPaths: RelationshipPath[];\n}\n\n/**\n * Serialized [[SelectClassInfo]]\n * @internal\n */\nexport interface SelectClassInfoJSON {\n  selectClassInfo: ClassInfoJSON;\n  isSelectPolymorphic: boolean;\n  pathToPrimaryClass: RelationshipPathJSON;\n  relatedPropertyPaths: RelationshipPathJSON[];\n}\n\nconst selectClassInfoFromJSON = (json: SelectClassInfoJSON): SelectClassInfo => {\n  return {\n    ...json,\n    selectClassInfo: ClassInfo.fromJSON(json.selectClassInfo),\n    pathToPrimaryClass: json.pathToPrimaryClass.map((p) => RelatedClassInfo.fromJSON(p)),\n    relatedPropertyPaths: json.relatedPropertyPaths.map((rp) => (rp.map((p) => RelatedClassInfo.fromJSON(p)))),\n  };\n};\n\n/**\n * Flags that control content format.\n * @public\n */\nexport enum ContentFlags {\n  /** Each content record only has [[InstanceKey]] and no data */\n  KeysOnly = 1 << 0,\n\n  /** Each content record additionally has an image id */\n  ShowImages = 1 << 1,\n\n  /** Each content record additionally has a display label */\n  ShowLabels = 1 << 2,\n\n  /** All content records are merged into a single record (see [Merging values]($docs/learning/content/Terminology#value-merging)) */\n  MergeResults = 1 << 3,\n\n  /** Content has only distinct values */\n  DistinctValues = 1 << 4,\n\n  /** Doesn't create property or calculated fields. Can be used in conjunction with [[ShowLabels]]. */\n  NoFields = 1 << 5,\n}\n\n/**\n * Data sorting direction\n * @public\n */\nexport enum SortDirection {\n  Ascending,\n  Descending,\n}\n\n/**\n * Data structure that contains selection information. Used\n * for cases when requesting content after a selection change.\n *\n * @public\n */\nexport interface SelectionInfo {\n  /** Name of selection provider which cause the selection change */\n  providerName: string;\n  /** Level of selection that changed */\n  level?: number;\n}\n\n/**\n * Serialized [[Descriptor]] JSON representation.\n * @internal\n */\nexport interface DescriptorJSON {\n  connectionId: string;\n  inputKeysHash: string;\n  contentOptions: any;\n  selectionInfo?: SelectionInfo;\n  displayType: string;\n  selectClasses: SelectClassInfoJSON[];\n  fields: FieldJSON[];\n  sortingFieldName?: string;\n  sortDirection?: SortDirection;\n  contentFlags: number;\n  filterExpression?: string;\n}\n\n/**\n * Descriptor overrides that can be used to customize\n * content.\n *\n * @public\n */\nexport interface DescriptorOverrides {\n  /** Content display type. Can be accessed in presentation rules and used to modify content in various ways */\n  displayType: string;\n  /** Names of fields which should be excluded from content */\n  hiddenFieldNames: string[];\n  /** Content flags used for content customization. See [[ContentFlags]] */\n  contentFlags: number;\n  /** Name of the sorting field */\n  sortingFieldName?: string;\n  /** Sort direction. Defaults to [[SortDirection.Ascending]] */\n  sortDirection?: SortDirection;\n  /** [ECExpression]($docs/learning/ECExpressions.md) for filtering content */\n  filterExpression?: string;\n}\n\n/**\n * Descriptor properties\n * @public\n */\nexport interface DescriptorSource {\n  /** Selection info used to create the descriptor */\n  selectionInfo?: SelectionInfo;\n  /** Display type used to create the descriptor */\n  displayType: string;\n  /** A list of classes that will be selected from when creating content with this descriptor */\n  selectClasses: SelectClassInfo[];\n  /** A list of fields contained in the descriptor */\n  fields: Field[];\n  /** [[ContentFlags]] used to create the descriptor */\n  contentFlags: number;\n  /** Field used to sort the content */\n  sortingField?: Field;\n  /** Sorting direction */\n  sortDirection?: SortDirection;\n  /** Content filtering [ECExpression]($docs/learning/ECExpressions) */\n  filterExpression?: string;\n}\n\n/**\n * Data structure that describes content: fields, sorting, filtering, format, etc.\n * Descriptor may be changed to control how content is created.\n *\n * @public\n */\nexport class Descriptor implements DescriptorSource {\n  /** Id of the connection used to create the descriptor */\n  public connectionId!: string;\n  /** Hash of the input keys used to create the descriptor */\n  public inputKeysHash!: string;\n  /** Extended options used to create the descriptor */\n  public contentOptions: any;\n  /** Selection info used to create the descriptor */\n  public selectionInfo?: SelectionInfo;\n  /** Display type used to create the descriptor */\n  public displayType!: string;\n  /** A list of classes that will be selected from when creating content with this descriptor */\n  public selectClasses!: SelectClassInfo[];\n  /** A list of fields contained in the descriptor */\n  public fields!: Field[];\n  /** [[ContentFlags]] used to create the descriptor */\n  public contentFlags!: number;\n  /** Field used to sort the content */\n  public sortingField?: Field;\n  /** Sorting direction */\n  public sortDirection?: SortDirection;\n  /** Content filtering [ECExpression]($docs/learning/ECExpressions) */\n  public filterExpression?: string;\n\n  /** Construct a new Descriptor using a `DescriptorSource` */\n  public constructor(source: DescriptorSource) {\n    Object.assign(this, source, {\n      selectClasses: [...source.selectClasses],\n      fields: [...source.fields],\n    });\n  }\n\n  /** @internal */\n  public toJSON(): DescriptorJSON {\n    return Object.assign({}, this, {\n      fields: this.fields.map((field: Field) => field.toJSON()),\n    });\n  }\n\n  /**\n   * Deserialize Descriptor from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized descriptor or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: DescriptorJSON | string | undefined): Descriptor | undefined {\n    if (!json)\n      return undefined;\n    if (typeof json === \"string\")\n      return JSON.parse(json, Descriptor.reviver);\n    const descriptor = Object.create(Descriptor.prototype);\n    return Object.assign(descriptor, json, {\n      fields: json.fields.map((fieldJson: FieldJSON) => {\n        const field = Field.fromJSON(fieldJson);\n        if (field)\n          field.rebuildParentship();\n        return field;\n      }).filter((field) => (undefined !== field)),\n      selectClasses: json.selectClasses.map((selectClass: SelectClassInfoJSON) => selectClassInfoFromJSON(selectClass)),\n    } as Partial<Descriptor>);\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing Content objects.\n   *\n   * @internal\n   */\n  public static reviver(key: string, value: any): any {\n    return key === \"\" ? Descriptor.fromJSON(value) : value;\n  }\n\n  /**\n   * Get field by its name\n   * @param name Name of the field to find\n   * @param recurse Recurse into nested fields\n   */\n  public getFieldByName(name: string, recurse?: boolean): Field | undefined {\n    return findField(this.fields, name, recurse);\n  }\n\n  /** @internal */\n  public createDescriptorOverrides(): DescriptorOverrides {\n    return {\n      displayType: this.displayType,\n      hiddenFieldNames: [],\n      sortingFieldName: this.sortingField ? this.sortingField.name : undefined,\n      sortDirection: this.sortDirection,\n      contentFlags: this.contentFlags,\n      filterExpression: this.filterExpression,\n    };\n  }\n\n  /** @internal */\n  public createStrippedDescriptor(): Descriptor {\n    const stripped = Object.create(Descriptor.prototype);\n    return Object.assign(stripped, this, {\n      fields: [],\n      selectClasses: [],\n    });\n  }\n}\n\nconst findField = (fields: Field[], name: string, recurse?: boolean): Field | undefined => {\n  for (const field of fields) {\n    if (field.name === name)\n      return field;\n\n    if (recurse && field.isNestedContentField()) {\n      const nested = findField(field.nestedFields, name, recurse);\n      if (nested)\n        return nested;\n    }\n  }\n  return undefined;\n};\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\n/**\n * Displayed content types. Affects how the content is formatted, e.g.\n * the [[ContentFlags]].\n *\n * @public\n */\nexport enum DefaultContentDisplayTypes {\n  /** Unknown content type. */\n  Undefined = \"Undefined\",\n\n  /** Grid or table view content type. By default adds [[ContentFlags.ShowLabels]] flag. */\n  Grid = \"Grid\",\n\n  /** Property pane content type. By default adds [[ContentFlags.MergeResults]] flag. */\n  PropertyPane = \"PropertyPane\",\n\n  /** List content type. By default adds [[ContentFlags.NoFields]] and [[ContentFlags.ShowLabels]] flags */\n  List = \"List\",\n\n  /** Viewport content type. By default adds [[ContentFlags.KeysOnly]] flag. */\n  Viewport = \"Graphics\",\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport { ClassInfo, ClassInfoJSON, RelatedClassInfo, RelationshipPath, RelationshipPathJSON } from \"../EC\";\nimport { CategoryDescription } from \"./Category\";\nimport { EditorDescription } from \"./Editor\";\nimport { Property, PropertyJSON } from \"./Property\";\nimport { TypeDescription } from \"./TypeDescription\";\n\n/**\n * Data structure for a [[Field]] serialized to JSON.\n * @internal\n */\nexport interface BaseFieldJSON {\n  category: CategoryDescription;\n  name: string;\n  label: string;\n  type: TypeDescription;\n  isReadonly: boolean;\n  priority: number;\n  editor?: EditorDescription;\n}\n\n/**\n * Data structure for a [[PropertiesField]] serialized to JSON.\n * @internal\n */\nexport interface PropertiesFieldJSON extends BaseFieldJSON {\n  properties: PropertyJSON[];\n}\n\n/**\n * Data structure for a [[NestedContentField]] serialized to JSON.\n * @internal\n */\nexport interface NestedContentFieldJSON extends BaseFieldJSON {\n  contentClassInfo: ClassInfoJSON;\n  pathToPrimaryClass: RelationshipPathJSON;\n  nestedFields: FieldJSON[];\n}\n\n/** @internal */\nexport type FieldJSON = BaseFieldJSON | PropertiesFieldJSON | NestedContentFieldJSON;\n\n/**\n * Is supplied field a properties field.\n * @internal\n */\nconst isPropertiesField = (field: FieldJSON | Field): field is PropertiesFieldJSON | PropertiesField => {\n  return (field as any).properties;\n};\n\n/**\n * Is supplied field a nested content field.\n * @internal\n */\nconst isNestedContentField = (field: FieldJSON | Field): field is NestedContentFieldJSON | NestedContentField => {\n  return (field as any).nestedFields;\n};\n\n/**\n * Describes a single content field. A field is usually represented as a grid column\n * or a property pane row.\n *\n * @public\n */\nexport class Field {\n  /** Category information */\n  public category: CategoryDescription;\n  /** Unique name */\n  public name: string;\n  /** Display label */\n  public label: string;\n  /** Description of this field's values data type */\n  public type: TypeDescription;\n  /** Are values in this field read-only */\n  public isReadonly: boolean;\n  /** Priority of the field. Higher priority fields should appear first in the UI */\n  public priority: number;\n  /** Property editor used to edit values of this field */\n  public editor?: EditorDescription;\n  /** Parent field */\n  private _parent?: NestedContentField;\n\n  /**\n   * Creates an instance of Field.\n   * @param category Category information\n   * @param name Unique name\n   * @param label Display label\n   * @param type Description of this field's values data type\n   * @param isReadonly Are values in this field read-only\n   * @param priority Priority of the field\n   * @param editor Property editor used to edit values of this field\n   */\n  public constructor(category: CategoryDescription, name: string, label: string, type: TypeDescription,\n    isReadonly: boolean, priority: number, editor?: EditorDescription) {\n    this.category = category;\n    this.name = name;\n    this.label = label;\n    this.type = type;\n    this.isReadonly = isReadonly;\n    this.priority = priority;\n    this.editor = editor;\n  }\n\n  /**\n   * Is this a [[PropertiesField]]\n   */\n  public isPropertiesField(): this is PropertiesField { return isPropertiesField(this); }\n\n  /**\n   * Is this a [[NestedContentField]]\n   */\n  public isNestedContentField(): this is NestedContentField { return isNestedContentField(this); }\n\n  /**\n   * Get parent\n   */\n  public get parent(): NestedContentField | undefined { return this._parent; }\n\n  /** @internal */\n  public toJSON(): FieldJSON {\n    return {\n      category: this.category,\n      name: this.name,\n      label: this.label,\n      type: this.type,\n      isReadonly: this.isReadonly,\n      priority: this.priority,\n      editor: this.editor,\n    };\n  }\n\n  /**\n   * Deserialize Field from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized field or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: FieldJSON | string | undefined): Field | undefined {\n    if (!json)\n      return undefined;\n    if (typeof json === \"string\")\n      return JSON.parse(json, Field.reviver);\n    if (isPropertiesField(json))\n      return PropertiesField.fromJSON(json);\n    if (isNestedContentField(json))\n      return NestedContentField.fromJSON(json);\n    const field = Object.create(Field.prototype);\n    return Object.assign(field, json);\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing Field objects.\n   *\n   * @internal\n   */\n  public static reviver(key: string, value: any): any {\n    return key === \"\" ? Field.fromJSON(value) : value;\n  }\n\n  /** @internal */\n  public resetParentship(): void {\n    this._parent = undefined;\n  }\n\n  /** @internal */\n  public rebuildParentship(parentField?: NestedContentField): void {\n    this._parent = parentField;\n  }\n}\n\n/**\n * Describes a content field that's based on one or more similar\n * EC properties.\n *\n * @public\n */\nexport class PropertiesField extends Field {\n  /** A list of properties this field is created from */\n  public properties: Property[];\n\n  /**\n   * Creates an instance of PropertiesField.\n   * @param category Category information\n   * @param name Unique name\n   * @param label Display label\n   * @param type Description of this field's values data type\n   * @param isReadonly Are values in this field read-only\n   * @param priority Priority of the field\n   * @param properties A list of properties this field is created from\n   * @param editor Property editor used to edit values of this field\n   */\n  public constructor(category: CategoryDescription, name: string, label: string, description: TypeDescription,\n    isReadonly: boolean, priority: number, properties: Property[], editor?: EditorDescription) {\n    super(category, name, label, description, isReadonly, priority, editor);\n    this.properties = properties;\n  }\n\n  /** @internal */\n  public toJSON(): PropertiesFieldJSON {\n    return {\n      ...super.toJSON(),\n      properties: this.properties.map((p) => Property.toJSON(p)),\n    };\n  }\n\n  /**\n   * Deserialize PropertiesField from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized properties field or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: PropertiesFieldJSON | string | undefined): PropertiesField | undefined {\n    if (!json)\n      return undefined;\n    if (typeof json === \"string\")\n      return JSON.parse(json, Field.reviver);\n    const field = Object.create(PropertiesField.prototype);\n    return Object.assign(field, json, {\n      properties: json.properties.map((p) => Property.fromJSON(p)),\n    } as Partial<PropertiesField>);\n  }\n}\n\n/**\n * Describes a content field that contains [Nested content]($docs/learning/content/Terminology#nested-content).\n *\n * @public\n */\nexport class NestedContentField extends Field {\n  /** Information about an ECClass whose properties are nested inside this field */\n  public contentClassInfo: ClassInfo;\n  /** Relationship path to [Primary class]($docs/learning/content/Terminology#primary-class) */\n  public pathToPrimaryClass: RelationshipPath;\n  /** Contained nested fields */\n  public nestedFields: Field[];\n\n  /**\n   * Creates an instance of NestedContentField.\n   * @param category Category information\n   * @param name Unique name\n   * @param label Display label\n   * @param type Description of this field's values data type\n   * @param isReadonly Are values in this field read-only\n   * @param priority Priority of the field\n   * @param contentClassInfo Information about an ECClass whose properties are nested inside this field\n   * @param pathToPrimaryClass Relationship path to [Primary class]($docs/learning/content/Terminology#primary-class)\n   * @param nestedFields Contained nested fields\n   * @param editor Property editor used to edit values of this field\n   */\n  public constructor(category: CategoryDescription, name: string, label: string, description: TypeDescription,\n    isReadonly: boolean, priority: number, contentClassInfo: ClassInfo, pathToPrimaryClass: RelationshipPath,\n    nestedFields: Field[], editor?: EditorDescription) {\n    super(category, name, label, description, isReadonly, priority, editor);\n    this.contentClassInfo = contentClassInfo;\n    this.pathToPrimaryClass = pathToPrimaryClass;\n    this.nestedFields = nestedFields;\n  }\n\n  /** @internal */\n  public toJSON(): NestedContentFieldJSON {\n    return {\n      ...super.toJSON(),\n      contentClassInfo: this.contentClassInfo,\n      pathToPrimaryClass: this.pathToPrimaryClass,\n      nestedFields: this.nestedFields.map((field: Field) => field.toJSON()),\n    };\n  }\n\n  /**\n   * Deserialize NestedContentField from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized nested content field or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: NestedContentFieldJSON | string | undefined): NestedContentField | undefined {\n    if (!json)\n      return undefined;\n    if (typeof json === \"string\")\n      return JSON.parse(json, Field.reviver);\n    const field = Object.create(NestedContentField.prototype);\n    return Object.assign(field, json, {\n      nestedFields: json.nestedFields.map((nestedFieldJson: FieldJSON) => Field.fromJSON(nestedFieldJson)).filter((nestedField) => (undefined !== nestedField)),\n      contentClassInfo: ClassInfo.fromJSON(json.contentClassInfo),\n      pathToPrimaryClass: json.pathToPrimaryClass.map((p) => RelatedClassInfo.fromJSON(p)),\n    } as Partial<NestedContentField>);\n  }\n\n  /** @internal */\n  public resetParentship(): void {\n    super.resetParentship();\n    for (const nestedField of this.nestedFields)\n      nestedField.resetParentship();\n  }\n\n  /** @internal */\n  public rebuildParentship(parentField?: NestedContentField): void {\n    super.rebuildParentship(parentField);\n    for (const nestedField of this.nestedFields)\n      nestedField.rebuildParentship(this);\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport {\n  ClassInfo, ClassInfoJSON,\n  InstanceKey, InstanceKeyJSON,\n} from \"../EC\";\nimport { ValuesDictionary } from \"../Utils\";\nimport {\n  Value, DisplayValue,\n  DisplayValueJSON, ValueJSON,\n  ValuesMapJSON, DisplayValuesMapJSON,\n} from \"./Value\";\n\n/**\n * Serialized [[Item]] JSON representation.\n * @internal\n */\nexport interface ItemJSON {\n  primaryKeys: InstanceKeyJSON[];\n  label: string;\n  imageId: string;\n  classInfo?: ClassInfoJSON;\n  values: ValuesDictionary<ValueJSON>;\n  displayValues: ValuesDictionary<DisplayValueJSON>;\n  mergedFieldNames: string[];\n  extendedData?: { [key: string]: any };\n}\n\n/**\n * A data structure that represents a single content record.\n * @public\n */\nexport class Item {\n  /** Keys of instances whose data is contained in this item */\n  public primaryKeys: InstanceKey[];\n  /** Display label of the item */\n  public label: string;\n  /** ID of the image associated with this item */\n  public imageId: string;\n  /** For cases when item consists only of same class instances, information about the ECClass */\n  public classInfo?: ClassInfo;\n  /** Raw values dictionary */\n  public values: ValuesDictionary<Value>;\n  /** Display values dictionary */\n  public displayValues: ValuesDictionary<DisplayValue>;\n  /** List of field names whose values are merged (see [Merging values]($docs/learning/content/Terminology#value-merging)) */\n  public mergedFieldNames: string[];\n  /** Extended data injected into this content item */\n  public extendedData?: { [key: string]: any };\n\n  /**\n   * Creates an instance of Item.\n   * @param primaryKeys Keys of instances whose data is contained in this item\n   * @param label Display label of the item\n   * @param imageId ID of the image associated with this item\n   * @param classInfo For cases when item consists only of same class instances, information about the ECClass\n   * @param values Raw values dictionary\n   * @param displayValues Display values dictionary\n   * @param mergedFieldNames List of field names whose values are merged (see [Merging values]($docs/learning/content/Terminology#value-merging))\n   * @param extendedData Extended data injected into this content item\n   */\n  public constructor(primaryKeys: InstanceKey[], label: string, imageId: string, classInfo: ClassInfo | undefined,\n    values: ValuesDictionary<Value>, displayValues: ValuesDictionary<DisplayValue>, mergedFieldNames: string[], extendedData?: { [key: string]: any }) {\n    this.primaryKeys = primaryKeys;\n    this.label = label;\n    this.imageId = imageId;\n    this.classInfo = classInfo;\n    this.values = values;\n    this.displayValues = displayValues;\n    this.mergedFieldNames = mergedFieldNames;\n    this.extendedData = extendedData;\n  }\n\n  /**\n   * Is value of field with the specified name merged in this record.\n   */\n  public isFieldMerged(fieldName: string): boolean {\n    return -1 !== this.mergedFieldNames.indexOf(fieldName);\n  }\n\n  /** @internal */\n  public toJSON(): ItemJSON {\n    return Object.assign({}, this, {\n      classInfo: this.classInfo ? ClassInfo.toJSON(this.classInfo) : undefined,\n      values: Value.toJSON(this.values) as ValuesMapJSON,\n      displayValues: DisplayValue.toJSON(this.displayValues) as DisplayValuesMapJSON,\n    });\n  }\n\n  /**\n   * Deserialize Item from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized item or undefined if deserialization failed\n   *\n   * @internal\n   */\n  public static fromJSON(json: ItemJSON | string | undefined): Item | undefined {\n    if (!json)\n      return undefined;\n    if (typeof json === \"string\")\n      return JSON.parse(json, Item.reviver);\n    const item = Object.create(Item.prototype);\n    return Object.assign(item, json, {\n      primaryKeys: json.primaryKeys.map((pk) => InstanceKey.fromJSON(pk)),\n      classInfo: json.classInfo ? ClassInfo.fromJSON(json.classInfo) : undefined,\n      values: Value.fromJSON(json.values),\n      displayValues: DisplayValue.fromJSON(json.displayValues),\n    } as Partial<Item>);\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing Item objects.\n   *\n   * @internal\n   */\n  public static reviver(key: string, value: any): any {\n    return key === \"\" ? Item.fromJSON(value) : value;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport {\n  PropertyInfo, PropertyInfoJSON,\n  RelatedClassInfo, RelationshipPath, RelationshipPathJSON,\n} from \"../EC\";\n\n/**\n * Data structure that describes one step of property\n * accessor path.\n *\n * @public\n */\nexport interface PropertyAccessor {\n  /** Name of ECProperty */\n  propertyName: string;\n  /** If the property is an array, array index. Otherwise undefined. */\n  arrayIndex?: number;\n}\n\n/**\n * Describes path to a property.\n * @public\n */\nexport type PropertyAccessorPath = PropertyAccessor[];\n\n/**\n * Data structure that describes a single ECProperty that's\n * included in a [[PropertiesField]].\n *\n * @public\n */\nexport interface Property {\n  /** ECProperty information */\n  property: PropertyInfo;\n  /**\n   * Relationship path from [Primary instance]($docs/learning/content/Terminology#primary-instance) to\n   * this property. This array is not empty only for [Related properties]($docs/learning/content/Terminology#related-properties).\n   */\n  relatedClassPath: RelationshipPath;\n}\n/** @public */\nexport namespace Property {\n  /** @internal */\n  export function toJSON(prop: Property): PropertyJSON {\n    return {\n      property: PropertyInfo.toJSON(prop.property),\n      relatedClassPath: prop.relatedClassPath.map((rci) => RelatedClassInfo.toJSON(rci)),\n    };\n  }\n  /**\n   * Deserializes [[Property]] from [[PropertyJSON]]\n   * @internal\n   */\n  export function fromJSON(json: PropertyJSON): Property {\n    return {\n      property: PropertyInfo.fromJSON(json.property),\n      relatedClassPath: json.relatedClassPath.map((p) => RelatedClassInfo.fromJSON(p)),\n    };\n  }\n}\n\n/**\n * Serialized [[Property]]\n * @internal\n */\nexport interface PropertyJSON {\n  property: PropertyInfoJSON;\n  relatedClassPath: RelationshipPathJSON;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\n/**\n * Format of the property value.\n * @public\n */\nexport enum PropertyValueFormat {\n  /** Primitive value */\n  Primitive = \"Primitive\",\n  /** Array value */\n  Array = \"Array\",\n  /** Struct value */\n  Struct = \"Struct\",\n}\n\n/**\n * Data structure for base content field type description. Not\n * meant to be used directly, see `TypeDescription`.\n *\n * @public\n */\nexport interface BaseTypeDescription {\n  /** Value format */\n  valueFormat: PropertyValueFormat;\n  /** Type name */\n  typeName: string;\n}\n\n/**\n * Type description for primitive properties.\n * @public\n */\nexport interface PrimitiveTypeDescription extends BaseTypeDescription {\n  /** Primitive format */\n  valueFormat: PropertyValueFormat.Primitive;\n}\n\n/**\n * Type description for array properties.\n * @public\n */\nexport interface ArrayTypeDescription extends BaseTypeDescription {\n  /** Array format */\n  valueFormat: PropertyValueFormat.Array;\n  /** Type of array items */\n  memberType: TypeDescription;\n}\n\n/**\n * A data structure that describes a struct member.\n * @public\n */\nexport interface StructFieldMemberDescription {\n  /** Unique name of a struct member */\n  name: string;\n  /** Label of the struct member */\n  label: string;\n  /** Type of the struct member */\n  type: TypeDescription;\n}\n\n/**\n * Type description for struct properties.\n * @public\n */\nexport interface StructTypeDescription extends BaseTypeDescription {\n  /** Struct format */\n  valueFormat: PropertyValueFormat.Struct;\n  /** Type descriptions of struct members */\n  members: StructFieldMemberDescription[];\n}\n\n/**\n * One of content field type descriptions.\n * @public\n */\nexport type TypeDescription = PrimitiveTypeDescription | ArrayTypeDescription | StructTypeDescription;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Content */\n\nimport { InstanceKey, InstanceKeyJSON } from \"../EC\";\nimport { ValuesDictionary } from \"../Utils\";\n\n/**\n * Raw value type\n * @public\n */\nexport type Value = string | number | boolean | undefined | ValuesMap | ValuesArray | NestedContentValue[];\n/** @public */\nexport namespace Value {\n  /** Is the value a primitive */\n  export function isPrimitive(value: Value): value is string | number | boolean | undefined { return isPrimitiveValue(value); }\n  /** Is the value an array */\n  export function isArray(value: Value): value is ValuesArray { return isArrayValue(value); }\n  /** Is the value a map / struct */\n  export function isMap(value: Value): value is ValuesMap { return isMapValue(value); }\n  /** Is the value a nested content value */\n  export function isNestedContent(value: Value): value is NestedContentValue[] { return isNestedContentValue(value); }\n  /** @internal */\n  export function fromJSON(json: ValueJSON): Value {\n    if (json === null)\n      return undefined;\n    if (isNestedContentValue(json))\n      return json.map(NestedContentValue.fromJSON);\n    if (isArrayValue(json))\n      return valuesArrayFromJSON(json);\n    if (isMapValue(json))\n      return valuesMapFromJSON(json);\n    return json;\n  }\n  /** @internal */\n  export function toJSON(value: Value): ValueJSON {\n    if (undefined === value)\n      return null;\n    if (isNestedContentValue(value))\n      return value.map(NestedContentValue.toJSON);\n    if (isArrayValue(value))\n      return valuesArrayToJSON(value);\n    if (isMapValue(value))\n      return valuesMapToJSON(value);\n    return value;\n  }\n}\n/**\n * A map of raw values\n * @public\n */\nexport interface ValuesMap extends ValuesDictionary<Value> { }\n/**\n * An array of raw values\n * @public\n */\nexport interface ValuesArray extends Array<Value> { }\n\n/**\n * Display value type.\n * @public\n */\nexport type DisplayValue = string | undefined | DisplayValuesMap | DisplayValuesArray;\nexport namespace DisplayValue {\n  /** Is the value a primitive */\n  export function isPrimitive(value: DisplayValue): value is string | undefined { return isPrimitiveValue(value); }\n  /** Is the value an array */\n  export function isArray(value: DisplayValue): value is DisplayValuesArray { return isArrayValue(value); }\n  /** Is the value a map / struct */\n  export function isMap(value: DisplayValue): value is DisplayValuesMap { return isMapValue(value); }\n  /** @internal */\n  export function fromJSON(json: DisplayValueJSON): DisplayValue {\n    if (json === null)\n      return undefined;\n    if (isArrayValue(json))\n      return displayValuesArrayFromJSON(json);\n    if (isMapValue(json))\n      return displayValuesMapFromJSON(json);\n    return json;\n  }\n  /** @internal */\n  export function toJSON(value: DisplayValue): DisplayValueJSON {\n    if (undefined === value)\n      return null;\n    if (isArrayValue(value))\n      return displayValuesArrayToJSON(value);\n    if (isMapValue(value))\n      return displayValuesMapToJSON(value);\n    return value;\n  }\n}\n/**\n * A map of display values\n * @public\n */\nexport interface DisplayValuesMap extends ValuesDictionary<DisplayValue> { }\n/**\n * An array of display values\n * @public\n */\nexport interface DisplayValuesArray extends Array<DisplayValue> { }\n\n/**\n * Data structure that describes nested content value.\n * @public\n */\nexport interface NestedContentValue {\n  /** Keys of instances whose content is contained in this value */\n  primaryKeys: InstanceKey[];\n  /** Content values map */\n  values: ValuesDictionary<Value>;\n  /** Content display values map */\n  displayValues: ValuesDictionary<DisplayValue>;\n  /** Names of fields whose values are merged */\n  mergedFieldNames: string[];\n}\n/** @public */\nexport namespace NestedContentValue {\n  /** @internal */\n  export function toJSON(json: NestedContentValue): NestedContentValueJSON {\n    return {\n      primaryKeys: json.primaryKeys.map(InstanceKey.toJSON),\n      values: valuesMapToJSON(json.values),\n      displayValues: displayValuesMapToJSON(json.displayValues),\n      mergedFieldNames: json.mergedFieldNames,\n    };\n  }\n  /** @internal */\n  export function fromJSON(json: NestedContentValueJSON): NestedContentValue {\n    return {\n      primaryKeys: json.primaryKeys.map(InstanceKey.fromJSON),\n      values: valuesMapFromJSON(json.values),\n      displayValues: displayValuesMapFromJSON(json.displayValues),\n      mergedFieldNames: json.mergedFieldNames,\n    };\n  }\n}\n\n/** @internal */\nexport type ValueJSON = string | number | boolean | null | ValuesMapJSON | ValuesArrayJSON | NestedContentValueJSON[];\n/** @internal */\nexport interface ValuesMapJSON extends ValuesDictionary<ValueJSON> { }\n/** @internal */\nexport interface ValuesArrayJSON extends Array<ValueJSON> { }\n\n/** @internal */\nexport type DisplayValueJSON = string | null | DisplayValuesMapJSON | DisplayValuesArrayJSON;\n/** @internal */\nexport interface DisplayValuesMapJSON extends ValuesDictionary<DisplayValueJSON> { }\n/** @internal */\nexport interface DisplayValuesArrayJSON extends Array<DisplayValueJSON> { }\n\n/**\n * Serialized [[NestedContentValue]] JSON representation.\n * @internal\n */\nexport interface NestedContentValueJSON {\n  primaryKeys: InstanceKeyJSON[];\n  values: ValuesDictionary<ValueJSON>;\n  displayValues: ValuesDictionary<DisplayValueJSON>;\n  mergedFieldNames: string[];\n}\n\nfunction isNestedContentValue(v: Value | ValueJSON): v is NestedContentValue[] | NestedContentValueJSON[] {\n  return (v !== undefined) && Array.isArray(v)\n    && ((v.length === 0)\n      || (v[0] as NestedContentValue).primaryKeys !== undefined\n      && (v[0] as NestedContentValue).values !== undefined\n      && (v[0] as NestedContentValue).displayValues !== undefined\n      && (v[0] as NestedContentValue).mergedFieldNames !== undefined);\n}\nfunction isArrayValue(v: Value | ValueJSON | DisplayValue | DisplayValueJSON): v is ValuesArray | ValuesArrayJSON | DisplayValuesArray | DisplayValuesArrayJSON {\n  // note: we don't guarantee by 100% that v is ValuesArray | DisplayValuesArray, but merely make compiler happy.\n  // we have other means to determine the type of value.\n  return (v !== undefined) && Array.isArray(v);\n}\nfunction isMapValue(v: Value | ValueJSON | DisplayValue | DisplayValueJSON): v is ValuesMap | ValuesMapJSON | DisplayValuesMap | DisplayValuesMapJSON {\n  return (v !== undefined) && (typeof v === \"object\") && !Array.isArray(v);\n}\nfunction isPrimitiveValue(v: Value | DisplayValue): v is string | number | boolean | undefined {\n  return !isArrayValue(v) && !isMapValue(v);\n}\n\nfunction valuesArrayFromJSON(json: ValuesArrayJSON): ValuesArray {\n  return json.map(Value.fromJSON);\n}\nfunction valuesArrayToJSON(values: ValuesArray): ValuesArrayJSON {\n  return values.map(Value.toJSON);\n}\nfunction valuesMapFromJSON(json: ValuesMapJSON): ValuesMap {\n  const map: ValuesMap = {};\n  for (const key in json) {\n    /* istanbul ignore else */\n    if (json.hasOwnProperty(key)) {\n      map[key] = Value.fromJSON(json[key]);\n    }\n  }\n  return map;\n}\nfunction valuesMapToJSON(values: ValuesMap): ValuesMapJSON {\n  const map: ValuesMapJSON = {};\n  for (const key in values) {\n    /* istanbul ignore else */\n    if (values.hasOwnProperty(key)) {\n      map[key] = Value.toJSON(values[key]);\n    }\n  }\n  return map;\n}\n\nfunction displayValuesArrayFromJSON(json: DisplayValuesArrayJSON): DisplayValuesArray {\n  return json.map(DisplayValue.fromJSON);\n}\nfunction displayValuesArrayToJSON(values: DisplayValuesArray): DisplayValuesArrayJSON {\n  return values.map(DisplayValue.toJSON);\n}\nfunction displayValuesMapFromJSON(json: DisplayValuesMapJSON): DisplayValuesMap {\n  const map: DisplayValuesMap = {};\n  for (const key in json) {\n    /* istanbul ignore else */\n    if (json.hasOwnProperty(key)) {\n      map[key] = DisplayValue.fromJSON(json[key]);\n    }\n  }\n  return map;\n}\nfunction displayValuesMapToJSON(values: DisplayValuesMap): DisplayValuesMapJSON {\n  const map: DisplayValuesMapJSON = {};\n  for (const key in values) {\n    /* istanbul ignore else */\n    if (values.hasOwnProperty(key)) {\n      map[key] = DisplayValue.toJSON(values[key]);\n    }\n  }\n  return map;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Hierarchies */\n\nimport { InstanceKey, InstanceKeyJSON } from \"../EC\";\n\n/**\n * Standard node types\n * @public\n */\nexport enum StandardNodeTypes {\n  ECInstanceNode = \"ECInstanceNode\",\n  ECClassGroupingNode = \"ECClassGroupingNode\",\n  ECPropertyGroupingNode = \"ECPropertyGroupingNode\",\n  DisplayLabelGroupingNode = \"DisplayLabelGroupingNode\",\n}\n\n/**\n * One of the node key types\n * @public\n */\nexport type NodeKey = BaseNodeKey | ECInstanceNodeKey | ECClassGroupingNodeKey | ECPropertyGroupingNodeKey | LabelGroupingNodeKey;\n/** @public */\nexport namespace NodeKey {\n  /**\n   * Serialize given [[NodeKey]] to JSON\n   * @internal\n   */\n  export function toJSON(key: NodeKey): NodeKeyJSON {\n    if (isInstanceNodeKey(key))\n      return { ...key, instanceKey: InstanceKey.toJSON(key.instanceKey) };\n    return { ...key };\n  }\n\n  /**\n   * Deserialize node key from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized node key\n   *\n   * @internal\n   */\n  export function fromJSON(json: NodeKeyJSON): NodeKey {\n    if (isInstanceNodeKey(json))\n      return { ...json, instanceKey: InstanceKey.fromJSON(json.instanceKey) };\n    return { ...json };\n  }\n\n  /**\n   * Checks if the supplied key is an [[ECInstanceNodeKey]]\n   * @public\n   */\n  export function isInstanceNodeKey(key: NodeKey): key is ECInstanceNodeKey {\n    return key.type === StandardNodeTypes.ECInstanceNode;\n  }\n\n  /**\n   * Checks if the supplied key is an [[ECClassGroupingNodeKey]]\n   * @public\n   */\n  export function isClassGroupingNodeKey(key: NodeKey): key is ECClassGroupingNodeKey {\n    return key.type === StandardNodeTypes.ECClassGroupingNode;\n  }\n\n  /**\n   * Checks if the supplied key is an [[ECPropertyGroupingNodeKey]]\n   * @public\n   */\n  export function isPropertyGroupingNodeKey(key: NodeKey): key is ECPropertyGroupingNodeKey {\n    return key.type === StandardNodeTypes.ECPropertyGroupingNode;\n  }\n\n  /**\n   * Checks if the supplied key is a [[LabelGroupingNodeKey]]\n   * @public\n   */\n  export function isLabelGroupingNodeKey(key: NodeKey): key is LabelGroupingNodeKey {\n    return key.type === StandardNodeTypes.DisplayLabelGroupingNode;\n  }\n\n  /**\n   * Checks if the supplied key is a grouping node key\n   * @public\n   */\n  export function isGroupingNodeKey(key: NodeKey): key is GroupingNodeKey {\n    return isClassGroupingNodeKey(key) || isPropertyGroupingNodeKey(key) || isLabelGroupingNodeKey(key);\n  }\n}\n\n/**\n * Node key path. Can be used to define path from one node to another.\n * @public\n */\nexport type NodeKeyPath = NodeKey[];\n\n/**\n * Data structure that describes a basic node key\n * @public\n */\nexport interface BaseNodeKey {\n  /** Node type */\n  type: string;\n  /** Node hash path from root to the node whose key this is */\n  pathFromRoot: string[];\n}\n\n/**\n * Data structure that describes an ECInstance node key\n * @public\n */\nexport interface ECInstanceNodeKey extends BaseNodeKey {\n  type: StandardNodeTypes.ECInstanceNode;\n  /** [[InstanceKey]] of the ECInstance represented by the node */\n  instanceKey: InstanceKey;\n}\n\n/**\n * Serialized [[ECInstanceNodeKey]] JSON representation.\n * @internal\n */\nexport interface ECInstanceNodeKeyJSON extends BaseNodeKey {\n  type: StandardNodeTypes.ECInstanceNode;\n  instanceKey: InstanceKeyJSON;\n}\n\n/**\n * Data structure that describes a grouping node key\n * @public\n */\nexport interface GroupingNodeKey extends BaseNodeKey {\n  /**\n   * Get the number of instances grouped by the node represented\n   * by this key.\n   *\n   * **Note:** this property is just a helper and is not involved\n   * in identifying a node.\n   */\n  groupedInstancesCount: number;\n}\n\n/**\n * Data structure that describes an ECClass grouping node key\n * @public\n */\nexport interface ECClassGroupingNodeKey extends GroupingNodeKey {\n  type: StandardNodeTypes.ECClassGroupingNode;\n  /** Full name of the grouping ECClass */\n  className: string;\n}\n\n/**\n * Data structure that describes an ECProperty grouping node key\n * @public\n */\nexport interface ECPropertyGroupingNodeKey extends GroupingNodeKey {\n  type: StandardNodeTypes.ECPropertyGroupingNode;\n  /** Full name of the grouping ECProperty class */\n  className: string;\n  /** Name of the ECProperty */\n  propertyName: string;\n  /** Grouping value */\n  groupingValue: any;\n}\n\n/**\n * Data structure that describes a display label grouping node key\n * @public\n */\nexport interface LabelGroupingNodeKey extends GroupingNodeKey {\n  type: StandardNodeTypes.DisplayLabelGroupingNode;\n  /** Grouping display label */\n  label: string;\n}\n\n/**\n * One of the serialized node key types\n * @internal\n */\nexport type NodeKeyJSON = BaseNodeKey | ECInstanceNodeKeyJSON | ECClassGroupingNodeKey | ECPropertyGroupingNodeKey | LabelGroupingNodeKey;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Hierarchies */\n\nimport { NodeKey, NodeKeyJSON } from \"./Key\";\n\n/**\n * Data structure that describes a tree node.\n * @public\n */\nexport interface Node {\n  /** A key that uniquely identifies a node. */\n  key: NodeKey;\n  /** Display label */\n  label: string;\n  /** Extensive description */\n  description?: string;\n  /** Image ID */\n  imageId?: string;\n  /** Foreground color */\n  foreColor?: string;\n  /** Background color */\n  backColor?: string;\n  /** Font style */\n  fontStyle?: string;\n  /** Does this node have child nodes */\n  hasChildren?: boolean;\n  /** Is this node selectable */\n  isSelectionDisabled?: boolean;\n  /** Is this node editable */\n  isEditable?: boolean;\n  /** Is this node expanded */\n  isExpanded?: boolean;\n  /** Is checkbox visible for this node */\n  isCheckboxVisible?: boolean;\n  /** Is this node's checkbox checked */\n  isChecked?: boolean;\n  /** Is this node's checkbox enabled */\n  isCheckboxEnabled?: boolean;\n  /** Extended data injected into this node */\n  extendedData?: { [key: string]: any };\n}\n\n/**\n * Serialized [[Node]] JSON representation.\n * @internal\n */\nexport interface NodeJSON {\n  key: NodeKeyJSON;\n  label: string;\n  description?: string;\n  imageId?: string;\n  foreColor?: string;\n  backColor?: string;\n  fontStyle?: string;\n  hasChildren?: boolean;\n  isSelectionDisabled?: boolean;\n  isEditable?: boolean;\n  isExpanded?: boolean;\n  isCheckboxVisible?: boolean;\n  isChecked?: boolean;\n  isCheckboxEnabled?: boolean;\n  extendedData?: { [key: string]: any };\n}\n/** @public */\nexport namespace Node {\n  /**\n   * Serialize given node to JSON.\n   * @internal\n   */\n  export function toJSON(node: Node): NodeJSON {\n    return { ...node, key: NodeKey.toJSON(node.key) };\n  }\n\n  /**\n   * Deserialize node from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized node\n   *\n   * @internal\n   */\n  export function fromJSON(json: NodeJSON | string): Node {\n    if (typeof json === \"string\")\n      return JSON.parse(json, reviver);\n    return Object.assign({}, json, {\n      key: NodeKey.fromJSON(json.key),\n    });\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing [[Node]] objects.\n   *\n   * @internal\n   */\n  export function reviver(key: string, value: any): any {\n    return key === \"\" ? fromJSON(value) : value;\n  }\n\n  /**\n   * Deserialize nodes list from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized nodes list\n   *\n   * @internal\n   */\n  export function listFromJSON(json: NodeJSON[] | string): Node[] {\n    if (typeof json === \"string\")\n      return JSON.parse(json, listReviver);\n    return json.map((m) => fromJSON(m));\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing [[Node]][] objects.\n   *\n   * @internal\n   */\n  export function listReviver(key: string, value: any): any {\n    return key === \"\" ? listFromJSON(value) : value;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Hierarchies */\n\nimport { Node, NodeJSON } from \"./Node\";\n\n/**\n * Data related to node hierarchy filtering\n * @public\n */\nexport interface NodePathFilteringData {\n  /** Number of filter matches in the current element */\n  matchesCount: number;\n  /** Number of filter matches in the current element's children (recursively) */\n  childMatchesCount: number;\n}\n\n/**\n * Describes a single step in the nodes path.\n * @public\n */\nexport interface NodePathElement {\n  /** Node instance */\n  node: Node;\n  /** Node index  */\n  index: number;\n  /** Is this element part of the marked path */\n  isMarked?: boolean;\n  /** Child path elements */\n  children: NodePathElement[];\n  /** Additional filtering-related information */\n  filteringData?: NodePathFilteringData;\n}\n/** @public */\nexport namespace NodePathElement {\n  /**\n   * Serialize given [[NodePathElement]] to JSON\n   * @internal\n   */\n  export function toJSON(npe: NodePathElement): NodePathElementJSON {\n    const result: NodePathElementJSON = {\n      node: Node.toJSON(npe.node),\n      index: npe.index,\n      children: npe.children.map(NodePathElement.toJSON),\n    };\n    if (undefined !== npe.isMarked)\n      result.isMarked = npe.isMarked;\n    if (undefined !== npe.filteringData)\n      result.filteringData = nodePathFilteringDataToJson(npe.filteringData);\n    return result;\n  }\n\n  /**\n   * Deserialize [[NodePathElement]] from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized [[NodePathElement]]\n   *\n   * @internal\n   */\n  export function fromJSON(json: NodePathElementJSON | string): NodePathElement {\n    if (typeof json === \"string\")\n      return JSON.parse(json, reviver);\n    const result: NodePathElement = {\n      index: json.index,\n      node: Node.fromJSON(json.node),\n      children: listFromJSON(json.children),\n    };\n    if (undefined !== json.isMarked)\n      result.isMarked = json.isMarked;\n    if (undefined !== json.filteringData)\n      result.filteringData = nodePathFilteringDataFromJson(json.filteringData);\n    return result;\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing [[NodePathElement]] objects.\n   *\n   * @internal\n   */\n  export function reviver(key: string, value: any): any {\n    return key === \"\" ? fromJSON(value) : value;\n  }\n\n  /**\n   * Deserialize [[NodePathElement]] list from JSON\n   * @param json JSON or JSON serialized to string to deserialize from\n   * @returns Deserialized [[NodePathElement]] list\n   *\n   * @internal\n   */\n  export function listFromJSON(json: NodePathElementJSON[] | string): NodePathElement[] {\n    if (typeof json === \"string\")\n      return JSON.parse(json, listReviver);\n    return json.map((m) => fromJSON(m));\n  }\n\n  /**\n   * Reviver function that can be used as a second argument for\n   * `JSON.parse` method when parsing [[NodePathElement]][] objects.\n   *\n   * @internal\n   */\n  export function listReviver(key: string, value: any): any {\n    return key === \"\" ? listFromJSON(value) : value;\n  }\n}\n\n/**\n * Serialized [[NodePathFilteringData]] JSON representation.\n * @internal\n */\nexport interface NodePathFilteringDataJSON {\n  occurances: number;\n  childrenOccurances: number;\n}\n\n/**\n * Serialized [[NodePathElement]] JSON representation.\n * @internal\n */\nexport interface NodePathElementJSON {\n  node: NodeJSON;\n  index: number;\n  isMarked?: boolean;\n  children: NodePathElementJSON[];\n  filteringData?: NodePathFilteringDataJSON;\n}\n\nconst nodePathFilteringDataToJson = (npfd: NodePathFilteringData): NodePathFilteringDataJSON => {\n  return {\n    occurances: npfd.matchesCount,\n    childrenOccurances: npfd.childMatchesCount,\n  };\n};\n\nconst nodePathFilteringDataFromJson = (json: NodePathFilteringDataJSON): NodePathFilteringData => {\n  return {\n    matchesCount: json.occurances,\n    childMatchesCount: json.childrenOccurances,\n  };\n};\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Core */\n\nexport {\n  ClassId, InstanceId, InstanceKey,\n  ClassInfo, EnumerationChoice, EnumerationInfo, KindOfQuantityInfo,\n  PropertyInfo, RelatedClassInfo, RelationshipPath,\n} from \"./EC\";\nexport { PresentationError, PresentationStatus } from \"./Error\";\nexport { KeySet, Keys, Key } from \"./KeySet\";\nexport { PersistentKeysContainer } from \"./PersistentKeysContainer\";\nexport {\n  RequestOptions, HierarchyRequestOptions, ContentRequestOptions,\n  LabelRequestOptions, SelectionScopeRequestOptions,\n  PageOptions, Paged, RequestOptionsWithRuleset,\n} from \"./PresentationManagerOptions\";\nexport {\n  PresentationRpcInterface, PresentationRpcRequestOptions,\n  LabelRpcRequestOptions, ClientStateSyncRequestOptions, ContentRpcRequestOptions,\n  HierarchyRpcRequestOptions, SelectionScopeRpcRequestOptions,\n  PresentationRpcResponse,\n} from \"./PresentationRpcInterface\";\nexport { RpcRequestsHandler, RpcRequestsHandlerProps, IClientStateHolder } from \"./RpcRequestsHandler\";\nexport { RulesetVariablesState, VariableValueTypes, VariableValue } from \"./RulesetVariables\";\nexport { RegisteredRuleset, RulesetManagerState } from \"./RegisteredRuleset\";\nexport { RulesetsFactory } from \"./RulesetsFactory\";\nexport { LoggingNamespaces } from \"./Logging\";\nexport {\n  Omit, Subtract, ValuesDictionary,\n  getInstancesCount,\n} from \"./Utils\";\n\n/** @module UnifiedSelection */\nexport { SelectionScope } from \"./selection/SelectionScope\";\n\n/** @module Content */\nexport { CategoryDescription } from \"./content/Category\";\nexport { Content } from \"./content/Content\";\nexport {\n  Descriptor, DescriptorSource, DescriptorOverrides,\n  SelectClassInfo, SelectionInfo, SortDirection, ContentFlags,\n} from \"./content/Descriptor\";\nexport { DefaultContentDisplayTypes } from \"./content/DisplayTypes\";\nexport { EditorDescription } from \"./content/Editor\";\nexport { Field, PropertiesField, NestedContentField } from \"./content/Fields\";\nexport { Item } from \"./content/Item\";\nexport { Property } from \"./content/Property\";\nexport {\n  PropertyValueFormat, TypeDescription, PrimitiveTypeDescription,\n  ArrayTypeDescription, StructTypeDescription, StructFieldMemberDescription,\n  BaseTypeDescription,\n} from \"./content/TypeDescription\";\nexport {\n  Value, ValuesArray, ValuesMap,\n  DisplayValue, DisplayValuesArray, DisplayValuesMap,\n  NestedContentValue,\n} from \"./content/Value\";\n\n/** @module Hierarchies */\nexport { NodeKey, NodeKeyPath, StandardNodeTypes } from \"./hierarchy/Key\";\nexport {\n  BaseNodeKey, ECInstanceNodeKey, GroupingNodeKey,\n  ECClassGroupingNodeKey, ECPropertyGroupingNodeKey, LabelGroupingNodeKey,\n} from \"./hierarchy/Key\";\nexport { Node } from \"./hierarchy/Node\";\nexport { NodePathElement, NodePathFilteringData } from \"./hierarchy/NodePathElement\";\n\n/** @module PresentationRules */\nexport { NavigationRule, NavigationRuleBase } from \"./rules/hierarchy/NavigationRule\";\nexport { RootNodeRule } from \"./rules/hierarchy/RootNodeRule\";\nexport { ChildNodeRule } from \"./rules/hierarchy/ChildNodeRule\";\nexport {\n  ChildNodeSpecification, ChildNodeSpecificationTypes,\n  ChildNodeSpecificationBase, DefaultGroupingPropertiesContainer,\n} from \"./rules/hierarchy/ChildNodeSpecification\";\nexport { AllInstanceNodesSpecification } from \"./rules/hierarchy/AllInstanceNodesSpecification\";\nexport { AllRelatedInstanceNodesSpecification } from \"./rules/hierarchy/AllRelatedInstanceNodesSpecification\";\nexport { RelatedInstanceNodesSpecification } from \"./rules/hierarchy/RelatedInstanceNodesSpecification\";\nexport { InstanceNodesOfSpecificClassesSpecification } from \"./rules/hierarchy/InstanceNodesOfSpecificClassesSpecification\";\nexport {\n  CustomQueryInstanceNodesSpecification, QuerySpecification, QuerySpecificationBase,\n  QuerySpecificationTypes, StringQuerySpecification, ECPropertyValueQuerySpecification,\n} from \"./rules/hierarchy/CustomQueryInstanceNodesSpecification\";\nexport { CustomNodeSpecification } from \"./rules/hierarchy/CustomNodeSpecification\";\nexport { SubCondition } from \"./rules/hierarchy/SubCondition\";\n\nexport { CustomizationRule } from \"./rules/customization/CustomizationRule\";\nexport { CheckBoxRule } from \"./rules/customization/CheckBoxRule\";\nexport { ImageIdOverride } from \"./rules/customization/ImageIdOverride\";\nexport {\n  InstanceLabelOverride, InstanceLabelOverrideValueSpecificationType, InstanceLabelOverrideValueSpecificationBase,\n  InstanceLabelOverrideValueSpecification, InstanceLabelOverridePropertyValueSpecification,\n  InstanceLabelOverrideBriefcaseIdSpecification, InstanceLabelOverrideClassLabelSpecification,\n  InstanceLabelOverrideClassNameSpecification, InstanceLabelOverrideLocalIdSpecification,\n  InstanceLabelOverrideCompositeValueSpecification,\n} from \"./rules/customization/InstanceLabelOverride\";\nexport { LabelOverride } from \"./rules/customization/LabelOverride\";\nexport { SortingRule, PropertySortingRule, DisabledSortingRule, SortingRuleBase } from \"./rules/customization/SortingRule\";\nexport { StyleOverride } from \"./rules/customization/StyleOverride\";\nexport {\n  GroupingRule, GroupingSpecification, GroupingSpecificationTypes,\n  SameLabelInstanceGroup, ClassGroup,\n  PropertyGroup, PropertyGroupingValue, PropertyRangeGroupSpecification,\n  GroupingSpecificationBase,\n} from \"./rules/customization/GroupingRule\";\n\nexport { ContentRule } from \"./rules/content/ContentRule\";\nexport { ContentSpecification, ContentSpecificationTypes, ContentSpecificationBase } from \"./rules/content/ContentSpecification\";\nexport { ContentInstancesOfSpecificClassesSpecification } from \"./rules/content/ContentInstancesOfSpecificClassesSpecification\";\nexport { ContentRelatedInstancesSpecification } from \"./rules/content/ContentRelatedInstancesSpecification\";\nexport { SelectedNodeInstancesSpecification } from \"./rules/content/SelectedNodeInstancesSpecification\";\n\nexport { ContentModifier } from \"./rules/content/modifiers/ContentModifier\";\nexport {\n  RelatedPropertiesSpecification, RelationshipMeaning,\n  RelatedPropertiesSpecialValues,\n} from \"./rules/content/modifiers/RelatedPropertiesSpecification\";\nexport { CalculatedPropertiesSpecification } from \"./rules/content/modifiers/CalculatedPropertiesSpecification\";\nexport { PropertiesDisplaySpecification } from \"./rules/content/modifiers/PropertiesDisplaySpecification\";\nexport {\n  PropertyEditorParameters, PropertyEditorParametersBase,\n  PropertyEditorsSpecification, PropertyEditorParameterTypes,\n  PropertyEditorJsonParameters, PropertyEditorMultilineParameters,\n  PropertyEditorRangeParameters, PropertyEditorSliderParameters,\n} from \"./rules/content/modifiers/PropertyEditorsSpecification\";\n\nexport { Ruleset, SupplementationInfo } from \"./rules/Ruleset\";\nexport { Rule, RuleTypes, RuleBase, ConditionContainer } from \"./rules/Rule\";\nexport { VariablesGroup, Variable, VariableValueType } from \"./rules/Variables\";\nexport { RelatedInstanceSpecification } from \"./rules/RelatedInstanceSpecification\";\nexport { RelationshipDirection } from \"./rules/RelationshipDirection\";\nexport { SingleSchemaClassSpecification, MultiSchemaClassesSpecification } from \"./rules/ClassSpecifications\";\nexport { SchemasSpecification } from \"./rules/SchemasSpecification\";\n\n// Set the version number so it can be found at runtime. BUILD_SEMVER is replaced at build time by the webpack DefinePlugin.\ndeclare var BUILD_SEMVER: string;\n/* istanbul ignore next */\nif ((typeof (BUILD_SEMVER) !== \"undefined\") && (typeof window !== \"undefined\") && window) {\n  if (!(window as any).iModelJsVersions)\n    (window as any).iModelJsVersions = new Map<string, string>();\n  (window as any).iModelJsVersions.set(\"presentation-common\", BUILD_SEMVER);\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\n/**\n * Defines direction of a relationship that should be followed\n * @public\n */\nexport enum RelationshipDirection {\n  /** Relationship should be followed in both directions. */\n  Both = \"Both\",\n  /** Relationship should be followed only in forward direction. */\n  Forward = \"Forward\",\n  /** Relationship should be followed only in backward direction. */\n  Backward = \"Backward\",\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { CustomizationRule } from \"./customization/CustomizationRule\";\nimport { NavigationRule } from \"./hierarchy/NavigationRule\";\nimport { ContentRule } from \"./content/ContentRule\";\nimport { ContentModifier } from \"./content/modifiers/ContentModifier\";\n\n/**\n * Base interface for all [[Rule]] implementations. Not meant\n * to be used directly, see `Rule`.\n *\n * @public\n */\nexport interface RuleBase {\n  /** Used for serializing to JSON. */\n  ruleType: RuleTypes;\n\n  /**\n   * Defines the order in which presentation rules will be evaluated and executed. Defaults to `1000`.\n   *\n   * @type integer\n   */\n  priority?: number;\n\n  /**\n   * Should this rule should be ignored if there is already an existing\n   * rule with a higher priority.\n   */\n  onlyIfNotHandled?: boolean;\n}\n\n/**\n * Presentation rules allow configuring the hierarchy and content.\n * @public\n */\nexport declare type Rule = CustomizationRule | NavigationRule | ContentRule | ContentModifier;\n\n/**\n * Container of a [[condition]] property. Used for rules that support conditions. Not\n * meant to be used directly, see `Rule`.\n *\n * @public\n */\nexport interface ConditionContainer {\n  /**\n   * Defines a condition for the rule, which needs to be met in order to execute it. Condition\n   * is an [ECExpression]($docs/learning/ECExpressions.md), which can use\n   * a limited set of symbols (depends on specific `ConditionContainer`).\n   */\n  condition?: string;\n}\n\n/**\n * Used for serializing [[Rule]] objects to JSON.\n * @public\n */\nexport enum RuleTypes {\n  // hierarchy rules\n  RootNodes = \"RootNodes\",\n  ChildNodes = \"ChildNodes\",\n\n  // content rules\n  Content = \"Content\",\n  ContentModifier = \"ContentModifier\",\n\n  // customization rules\n  Grouping = \"Grouping\",\n  PropertySorting = \"PropertySorting\",\n  DisabledSorting = \"DisabledSorting\",\n  InstanceLabelOverride = \"InstanceLabelOverride\",\n  LabelOverride = \"LabelOverride\",\n  CheckBox = \"CheckBox\",\n  ImageIdOverride = \"ImageIdOverride\",\n  StyleOverride = \"StyleOverride\",\n  ExtendedData = \"ExtendedData\",\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\n/**\n * Presentation rules support variables that allow having additional customization of the hierarchy\n * and content based on variables whose values can change during application session.\n *\n * There are [special ECExpression symbols]($docs/learning/ECExpressions.md#ruleset-variables-user-settings)\n * that can be used to access variables by their ID, so rule conditions can check for a value and change\n * the behavior. It allows showing / hiding some nodes in the hierarchy, change the grouping, etc.\n *\n * @public\n */\nexport interface VariablesGroup {\n  /**\n   * Group label to display in the UI.\n   * May be [localized]($docs/learning/Localization.md).\n   */\n  label: string;\n\n  /** Grouped variables */\n  vars: Variable[];\n\n  /** Nested variable groups. */\n  nestedGroups?: VariablesGroup[];\n}\n\n/**\n * Available value types of user-controllable variables\n * @public\n */\nexport enum VariableValueType {\n  /** Bool value, that uses Yes / No strings in the UI */\n  YesNo = \"YesNo\",\n\n  /** Bool value, that uses Show / Hide strings in the UI */\n  ShowHide = \"ShowHide\",\n\n  /** Any string value */\n  String = \"StringValue\",\n\n  /** Any integer value */\n  Int = \"IntValue\",\n}\n\n/**\n * Definition for single user-controllable variable\n * @public\n */\nexport interface Variable {\n  /** Id of the variable */\n  id: string;\n\n  /**\n   * Label of the variable that is shown in the UI.\n   * May be [localized]($docs/learning/Localization.md).\n   */\n  label: string;\n\n  /** Defines value type. Defaults to [[VariableValueType.YesNo]]. */\n  type?: VariableValueType;\n\n  /** Default value. */\n  defaultValue?: string;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { ContentInstancesOfSpecificClassesSpecification } from \"./ContentInstancesOfSpecificClassesSpecification\";\nimport { ContentRelatedInstancesSpecification } from \"./ContentRelatedInstancesSpecification\";\nimport { SelectedNodeInstancesSpecification } from \"./SelectedNodeInstancesSpecification\";\nimport { PropertiesDisplaySpecification } from \"./modifiers/PropertiesDisplaySpecification\";\nimport { PropertyEditorsSpecification } from \"./modifiers/PropertyEditorsSpecification\";\nimport { RelatedPropertiesSpecification } from \"./modifiers/RelatedPropertiesSpecification\";\nimport { CalculatedPropertiesSpecification } from \"./modifiers/CalculatedPropertiesSpecification\";\nimport { RelatedInstanceSpecification } from \"../RelatedInstanceSpecification\";\n\n/**\n * Used for serializing array of [[ContentSpecification]]\n * @public\n */\nexport enum ContentSpecificationTypes {\n  ContentInstancesOfSpecificClasses = \"ContentInstancesOfSpecificClasses\",\n  ContentRelatedInstances = \"ContentRelatedInstances\",\n  SelectedNodeInstances = \"SelectedNodeInstances\",\n}\n\n/**\n * Base interface for all [[ContentSpecification]] implementations. Not\n * meant to be used directly, see `ContentSpecification`.\n *\n * @public\n */\nexport interface ContentSpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: ContentSpecificationTypes;\n\n  /**\n   * Defines the order in which specifications are evaluated and executed. Defaults to `1000`.\n   *\n   * @type integer\n   */\n  priority?: number;\n\n  /** Should each content record be assigned an image id */\n  showImages?: boolean;\n\n  /** Specifications for including properties of related instances */\n  relatedProperties?: RelatedPropertiesSpecification[];\n\n  /** Specifications for including calculated properties */\n  calculatedProperties?: CalculatedPropertiesSpecification[];\n\n  /** Specifications for customizing property display by hiding / showing them */\n  propertiesDisplay?: PropertiesDisplaySpecification[];\n\n  /** Specifications for assigning property editors */\n  propertyEditors?: PropertyEditorsSpecification[];\n\n  /** Specifications for joining related instances */\n  relatedInstances?: RelatedInstanceSpecification[];\n}\n\n/**\n * Content rule specifications which define what content is returned\n * when rule is used.\n *\n * @public\n */\nexport declare type ContentSpecification = ContentInstancesOfSpecificClassesSpecification\n  | ContentRelatedInstancesSpecification | SelectedNodeInstancesSpecification;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\n/**\n * Sub-specification to specify custom property editor\n * @public\n */\nexport interface PropertyEditorsSpecification {\n  /** Name of the property which custom editor should be used for */\n  propertyName: string;\n\n  /** Name of the custom editor */\n  editorName: string;\n\n  /**\n   * Parameters for the editor\n   * @public\n   */\n  parameters?: PropertyEditorParameters[];\n}\n\n/**\n * Parameters for [[PropertyEditorsSpecification]]\n * @public\n */\nexport declare type PropertyEditorParameters = PropertyEditorJsonParameters\n  | PropertyEditorMultilineParameters\n  | PropertyEditorRangeParameters\n  | PropertyEditorSliderParameters;\n\n/**\n * Used for serializing array of [[PropertyEditorParameters]] to JSON\n * @public\n */\nexport enum PropertyEditorParameterTypes {\n  Json = \"Json\",\n  Multiline = \"Multiline\",\n  Range = \"Range\",\n  Slider = \"Slider\",\n}\n\n/**\n * Base interface for [[PropertyEditorParameters]]. Not meant\n * to be used directly, see `PropertyEditorParameters`.\n * @public\n */\nexport interface PropertyEditorParametersBase {\n  /** Used for serializing to JSON. */\n  paramsType: PropertyEditorParameterTypes;\n}\n\n/**\n * Arbitrary JSON parameters for custom property editors\n * @public\n */\nexport interface PropertyEditorJsonParameters extends PropertyEditorParametersBase {\n  /** Used for serializing to JSON. */\n  paramsType: PropertyEditorParameterTypes.Json;\n\n  /** Arbitrary JSON that can be handled by a property editor */\n  json: any;\n}\n\n/**\n * Multiline parameters for property editors that support multiline display\n * @public\n */\nexport interface PropertyEditorMultilineParameters extends PropertyEditorParametersBase {\n  /** Used for serializing to JSON. */\n  paramsType: PropertyEditorParameterTypes.Multiline;\n\n  /**\n   * Number of lines. Defaults to `1`.\n   *\n   * @type integer\n   * @minimum 1\n   */\n  height?: number;\n}\n\n/**\n * Range parameters for property editors that support ranges\n * @public\n */\nexport interface PropertyEditorRangeParameters extends PropertyEditorParametersBase {\n  /** Used for serializing to JSON. */\n  paramsType: PropertyEditorParameterTypes.Range;\n\n  /** Minimum value of the range. */\n  min?: number;\n\n  /** Maximum value of the range. */\n  max?: number;\n}\n\n/**\n * Slider parameters for property editors that support slider display\n * @public\n */\nexport interface PropertyEditorSliderParameters extends PropertyEditorParametersBase {\n  /** Used for serializing to JSON. */\n  paramsType: PropertyEditorParameterTypes.Slider;\n\n  /** Minimum value that can be set. */\n  min: number;\n\n  /** Maximum value that can be set. */\n  max: number;\n\n  /**\n   * Count of intervals. Defaults to `1`.\n   *\n   * @type integer\n   * @minimum 1\n   */\n  intervalsCount?: number;\n\n  /** Is slider vertical. */\n  isVertical?: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { RelationshipDirection } from \"../../RelationshipDirection\";\nimport { MultiSchemaClassesSpecification } from \"../../ClassSpecifications\";\n\n/**\n * Meaning of the relationship\n * @public\n */\nexport enum RelationshipMeaning {\n  /**\n   * Related instance is part of the primary instance. Related properties\n   * with this meaning are displayed in UI as if they belonged to the\n   * primary instance.\n   */\n  SameInstance = \"SameInstance\",\n\n  /**\n   * Related instance if not part of the primary instance - it should\n   * appear as related. UI components may display related instance properties\n   * differently, e.g. put them under a different category, etc.\n   */\n  RelatedInstance = \"RelatedInstance\",\n}\n\n/**\n * Special values that can be used in [[RelatedPropertiesSpecification.propertyNames]]\n * @public\n */\nexport enum RelatedPropertiesSpecialValues {\n  /**\n   * Used to specify that no properties should be included. Usually\n   * used together with [[RelatedPropertiesSpecification.nestedRelatedProperties]]\n   */\n  None = \"_none_\",\n}\n\n/**\n * Sub-specification to include additional related instance properties\n * @public\n */\nexport interface RelatedPropertiesSpecification {\n  /**\n   * Specifications of ECRelationshipClasses. Optional if [[relatedClasses]] is specified.\n   */\n  relationships?: MultiSchemaClassesSpecification | MultiSchemaClassesSpecification[];\n\n  /**\n   * Specifications of related ECClasses. Optional if [[relationships]] is specified.\n   */\n  relatedClasses?: MultiSchemaClassesSpecification | MultiSchemaClassesSpecification[];\n\n  /**\n   * Should [[relationships]] and [[relatedClasses]] be handled polymorphically.\n   */\n  isPolymorphic?: boolean;\n\n  /**\n   * Direction that will be followed in the relationship select criteria.\n   * Defaults to [[RelationshipDirection.Both]].\n   */\n  requiredDirection?: RelationshipDirection;\n\n  /** Meaning of the relationship. Defaults to [[RelationshipMeaning.RelatedInstance]] */\n  relationshipMeaning?: RelationshipMeaning;\n\n  /**\n   * List of names of related class properties that should be included in the content.\n   * All properties are included if not specified.\n   */\n  propertyNames?: string[] | RelatedPropertiesSpecialValues;\n\n  /** Specifications for nested related properties */\n  nestedRelatedProperties?: RelatedPropertiesSpecification[];\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { RuleTypes, RuleBase, ConditionContainer } from \"../Rule\";\nimport { SingleSchemaClassSpecification } from \"../ClassSpecifications\";\n\n/**\n * Grouping rule is an advanced way to configure node grouping.\n *\n * It allows to define these types of groupings:\n * - Group by base class.\n * - Group by any property of the instance by a common value or a range of values.\n * - Group multiple instances with the same label in to one ECInstance node. This can be used in cases when these\n * instances represent the same object for the user.\n *\n * The rule works in conjunction with other grouping options available in navigation specifications [[ChildNodeSpecification]]:\n * `groupByClass` and `groupByLabel`. The grouping hierarchy looks like this:\n * - Base ECClass grouping node (specified by base class grouping specification [[ClassGroup]])\n *   - ECClass grouping node (specified by `groupByClass` property)\n *     - ECProperty grouping node 1 (specified by 1st [[PropertyGroup]])\n *       - ECProperty grouping node 2 (specified by 2nd [[PropertyGroup]])\n *         - ECProperty grouping node n (specified by n-th [[PropertyGroup]])\n *           - Display label grouping node (specified by `groupByLabel` property)\n *             - ECInstance nodes (may be grouped under a single node by [[SameLabelInstanceGroup]])\n *\n * @public\n */\nexport interface GroupingRule extends RuleBase, ConditionContainer {\n  /** Used for serializing to JSON. */\n  ruleType: RuleTypes.Grouping;\n\n  /**\n   * Defines a condition for the rule, which needs to be met in order to execute it. Condition\n   * is an [ECExpression]($docs/learning/ECExpressions.md), which can use\n   * a [limited set of symbols]($docs/learning/customization/ECExpressions.md#rule-condition).\n   */\n  condition?: string;\n\n  /** Specification of ECClass which should be grouped using this rule */\n  class: SingleSchemaClassSpecification;\n\n  /** Specifications of grouping which should be applied to matching ECInstances */\n  groups: GroupingSpecification[];\n}\n\n/**\n * Grouping rule specifications\n * @public\n */\nexport declare type GroupingSpecification = ClassGroup | PropertyGroup | SameLabelInstanceGroup;\n\n/**\n * Available types of [[GroupingSpecification]]\n * @public\n */\nexport enum GroupingSpecificationTypes {\n  Class = \"Class\",\n  Property = \"Property\",\n  SameLabelInstance = \"SameLabelInstance\",\n}\n\n/**\n * Base interface for all [[GroupingSpecification]] implementations. Not\n * meant to be used directly, see `GroupingSpecification`.\n *\n * @public\n */\nexport interface GroupingSpecificationBase {\n  /** Type of the subclass */\n  specType: GroupingSpecificationTypes;\n}\n\n/**\n * Allows grouping ECInstance nodes by their base class.\n * @public\n */\nexport interface ClassGroup extends GroupingSpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: GroupingSpecificationTypes.Class;\n\n  /** Should the grouping node be created if there is only one item in that group. */\n  createGroupForSingleItem?: boolean;\n\n  /** Specification of the base ECClass to group by. Defaults to rule's class. */\n  baseClass?: SingleSchemaClassSpecification;\n}\n\n/**\n * Allows grouping multiple instances with the same label into one ECInstance node.\n * It can be used in cases when these instances represent the same object for the user.\n *\n * When multiple instances are grouped, an ECInstance node is created instead of a\n * grouping node and the ECInstance key for the node is assigned to key of one of grouped\n * instances.\n *\n * @public\n */\nexport interface SameLabelInstanceGroup extends GroupingSpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: GroupingSpecificationTypes.SameLabelInstance;\n}\n\n/**\n * Allows grouping by property of the instance\n * by a common value or by range of values.\n *\n * @public\n */\nexport interface PropertyGroup extends GroupingSpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: GroupingSpecificationTypes.Property;\n\n  /**\n   * Name of the ECProperty which is used for grouping.\n   *\n   * @minLength 1\n   */\n  propertyName: string;\n\n  /**\n   * ID of an image to use for the grouping node\n   *\n   * @minLength 1\n   */\n  imageId?: string;\n\n  /** Should the grouping node be created if there is only one item in that group */\n  createGroupForSingleItem?: boolean;\n\n  /** Should a separate grouping node be created for nodes whose grouping value is not set. Defaults to `true`. */\n  createGroupForUnspecifiedValues?: boolean;\n\n  /**\n   * Should the instances be grouped on display label or the grouping property value.\n   * Defaults to [[PropertyGroupingValue.DisplayLabel]].\n   *\n   * **Note:** Grouping by property value is required if the display label is\n   * overridden to display grouped instances count.\n   *\n   * **Warning:** Grouping by label and sorting by property value is not possible.\n   */\n  groupingValue?: PropertyGroupingValue;\n\n  /**\n   * Should the nodes be sorted by display label or the grouping property value. In most\n   * cases the result is the same, unless [[LabelOverride]] rule is used to change the display label.\n   * Defaults to [[PropertyGroupingValue.DisplayLabel]].\n   *\n   * **Note:** Sorting by property value only makes sense when instances are grouped by\n   * property value as well.\n   *\n   * **Warning:** Grouping by label and sorting by property value is not possible.\n   */\n  sortingValue?: PropertyGroupingValue;\n\n  /** Ranges into which the grouping values are divided */\n  ranges?: PropertyRangeGroupSpecification[];\n}\n\n/**\n * Used in [[PropertyGroup]] to specify the type of value to use\n * for grouping and sorting\n *\n * @public\n */\nexport enum PropertyGroupingValue {\n  /** By property value */\n  PropertyValue = \"PropertyValue\",\n\n  /** By display label */\n  DisplayLabel = \"DisplayLabel\",\n}\n\n/**\n * Describes a grouping range\n * @public\n */\nexport interface PropertyRangeGroupSpecification {\n  /**\n   * ID of an image to use for the grouping node. Defaults to [[PropertyGroup.imageId]] specified in [[PropertyGroup]].\n   *\n   * @minLength 1\n   */\n  imageId?: string;\n\n  /**\n   * Grouping node label. May be [localized]($docs/learning/Localization.md).\n   * Defaults to `{from value} - {to value}`\n   *\n   * @minLength 1\n   */\n  label?: string;\n\n  /**\n   * Value that defines the range start (inclusive)\n   *\n   * @minLength 1\n   */\n  fromValue: string;\n\n  /**\n   * Value that defines the range end (inclusive)\n   *\n   * @minLength 1\n   */\n  toValue: string;\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { RuleTypes, RuleBase } from \"../Rule\";\nimport { SingleSchemaClassSpecification } from \"../ClassSpecifications\";\n\n/**\n * Rule to override labels for instances of specific ECClasses.\n *\n * **Important:** Prefer this rule over [[LabelOverride]] when possible as it\n * has better performance.\n *\n * @public\n */\nexport interface InstanceLabelOverride extends RuleBase {\n  /** Used for serializing to JSON. */\n  ruleType: RuleTypes.InstanceLabelOverride;\n\n  /**\n   * Specification of the ECClass to apply this rule to.\n   */\n  class: SingleSchemaClassSpecification;\n\n  /**\n   * Specifications for the label value. The first non-empty value\n   * is used as the actual label.\n   */\n  values: InstanceLabelOverrideValueSpecification[];\n}\n\n/**\n * Types of possible [[InstanceLabelOverride]] label value.\n * @public\n */\nexport enum InstanceLabelOverrideValueSpecificationType {\n  Composite = \"Composite\",\n  Property = \"Property\",\n  ClassName = \"ClassName\",\n  ClassLabel = \"ClassLabel\",\n  BriefcaseId = \"BriefcaseId\",\n  LocalId = \"LocalId\",\n}\n\n/**\n * Base interface for all [[InstanceLabelOverrideValueSpecification]] implementations.\n * @public\n */\nexport interface InstanceLabelOverrideValueSpecificationBase {\n  /** Type of the specification */\n  specType: InstanceLabelOverrideValueSpecificationType;\n}\n\n/**\n * Specification that allows creating a label value composited using\n * multiple other specifications.\n *\n * @public\n */\nexport interface InstanceLabelOverrideCompositeValueSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.Composite;\n\n  /**\n   * Parts of the value.\n   *\n   * If any of the parts with `isRequired` flag evaluate to an empty string, the\n   * result of this specification is also an empty string.\n   */\n  parts: Array<{ spec: InstanceLabelOverrideValueSpecification; isRequired?: boolean }>;\n\n  /** Separator to use when joining the parts. Defaults to a space character. */\n  separator?: string;\n}\n\n/**\n * Specification that uses property value as the label content.\n * @public\n */\nexport interface InstanceLabelOverridePropertyValueSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.Property;\n\n  /**\n   * Name of the property whose value should be used.\n   *\n   * @note A property with this name must exist on the\n   * parent `InstanceLabelOverride.class`.\n   */\n  propertyName: string;\n}\n\n/**\n * Specification that uses ECClass name as the label content.\n * @public\n */\nexport interface InstanceLabelOverrideClassNameSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.ClassName;\n\n  /** Should full (`{schemaName}.{className}`) class name be used */\n  full?: boolean;\n}\n\n/**\n * Specification that uses ECClass display label as the label content.\n * @public\n */\nexport interface InstanceLabelOverrideClassLabelSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.ClassLabel;\n}\n\n/**\n * Specification that returns ECInstance's briefcase ID in base36 format.\n * @public\n */\nexport interface InstanceLabelOverrideBriefcaseIdSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.BriefcaseId;\n}\n\n/**\n * Specification that returns ECInstance's local ID in base36 format.\n * @public\n */\nexport interface InstanceLabelOverrideLocalIdSpecification extends InstanceLabelOverrideValueSpecificationBase {\n  specType: InstanceLabelOverrideValueSpecificationType.LocalId;\n}\n\n/**\n * Specification to define how the label for [[InstanceLabelOverride]] should be created.\n * @public\n */\nexport type InstanceLabelOverrideValueSpecification = InstanceLabelOverrideCompositeValueSpecification\n  | InstanceLabelOverridePropertyValueSpecification\n  | InstanceLabelOverrideClassNameSpecification | InstanceLabelOverrideClassLabelSpecification\n  | InstanceLabelOverrideBriefcaseIdSpecification | InstanceLabelOverrideLocalIdSpecification;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { ChildNodeRule } from \"./ChildNodeRule\";\nimport { AllInstanceNodesSpecification } from \"./AllInstanceNodesSpecification\";\nimport { AllRelatedInstanceNodesSpecification } from \"./AllRelatedInstanceNodesSpecification\";\nimport { CustomNodeSpecification } from \"./CustomNodeSpecification\";\nimport { InstanceNodesOfSpecificClassesSpecification } from \"./InstanceNodesOfSpecificClassesSpecification\";\nimport { RelatedInstanceNodesSpecification } from \"./RelatedInstanceNodesSpecification\";\nimport { CustomQueryInstanceNodesSpecification } from \"./CustomQueryInstanceNodesSpecification\";\nimport { RelatedInstanceSpecification } from \"../RelatedInstanceSpecification\";\n\n/**\n * Used for serializing array of [[ChildNodeSpecification]]\n * @public\n */\nexport enum ChildNodeSpecificationTypes {\n  // hierarchy specifications\n  AllInstanceNodes = \"AllInstanceNodes\",\n  AllRelatedInstanceNodes = \"AllRelatedInstanceNodes\",\n  RelatedInstanceNodes = \"RelatedInstanceNodes\",\n  InstanceNodesOfSpecificClasses = \"InstanceNodesOfSpecificClasses\",\n  CustomQueryInstanceNodes = \"CustomQueryInstanceNodes\",\n  CustomNode = \"CustomNode\",\n}\n\n/**\n * Base interface for all [[ChildNodeSpecification]] implementations. Not\n * meant to be used directly, see `ChildNodeSpecification`.\n *\n * @public\n */\nexport interface ChildNodeSpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: ChildNodeSpecificationTypes;\n\n  /**\n   * Defines the order in which specifications are evaluated and executed. Defaults to `1000`.\n   *\n   * @type integer\n   */\n  priority?: number;\n\n  /**\n   * This tells the rules engine that nodes produced using this\n   * specification always or never have children. Defaults to `Unknown`.\n   *\n   * **Note:** setting this flag to `Always` or `Never` improves performance.\n   */\n  hasChildren?: \"Always\" | \"Never\" | \"Unknown\";\n\n  /**\n   * Hide nodes provided by this specification and directly show nodes of its children.\n   * This helps if you need to define related instance nodes of particular parent node that is not available in the\n   * hierarchy.\n   */\n  hideNodesInHierarchy?: boolean;\n\n  /**\n   * Hide nodes if they don't have children.\n   */\n  hideIfNoChildren?: boolean;\n\n  /**\n   * Set this flag to `true` to suppress default sorting of ECInstances returned by this specification.\n   *\n   * **Note:** setting this flag to `true` improves performance.\n   */\n  doNotSort?: boolean;\n\n  /** Specifications of related instances that can be used in content creation. */\n  relatedInstances?: RelatedInstanceSpecification[];\n\n  /** [Nested rule]($docs/learning/hierarchies/Terminology.md#nested-rules) specifications. */\n  nestedRules?: ChildNodeRule[];\n}\n\n/**\n * A container of default grouping properties. Used for specifications that support\n * default grouping. Not meant to be used directly, see `ChildNodeSpecification`.\n *\n * @public\n */\nexport interface DefaultGroupingPropertiesContainer {\n  /** Group instances by ECClass. Defaults to `true`. */\n  groupByClass?: boolean;\n\n  /** Group instances by label. Defaults to `true`. */\n  groupByLabel?: boolean;\n}\n\n/**\n * Navigation rule specifications that define what content the rule results in.\n * @public\n */\nexport type ChildNodeSpecification = AllInstanceNodesSpecification |\n  AllRelatedInstanceNodesSpecification |\n  CustomNodeSpecification |\n  InstanceNodesOfSpecificClassesSpecification |\n  RelatedInstanceNodesSpecification |\n  CustomQueryInstanceNodesSpecification;\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module PresentationRules */\n\nimport { ChildNodeSpecificationBase, ChildNodeSpecificationTypes, DefaultGroupingPropertiesContainer } from \"./ChildNodeSpecification\";\nimport { SingleSchemaClassSpecification } from \"../ClassSpecifications\";\n\n/**\n * Creates nodes for instances which are returned by an ECSQL query.\n *\n * **Note:** this specification is formerly known as `SearchResultInstanceNodesSpecification`.\n *\n * @public\n */\nexport interface CustomQueryInstanceNodesSpecification extends ChildNodeSpecificationBase, DefaultGroupingPropertiesContainer {\n  /** Used for serializing to JSON. */\n  specType: ChildNodeSpecificationTypes.CustomQueryInstanceNodes;\n\n  /**\n   * Specifications of queries used to create the content.\n   *\n   * **Note:** if more than one search query is specified, the results get merged.\n   */\n  queries?: QuerySpecification[];\n}\n\n/**\n * Query specifications used in [[CustomQueryInstanceNodesSpecification]].\n * @public\n */\nexport declare type QuerySpecification = StringQuerySpecification | ECPropertyValueQuerySpecification;\n\n/**\n * Used for serializing array of [[QuerySpecification]] to JSON.\n * @public\n */\nexport enum QuerySpecificationTypes {\n  String = \"String\",\n  ECPropertyValue = \"ECPropertyValue\",\n}\n\n/**\n * Base interface for all [[QuerySpecification]] implementations. Not meant\n * to be used directly, see `QuerySpecification`.\n * @public\n */\nexport interface QuerySpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: QuerySpecificationTypes;\n\n  /** Specification of ECClass whose instances the query returns. */\n  class: SingleSchemaClassSpecification;\n}\n\n/**\n * Specification which contains an ECSQL query used to query for instances.\n * @public\n */\nexport interface StringQuerySpecification extends QuerySpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: QuerySpecificationTypes.String;\n\n  /** Specifies the search ECSQL query. */\n  query: string;\n}\n\n/**\n * Specification which specifies the name of the parent instance property whose\n * value is the ECSQL used to query for instances.\n *\n * **Precondition:** can be used only if parent node is ECInstance node.\n * If there is no immediate parent instance node it will go up until it finds one.\n *\n * @public\n */\nexport interface ECPropertyValueQuerySpecification extends QuerySpecificationBase {\n  /** Used for serializing to JSON. */\n  specType: QuerySpecificationTypes.ECPropertyValue;\n\n  /**\n   * Specifies name of the parent instance property whose value\n   * contains the ECSQL query.\n   *\n   * **Warning:** the property whose name is specified must be of string type.\n   */\n  parentPropertyName: string;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__;","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_common__;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACVA;;;AAGA;AACA;;AAEA;AAwBA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAGA;AAuBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;;;AAGA;AACA;AACA;AACA;AAFA;AAGA;AA0EA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;;;AAGA;AACA;AACA;AACA;AAFA;AAGA;AAkCA;AACA;AAAA;AACA;AACA;AACA;AAMA;AAPA;AAQA;;;AAGA;AACA;AACA;AAMA;AAPA;AAQA;;;;;;;;;;;;;;AC3OA;;;AAGA;AACA;;AAEA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;;;;;ACrCA;;;AAGA;AACA;;AAEA;AAEA;AAEA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAGA;AAiBA;;;;;AAKA;AACA;AAMA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA1UA;;;;;;;;;;;;;;ACzDA;;;AAGA;AACA;;AAEA;AACA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AC/BA;;;AAGA;AACA;;AAGA;AA0EA;;;;AAIA;AACA;AAOA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AA9BA;AACA;AAEA;AACA;AALA;;;;;;;;;;;;;;ACtFA;;;AAGA;AACA;;AAQA;;;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA6BA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;AChDA;;;AAGA;AACA;;;;;;;;;;;AAEA;AACA;AAEA;AASA;AA6BA;;;;;;AAMA;AACA;AAWA;AAVA;AA0CA;AACA;AACA;AACA;AAlCA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAnKA;;;;;;;;;;;;;;ACtDA;;;AAGA;AACA;;AAIA;;;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAaA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;AC9CA;;;AAGA;AACA;;AAEA;AAIA;AACA;AACA;AAEA;AAGA;AAEA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAyhMA;;;AAGA;AACA;;AAGA;AA4BA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzDA;;;AAGA;AACA;;AAEA;AACA;AAWA;;;;;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AArDA;;;;;;;;;;;;;;ACxBA;;;AAGA;AACA;;AAEA;AAIA;AA4BA;AACA;AAMA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AA6EA;;;;;AAKA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtGA;AAwGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrRA;;;AAGA;AACA;;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC3BA;;;AAGA;AACA;;AAEA;AAGA;AAsCA;;;AAGA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAkBA;;;;;;;;;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA1GA;AA4GA;;;;;AAKA;AACA;AAIA;;;;;;;;;;AAUA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;AAgDA;;;;AAIA;AACA;AAQA;;;;;;;;;;;;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA;;;;;;;;;;;;;;AC5OA;;;AAGA;AACA;;AAEA;AAKA;AAqBA;;;AAGA;AACA;AAkBA;;;;;;;;;;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAvFA;;;;;;;;;;;;;;ACpCA;;;AAGA;AACA;;AAEA;AAuCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;;;;;;;;;;;;;;AChEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjBA;;;AAGA;AACA;;AAEA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAWA;AAiBA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AA0BA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7OA;;;AAGA;AACA;;AAEA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAGA;;;;;;;;;;;;;;ACxFA;;;AAGA;AACA;;AAEA;AA4DA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAGA;;;;;;;;;;;;;;AC3HA;;;AAGA;AACA;;AAEA;AA6BA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAGA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/IA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAQA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAMA;AACA;AAOA;AAEA;AAQA;AACA;AASA;AACA;AAEA;AAKA;AAAA;AAMA;AACA;AACA;AAIA;AAEA;AAMA;AAAA;AACA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AChJA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjBA;;;AAGA;AACA;;AAoDA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/EA;;;AAGA;AACA;;AA0BA;;;AAGA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC9CA;;;AAGA;AACA;;AAWA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;;;AAGA;AACA;;AA6BA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1CA;;;AAGA;AACA;;AAKA;;;AAGA;AACA;AAAA;AACA;;;;AAIA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;;;;;ACvCA;;;AAGA;AACA;;AAkDA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAoGA;;;;;AAKA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;AC9KA;;;AAGA;AACA;;AA6BA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5CA;;;AAGA;AACA;;AAWA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3BA;;;AAGA;AACA;;AA8BA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACzCA;;;;;;;;;;;ACAA;;;;;A","sourceRoot":""}