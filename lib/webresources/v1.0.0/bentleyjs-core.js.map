{"version":3,"file":"bentleyjs-core.js","sources":["file:///webpack/universalModuleDefinition","file:///D:\\vsts_b\\5\\s\\common\\temp\\node_modules\\.registry.npmjs.org\\process\\0.11.10\\node_modules\\process\\browser.js","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Assert.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\BeEvent.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\BeSQLite.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\BentleyError.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\BentleyLoggerCategory.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\ClientRequestContext.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Compare.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Dictionary.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Disposable.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Id.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\IndexMap.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\JsonUtils.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\LRUMap.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Logger.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\PriorityQueue.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\SortedArray.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\StringUtils.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\Time.ts","file:///D:\\vsts_b\\5\\s\\core\\bentley\\src\\bentleyjs-core.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bentleyjs_core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bentleyjs_core\"] = factory();\n\telse\n\t\troot[\"bentleyjs_core\"] = factory();\n})(this, function() {\nreturn ","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n// @todo Needs to be commented out in a production environment.\n/**\n * Assert by throwing a programmer error.\n * @param condition The result of a boolean expression.\n * @param msg An optional message to include in the thrown exception. Defaults to \"Programmer Error\".\n * @throws Error containing the specified message if condition is false.\n * @note This function should be used to validate conditions that should never realistically occur, or\n * which indicate a misuse of the API which should be eliminated during development.\n * @beta Need strategy for removing assert in production builds\n */\nexport function assert(condition: boolean, msg?: string): void {\n  if (!condition)\n    throw new Error(\"Assert: \" + ((msg !== undefined) ? msg : \"Programmer Error\"));\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Events */\n\n/** A function invoked when a BeEvent is raised.\n * @public\n */\nexport type Listener = (...arg: any[]) => void;\n\nclass EventContext {\n  constructor(public listener: Listener | undefined, public scope: any, public once: boolean) { }\n}\n\n/**\n * Manages a set of *listeners* for a particular event and notifies them when the event is raised.\n * This class is usually instantiated inside of a container class and\n * exposed as a property for others to *subscribe* via [[BeEvent.addListener]].\n * @public\n */\nexport class BeEvent<T extends Listener> {\n  private _listeners: EventContext[] = [];\n  private _insideRaiseEvent: boolean = false;\n\n  /** The number of listeners currently subscribed to the event. */\n  public get numberOfListeners() { return this._listeners.length; }\n\n  /**\n   * Registers a Listener to be executed whenever this event is raised.\n   * @param listener The function to be executed when the event is raised.\n   * @param scope An optional object scope to serve as the 'this' pointer when listener is invoked.\n   * @returns A function that will remove this event listener.\n   * @see [[BeEvent.raiseEvent]], [[BeEvent.removeListener]]\n   */\n  public addListener(listener: T, scope?: any): () => void {\n    this._listeners.push(new EventContext(listener, scope, false));\n    const event = this;\n    return () => { event.removeListener(listener, scope); };\n  }\n\n  /**\n   * Registers a callback function to be executed *only once* when the event is raised.\n   * @param listener The function to be executed once when the event is raised.\n   * @param scope An optional object scope to serve as the `this` pointer in which the listener function will execute.\n   * @returns A function that will remove this event listener.\n   * @see [[BeEvent.raiseEvent]], [[BeEvent.removeListener]]\n   */\n  public addOnce(listener: T, scope?: any): () => void {\n    this._listeners.push(new EventContext(listener, scope, true));\n    const event = this;\n    return () => { event.removeListener(listener, scope); };\n  }\n\n  /**\n   * Un-register a previously registered listener.\n   * @param listener The listener to be unregistered.\n   * @param  scope The scope that was originally passed to addListener.\n   * @returns 'true' if the listener was removed; 'false' if the listener and scope are not registered with the event.\n   * @see [[BeEvent.raiseEvent]], [[BeEvent.addListener]]\n   */\n  public removeListener(listener: T, scope?: any): boolean {\n    const listeners = this._listeners;\n\n    for (let i = 0; i < listeners.length; ++i) {\n      const context = listeners[i];\n      if (context.listener === listener && context.scope === scope) {\n        if (this._insideRaiseEvent) {\n          context.listener = undefined;\n        } else {\n          listeners.splice(i, 1);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Raises the event by calling each registered listener with the supplied arguments.\n   * @param args This method takes any number of parameters and passes them through to the listeners.\n   * @see [[BeEvent.removeListener]], [[BeEvent.addListener]]\n   */\n  public raiseEvent(...args: any[]) {\n    this._insideRaiseEvent = true;\n\n    const listeners = this._listeners;\n    const length = listeners.length;\n    let dropped = false;\n\n    for (let i = 0; i < length; ++i) {\n      const context = listeners[i];\n      if (!context.listener) {\n        dropped = true;\n      } else {\n        context.listener.apply(context.scope, args);\n        if (context.once) {\n          context.listener = undefined;\n          dropped = true;\n        }\n      }\n    }\n\n    // if we had dropped listeners, remove them now\n    if (dropped) {\n      this._listeners = this._listeners.filter((ctx) => ctx.listener !== undefined);\n    }\n\n    this._insideRaiseEvent = false;\n  }\n\n  /** Determine whether this BeEvent has a specified listener registered.\n   * @param listener The listener to check.\n   * @param scope optional scope argument to match call to addListener\n   */\n  public has(listener: T, scope?: any): boolean {\n    for (const ctx of this._listeners) {\n      if (ctx.listener === listener && ctx.scope === scope) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Clear all Listeners from this BeEvent. */\n  public clear(): void { this._listeners.length = 0; }\n}\n\n/** Specialization of BeEvent for Ui events that take a single strongly typed argument.\n * @beta Right name? Right package?\n */\nexport class BeUiEvent<TEventArgs> extends BeEvent<(args: TEventArgs) => void> {\n\n  /** Raises event with single strongly typed argument. */\n  public emit(args: TEventArgs): void { this.raiseEvent(args); }\n}\n\n/**\n * A list of BeEvent objects, accessible by an event name.\n * This class may be used instead of explicitly declaring each BeEvent as a member of a containing class.\n * @beta Is this class used?\n */\nexport class BeEventList<T extends Listener> {\n  private _events: { [name: string]: BeEvent<T> | undefined; } = {};\n\n  /**\n   * Gets the BeEvent associated with a name.\n   * @param name The name of the event.\n   * @note the BeEvent will be created if none existed before this call.\n   */\n  public get(name: string): BeEvent<T> {\n    let event = this._events[name];\n    if (event)\n      return event;\n\n    event = new BeEvent();\n    this._events[name] = event;\n    return event;\n  }\n\n  /**\n   * Removes the BeEvent associated with a name.\n   * @param name The name of the event.\n   */\n  public remove(name: string): void {\n    this._events[name] = undefined;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module BeSQLite */\n\n/** Whether to open a database readonly or writeable.\n * @public\n */\nexport enum OpenMode {\n  Readonly = 0x00000001,\n  ReadWrite = 0x00000002,\n}\n\n/** Values, stored in changesets, that indicate what operation was performed on the database.\n * @public\n */\nexport enum DbOpcode {\n  /** A row was deleted. */\n  Delete = 9,\n  /** A new row was inserted. */\n  Insert = 18,\n  /** Some columns of an existing row were updated. */\n  Update = 23,\n}\n\n/** Values for return codes from BeSQLite functions. Consult SQLite documentation for further explanations.\n * @public\n */\nexport enum DbResult {\n  /** Success */\n  BE_SQLITE_OK = 0,\n  /** SQL error or missing database */\n  BE_SQLITE_ERROR = 1,\n  /** Internal logic error */\n  BE_SQLITE_INTERNAL = 2,\n  /** Access permission denied */\n  BE_SQLITE_PERM = 3,\n  /** Callback routine requested an abort */\n  BE_SQLITE_ABORT = 4,\n  /** The database file is locked */\n  BE_SQLITE_BUSY = 5,\n  /** A table in the database is locked */\n  BE_SQLITE_LOCKED = 6,\n  /** A malloc() failed */\n  BE_SQLITE_NOMEM = 7,\n  /** Attempt to write a readonly database */\n  BE_SQLITE_READONLY = 8,\n  /** Operation terminated by interrupt */\n  BE_SQLITE_INTERRUPT = 9,\n  /** Some kind of disk I/O error occurred */\n  BE_SQLITE_IOERR = 10,\n  /** The database disk image is malformed */\n  BE_SQLITE_CORRUPT = 11,\n  /** NOT USED. Table or record not found */\n  BE_SQLITE_NOTFOUND = 12,\n  /** Insertion failed because database is full or write operation failed because disk is full */\n  BE_SQLITE_FULL = 13,\n  /** Unable to open the database file */\n  BE_SQLITE_CANTOPEN = 14,\n  /** Database lock protocol error */\n  BE_SQLITE_PROTOCOL = 15,\n  /** Database is empty */\n  BE_SQLITE_EMPTY = 16,\n  /** The database schema changed */\n  BE_SQLITE_SCHEMA = 17,\n  /** String or BLOB exceeds size limit */\n  BE_SQLITE_TOOBIG = 18,\n  /** Abort due to constraint violation. See extended error values. */\n  BE_SQLITE_CONSTRAINT_BASE = 19,\n  /** Data type mismatch */\n  BE_SQLITE_MISMATCH = 20,\n  /** Library used incorrectly */\n  BE_SQLITE_MISUSE = 21,\n  /** Uses OS features not supported on host */\n  BE_SQLITE_NOLFS = 22,\n  /** Authorization denied */\n  BE_SQLITE_AUTH = 23,\n  /** Auxiliary database format error */\n  BE_SQLITE_FORMAT = 24,\n  /** 2nd parameter to Bind out of range */\n  BE_SQLITE_RANGE = 25,\n  /** File opened that is not a database file */\n  BE_SQLITE_NOTADB = 26,\n  /** Step() has another row ready */\n  BE_SQLITE_ROW = 100,\n  /** Step() has finished executing */\n  BE_SQLITE_DONE = 101,\n\n  BE_SQLITE_IOERR_READ = (BE_SQLITE_IOERR | (1 << 8)),\n  BE_SQLITE_IOERR_SHORT_READ = (BE_SQLITE_IOERR | (2 << 8)),\n  BE_SQLITE_IOERR_WRITE = (BE_SQLITE_IOERR | (3 << 8)),\n  BE_SQLITE_IOERR_FSYNC = (BE_SQLITE_IOERR | (4 << 8)),\n  BE_SQLITE_IOERR_DIR_FSYNC = (BE_SQLITE_IOERR | (5 << 8)),\n  BE_SQLITE_IOERR_TRUNCATE = (BE_SQLITE_IOERR | (6 << 8)),\n  BE_SQLITE_IOERR_FSTAT = (BE_SQLITE_IOERR | (7 << 8)),\n  BE_SQLITE_IOERR_UNLOCK = (BE_SQLITE_IOERR | (8 << 8)),\n  BE_SQLITE_IOERR_RDLOCK = (BE_SQLITE_IOERR | (9 << 8)),\n  BE_SQLITE_IOERR_DELETE = (BE_SQLITE_IOERR | (10 << 8)),\n  BE_SQLITE_IOERR_BLOCKED = (BE_SQLITE_IOERR | (11 << 8)),\n  BE_SQLITE_IOERR_NOMEM = (BE_SQLITE_IOERR | (12 << 8)),\n  BE_SQLITE_IOERR_ACCESS = (BE_SQLITE_IOERR | (13 << 8)),\n  BE_SQLITE_IOERR_CHECKRESERVEDLOCK = (BE_SQLITE_IOERR | (14 << 8)),\n  BE_SQLITE_IOERR_LOCK = (BE_SQLITE_IOERR | (15 << 8)),\n  BE_SQLITE_IOERR_CLOSE = (BE_SQLITE_IOERR | (16 << 8)),\n  BE_SQLITE_IOERR_DIR_CLOSE = (BE_SQLITE_IOERR | (17 << 8)),\n  BE_SQLITE_IOERR_SHMOPEN = (BE_SQLITE_IOERR | (18 << 8)),\n  BE_SQLITE_IOERR_SHMSIZE = (BE_SQLITE_IOERR | (19 << 8)),\n  BE_SQLITE_IOERR_SHMLOCK = (BE_SQLITE_IOERR | (20 << 8)),\n  BE_SQLITE_IOERR_SHMMAP = (BE_SQLITE_IOERR | (21 << 8)),\n  BE_SQLITE_IOERR_SEEK = (BE_SQLITE_IOERR | (22 << 8)),\n  BE_SQLITE_IOERR_DELETE_NOENT = (BE_SQLITE_IOERR | (23 << 8)),\n\n  /** attempt to create a new file when a file by that name already exists */\n  BE_SQLITE_ERROR_FileExists = (BE_SQLITE_IOERR | (1 << 24)),\n  /** attempt to open a BeSQLite::Db that is already in use somewhere. */\n  BE_SQLITE_ERROR_AlreadyOpen = (BE_SQLITE_IOERR | (2 << 24)),\n  /** attempt to open a BeSQLite::Db that doesn't have a property table. */\n  BE_SQLITE_ERROR_NoPropertyTable = (BE_SQLITE_IOERR | (3 << 24)),\n  /** the database name is not a file. */\n  BE_SQLITE_ERROR_FileNotFound = (BE_SQLITE_IOERR | (4 << 24)),\n  /** there is no transaction active and the database was opened with AllowImplicitTransactions=false */\n  BE_SQLITE_ERROR_NoTxnActive = (BE_SQLITE_IOERR | (5 << 24)),\n  /** wrong BeSQLite profile version */\n  BE_SQLITE_ERROR_BadDbProfile = (BE_SQLITE_IOERR | (6 << 24)),\n  /** Profile of file could not be determined. */\n  BE_SQLITE_ERROR_InvalidProfileVersion = (BE_SQLITE_IOERR | (7 << 24)),\n  /** Upgrade of profile of file failed. */\n  BE_SQLITE_ERROR_ProfileUpgradeFailed = (BE_SQLITE_IOERR | (8 << 24)),\n  /** Profile of file is too old. Therefore file can only be opened read-only. */\n  BE_SQLITE_ERROR_ProfileTooOldForReadWrite = (BE_SQLITE_IOERR | (9 << 24)),\n  /** Profile of file is too old. Therefore file cannot be opened. */\n  BE_SQLITE_ERROR_ProfileTooOld = (BE_SQLITE_IOERR | (10 << 24)),\n  /** Profile of file is too new for read-write access. Therefore file can only be opened read-only. */\n  BE_SQLITE_ERROR_ProfileTooNewForReadWrite = (BE_SQLITE_IOERR | (11 << 24)),\n  /** Profile of file is too new. Therefore file cannot be opened. */\n  BE_SQLITE_ERROR_ProfileTooNew = (BE_SQLITE_IOERR | (12 << 24)),\n  /** attempt to commit with active changetrack */\n  BE_SQLITE_ERROR_ChangeTrackError = (BE_SQLITE_IOERR | (13 << 24)),\n  /** invalid version of the revision file is being imported */\n  BE_SQLITE_ERROR_InvalidChangeSetVersion = (BE_SQLITE_IOERR | (14 << 24)),\n  /** The schemas found in the database need to be upgraded. */\n  BE_SQLITE_ERROR_SchemaUpgradeRequired = (BE_SQLITE_IOERR | 15 << 24),\n  /** The schemas found in the database are too new, and the application needs to be upgraded. */\n  BE_SQLITE_ERROR_SchemaTooNew = (BE_SQLITE_IOERR | 16 << 24),\n  /** The schemas found in the database are too old, and the DgnDb needs to be upgraded. */\n  BE_SQLITE_ERROR_SchemaTooOld = (BE_SQLITE_IOERR | 17 << 24),\n  /** Error acquiring a lock on the schemas before upgrade. */\n  BE_SQLITE_ERROR_SchemaLockFailed = (BE_SQLITE_IOERR | 18 << 24),\n  /** Error upgrading the schemas in the database. */\n  BE_SQLITE_ERROR_SchemaUpgradeFailed = (BE_SQLITE_IOERR | 19 << 24),\n  /** Error importing the schemas into the database. */\n  BE_SQLITE_ERROR_SchemaImportFailed = (BE_SQLITE_IOERR | 20 << 24),\n  /** Error acquiring locks or codes */\n  BE_SQLITE_ERROR_CouldNotAcquireLocksOrCodes = (BE_SQLITE_IOERR | 21 << 24),\n\n  BE_SQLITE_LOCKED_SHAREDCACHE = (BE_SQLITE_LOCKED | (1 << 8)),\n  BE_SQLITE_BUSY_RECOVERY = (BE_SQLITE_BUSY | (1 << 8)),\n  BE_SQLITE_CANTOPEN_NOTEMPDIR = (BE_SQLITE_CANTOPEN | (1 << 8)),\n  BE_SQLITE_CANTOPEN_ISDIR = (BE_SQLITE_CANTOPEN | (2 << 8)),\n  BE_SQLITE_CANTOPEN_FULLPATH = (BE_SQLITE_CANTOPEN | (3 << 8)),\n  BE_SQLITE_CORRUPT_VTAB = (BE_SQLITE_CORRUPT | (1 << 8)),\n  BE_SQLITE_READONLY_RECOVERY = (BE_SQLITE_READONLY | (1 << 8)),\n  BE_SQLITE_READONLY_CANTLOCK = (BE_SQLITE_READONLY | (2 << 8)),\n  BE_SQLITE_READONLY_ROLLBACK = (BE_SQLITE_READONLY | (3 << 8)),\n  BE_SQLITE_ABORT_ROLLBACK = (BE_SQLITE_ABORT | (2 << 8)),\n  BE_SQLITE_CONSTRAINT_CHECK = (BE_SQLITE_CONSTRAINT_BASE | (1 << 8)),\n  BE_SQLITE_CONSTRAINT_COMMITHOOK = (BE_SQLITE_CONSTRAINT_BASE | (2 << 8)),\n  BE_SQLITE_CONSTRAINT_FOREIGNKEY = (BE_SQLITE_CONSTRAINT_BASE | (3 << 8)),\n  BE_SQLITE_CONSTRAINT_FUNCTION = (BE_SQLITE_CONSTRAINT_BASE | (4 << 8)),\n  BE_SQLITE_CONSTRAINT_NOTNULL = (BE_SQLITE_CONSTRAINT_BASE | (5 << 8)),\n  BE_SQLITE_CONSTRAINT_PRIMARYKEY = (BE_SQLITE_CONSTRAINT_BASE | (6 << 8)),\n  BE_SQLITE_CONSTRAINT_TRIGGER = (BE_SQLITE_CONSTRAINT_BASE | (7 << 8)),\n  BE_SQLITE_CONSTRAINT_UNIQUE = (BE_SQLITE_CONSTRAINT_BASE | (8 << 8)),\n  BE_SQLITE_CONSTRAINT_VTAB = (BE_SQLITE_CONSTRAINT_BASE | (9 << 8)),\n}\n\n/** Options that specify how to apply ChangeSets.\n * @public\n */\nexport enum ChangeSetApplyOption {\n  /** ChangeSet won't be used.  */\n  None = 0,\n  /** ChangeSet will be merged into the Db */\n  Merge,\n  /** ChangeSet will be reversed from the Db */\n  Reverse,\n  /** ChangeSet will be reinstated into the Db */\n  Reinstate,\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Errors */\n\nimport { DbResult } from \"./BeSQLite\";\nimport { LogFunction, Logger } from \"./Logger\";\n\n/** Standard status code.\n * This status code should be rarely used.\n * Prefer to throw an exception to indicate an error, rather than returning a special status code.\n * If a status code is to be returned, prefer to return a more specific error status type such as IModelStatus or DbResult.\n * @public\n */\nexport enum BentleyStatus {\n  SUCCESS = 0x0000,\n  ERROR = 0x8000,\n}\n\n/** Status codes that are used in conjunction with [[BentleyError]].\n * Error status codes are divided into separate ranges for different kinds of errors. All known ranges at least should be defined here, to avoid collisions.\n * @public\n */\nexport enum IModelStatus {\n  IMODEL_ERROR_BASE = 0x10000,\n  Success = 0,\n  AlreadyLoaded = IMODEL_ERROR_BASE + 1,\n  AlreadyOpen = IMODEL_ERROR_BASE + 2,\n  BadArg = IMODEL_ERROR_BASE + 3,\n  BadElement = IMODEL_ERROR_BASE + 4,\n  BadModel = IMODEL_ERROR_BASE + 5,\n  BadRequest = IMODEL_ERROR_BASE + 6,\n  BadSchema = IMODEL_ERROR_BASE + 7,\n  CannotUndo = IMODEL_ERROR_BASE + 8,\n  CodeNotReserved = IMODEL_ERROR_BASE + 9,\n  DeletionProhibited = IMODEL_ERROR_BASE + 10,\n  DuplicateCode = IMODEL_ERROR_BASE + 11,\n  DuplicateName = IMODEL_ERROR_BASE + 12,\n  ElementBlockedChange = IMODEL_ERROR_BASE + 13,\n  FileAlreadyExists = IMODEL_ERROR_BASE + 14,\n  FileNotFound = IMODEL_ERROR_BASE + 15,\n  FileNotLoaded = IMODEL_ERROR_BASE + 16,\n  ForeignKeyConstraint = IMODEL_ERROR_BASE + 17,\n  IdExists = IMODEL_ERROR_BASE + 18,\n  InDynamicTransaction = IMODEL_ERROR_BASE + 19,\n  InvalidCategory = IMODEL_ERROR_BASE + 20,\n  InvalidCode = IMODEL_ERROR_BASE + 21,\n  InvalidCodeSpec = IMODEL_ERROR_BASE + 22,\n  InvalidId = IMODEL_ERROR_BASE + 23,\n  InvalidName = IMODEL_ERROR_BASE + 24,\n  InvalidParent = IMODEL_ERROR_BASE + 25,\n  InvalidProfileVersion = IMODEL_ERROR_BASE + 26,\n  IsCreatingChangeSet = IMODEL_ERROR_BASE + 27,\n  LockNotHeld = IMODEL_ERROR_BASE + 28,\n  Mismatch2d3d = IMODEL_ERROR_BASE + 29,\n  MismatchGcs = IMODEL_ERROR_BASE + 30,\n  MissingDomain = IMODEL_ERROR_BASE + 31,\n  MissingHandler = IMODEL_ERROR_BASE + 32,\n  MissingId = IMODEL_ERROR_BASE + 33,\n  NoGeometry = IMODEL_ERROR_BASE + 34,\n  NoMultiTxnOperation = IMODEL_ERROR_BASE + 35,\n  NotDgnMarkupProject = IMODEL_ERROR_BASE + 36,\n  NotEnabled = IMODEL_ERROR_BASE + 37,\n  NotFound = IMODEL_ERROR_BASE + 38,\n  NotOpen = IMODEL_ERROR_BASE + 39,\n  NotOpenForWrite = IMODEL_ERROR_BASE + 40,\n  NotSameUnitBase = IMODEL_ERROR_BASE + 41,\n  NothingToRedo = IMODEL_ERROR_BASE + 42,\n  NothingToUndo = IMODEL_ERROR_BASE + 43,\n  ParentBlockedChange = IMODEL_ERROR_BASE + 44,\n  ReadError = IMODEL_ERROR_BASE + 45,\n  ReadOnly = IMODEL_ERROR_BASE + 46,\n  ReadOnlyDomain = IMODEL_ERROR_BASE + 47,\n  RepositoryManagerError = IMODEL_ERROR_BASE + 48,\n  SQLiteError = IMODEL_ERROR_BASE + 49,\n  TransactionActive = IMODEL_ERROR_BASE + 50,\n  UnitsMissing = IMODEL_ERROR_BASE + 51,\n  UnknownFormat = IMODEL_ERROR_BASE + 52,\n  UpgradeFailed = IMODEL_ERROR_BASE + 53,\n  ValidationFailed = IMODEL_ERROR_BASE + 54,\n  VersionTooNew = IMODEL_ERROR_BASE + 55,\n  VersionTooOld = IMODEL_ERROR_BASE + 56,\n  ViewNotFound = IMODEL_ERROR_BASE + 57,\n  WriteError = IMODEL_ERROR_BASE + 58,\n  WrongClass = IMODEL_ERROR_BASE + 59,\n  WrongIModel = IMODEL_ERROR_BASE + 60,\n  WrongDomain = IMODEL_ERROR_BASE + 61,\n  WrongElement = IMODEL_ERROR_BASE + 62,\n  WrongHandler = IMODEL_ERROR_BASE + 63,\n  WrongModel = IMODEL_ERROR_BASE + 64,\n  ConstraintNotUnique = IMODEL_ERROR_BASE + 65,\n  NoGeoLocation = IMODEL_ERROR_BASE + 66,\n  ServerTimeout = IMODEL_ERROR_BASE + 67,\n}\n\n/** Error status from various briefcase operations\n * @beta Should these be internal?\n */\nexport enum BriefcaseStatus {\n  CannotAcquire = 0x20000,\n  CannotDownload = 0x20001,\n  CannotUpload = 0x20002,\n  CannotCopy = 0x20003,\n  CannotDelete = 0x20004,\n  VersionNotFound = 0x20005,\n  CannotApplyChanges = 0x20006,\n}\n\n/** RpcInterface status codes\n * @beta Should these be internal?\n */\nexport enum RpcInterfaceStatus {\n  Success = 0,\n  RPC_INTERFACE_ERROR_BASE = 0x21000,\n  /** The RpcInterface implemented by the server is incompatible with the interface requested by the client. */\n  IncompatibleVersion = RPC_INTERFACE_ERROR_BASE,\n}\n\n/** Error status from various ChangeSet operations\n * @beta Should these be internal?\n */\nexport enum ChangeSetStatus { // Note: Values must be kept in sync with ChangeSetStatus in DgnPlatform\n  Success = 0,\n  CHANGESET_ERROR_BASE = 0x16000,\n  /** Error applying a change set when reversing or reinstating it */\n  ApplyError = CHANGESET_ERROR_BASE + 1,\n  /** Change tracking has not been enabled. The ChangeSet API mandates this. */\n  ChangeTrackingNotEnabled = CHANGESET_ERROR_BASE + 2,\n  /** Contents of the change stream are corrupted and does not match the ChangeSet */\n  CorruptedChangeStream = CHANGESET_ERROR_BASE + 3,\n  /** File containing the changes to the change set is not found */\n  FileNotFound = CHANGESET_ERROR_BASE + 4,\n  /** Error writing the contents of the change set to the backing change stream file */\n  FileWriteError = CHANGESET_ERROR_BASE + 5,\n  /**  Cannot perform the operation since the Db has local changes */\n  HasLocalChanges = CHANGESET_ERROR_BASE + 6,\n  /**  Cannot perform the operation since current transaction has uncommitted changes */\n  HasUncommittedChanges = CHANGESET_ERROR_BASE + 7,\n  /**  Invalid ChangeSet Id */\n  InvalidId = CHANGESET_ERROR_BASE + 8,\n  /**  Invalid version of the change set */\n  InvalidVersion = CHANGESET_ERROR_BASE + 9,\n  /** Cannot perform the operation since system is in the middle of a dynamic transaction */\n  InDynamicTransaction = CHANGESET_ERROR_BASE + 10,\n  /** Cannot perform operation since system is in the middle of a creating a change set */\n  IsCreatingChangeSet = CHANGESET_ERROR_BASE + 11,\n  /** Cannot perform operation since the system is not creating a change set */\n  IsNotCreatingChangeSet = CHANGESET_ERROR_BASE + 12,\n  /** Error propagating the changes after the merge */\n  MergePropagationError = CHANGESET_ERROR_BASE + 13,\n  /** No change sets to merge */\n  NothingToMerge = CHANGESET_ERROR_BASE + 14,\n  /** No transactions are available to create a change set */\n  NoTransactions = CHANGESET_ERROR_BASE + 15,\n  /** Parent change set of the Db does not match the parent id of the change set */\n  ParentMismatch = CHANGESET_ERROR_BASE + 16,\n  /** Error performing a SQLite operation on the Db */\n  SQLiteError = CHANGESET_ERROR_BASE + 17,\n  /** ChangeSet originated in a different Db */\n  WrongDgnDb = CHANGESET_ERROR_BASE + 18,\n  /** Could not open the DgnDb to merge change set */\n  CouldNotOpenDgnDb = CHANGESET_ERROR_BASE + 19,\n  /** Cannot merge changes in in an open DgnDb. Close the DgnDb, and process the operation when it is opened. */\n  MergeSchemaChangesOnOpen = CHANGESET_ERROR_BASE + 20,\n  /** Cannot reverse or reinstate schema changes in an open DgnDb. Close the DgnDb, and process the operation when it is opened. */\n  ReverseOrReinstateSchemaChangesOnOpen = CHANGESET_ERROR_BASE + 21,\n  /** Cannot process changes schema changes in an open DgnDb. Close the DgnDb, and process the operation when it is opened. */\n  ProcessSchemaChangesOnOpen = CHANGESET_ERROR_BASE + 22,\n  /** Cannot merge changes into a Readonly DgnDb. */\n  CannotMergeIntoReadonly = CHANGESET_ERROR_BASE + 23,\n  /**  Cannot merge changes into a Master DgnDb. */\n  CannotMergeIntoMaster = CHANGESET_ERROR_BASE + 24,\n  /** Cannot merge changes into a DgnDb that has reversed change sets. */\n  CannotMergeIntoReversed = CHANGESET_ERROR_BASE + 25,\n}\n\n/** Return codes for methods which perform repository management operations\n * @beta Should these be internal?\n */\nexport enum RepositoryStatus {\n  Success = 0,\n  /** The repository server did not respond to a request */\n  ServerUnavailable = 0x15001,\n  /** A requested lock was already held by another briefcase */\n  LockAlreadyHeld = 0x15002,\n  /** Failed to sync briefcase manager with server */\n  SyncError = 0x15003,\n  /** Response from server not understood */\n  InvalidResponse = 0x15004,\n  /** An operation requires local changes to be committed or abandoned */\n  PendingTransactions = 0x15005,\n  /** A lock cannot be relinquished because the associated object has been modified */\n  LockUsed = 0x15006,\n  /** An operation required creation of a ChangeSet, which failed */\n  CannotCreateChangeSet = 0x15007,\n  /** Request to server not understood */\n  InvalidRequest = 0x15008,\n  /** A change set committed to the server must be integrated into the briefcase before the operation can be completed */\n  ChangeSetRequired = 0x15009,\n  /** A requested DgnCode is reserved by another briefcase or in use */\n  CodeUnavailable = 0x1500A,\n  /** A DgnCode cannot be released because it has not been reserved by the requesting briefcase */\n  CodeNotReserved = 0x1500B,\n  /** A DgnCode cannot be relinquished because it has been used locally */\n  CodeUsed = 0x1500C,\n  /** A required lock is not held by this briefcase */\n  LockNotHeld = 0x1500D,\n  /** Repository is currently locked, no changes allowed */\n  RepositoryIsLocked = 0x1500E,\n}\n\n/** Status from returned HTTP status code\n * @beta Should these be internal?\n */\nexport enum HttpStatus {\n  /** 2xx Success */\n  Success = 0,\n  /** 1xx Informational responses */\n  Info = 0x17001,\n  /** 3xx Redirection */\n  Redirection = 0x17002,\n  /** 4xx Client errors */\n  ClientError = 0x17003,\n  /** 5xx Server errors */\n  ServerError = 0x17004,\n}\n\n/** Server returned WSG errors\n * @beta Right name? Right package?\n */\nexport enum WSStatus {\n  Success = 0,\n  WSERROR_BASE = 0x18000,\n  Unknown = WSERROR_BASE + 1,\n  LoginFailed = WSERROR_BASE + 2,\n  SslRequired = WSERROR_BASE + 3,\n  NotEnoughRights = WSERROR_BASE + 4,\n  RepositoryNotFound = WSERROR_BASE + 5,\n  SchemaNotFound = WSERROR_BASE + 6,\n  ClassNotFound = WSERROR_BASE + 7,\n  PropertyNotFound = WSERROR_BASE + 8,\n  InstanceNotFound = WSERROR_BASE + 9,\n  FileNotFound = WSERROR_BASE + 10,\n  NotSupported = WSERROR_BASE + 11,\n  NoServerLicense = WSERROR_BASE + 12,\n  NoClientLicense = WSERROR_BASE + 13,\n  TooManyBadLoginAttempts = WSERROR_BASE + 14,\n  LoginRequired = WSERROR_BASE + 15,\n}\n\n/** iModelHub Services Errors\n * @beta Right package?\n */\nexport enum IModelHubStatus {\n  Success = 0,\n  IMODELHUBERROR_BASE = 0x19000,\n  IMODELHUBERROR_REQUESTERRORBASE = 0x19100,\n  Unknown = IMODELHUBERROR_BASE + 1,\n  MissingRequiredProperties = IMODELHUBERROR_BASE + 2,\n  InvalidPropertiesValues = IMODELHUBERROR_BASE + 3,\n  UserDoesNotHavePermission = IMODELHUBERROR_BASE + 4,\n  UserDoesNotHaveAccess = IMODELHUBERROR_BASE + 5,\n  InvalidBriefcase = IMODELHUBERROR_BASE + 6,\n  BriefcaseDoesNotExist = IMODELHUBERROR_BASE + 7,\n  BriefcaseDoesNotBelongToUser = IMODELHUBERROR_BASE + 8,\n  AnotherUserPushing = IMODELHUBERROR_BASE + 9,\n  ChangeSetAlreadyExists = IMODELHUBERROR_BASE + 10,\n  ChangeSetDoesNotExist = IMODELHUBERROR_BASE + 11,\n  FileIsNotUploaded = IMODELHUBERROR_BASE + 12,\n  iModelIsNotInitialized = IMODELHUBERROR_BASE + 13,\n  ChangeSetPointsToBadSeed = IMODELHUBERROR_BASE + 14,\n  OperationFailed = IMODELHUBERROR_BASE + 15,\n  PullIsRequired = IMODELHUBERROR_BASE + 16,\n  MaximumNumberOfBriefcasesPerUser = IMODELHUBERROR_BASE + 17,\n  MaximumNumberOfBriefcasesPerUserPerMinute = IMODELHUBERROR_BASE + 18,\n  DatabaseTemporarilyLocked = IMODELHUBERROR_BASE + 19,\n  iModelIsLocked = IMODELHUBERROR_BASE + 20,\n  CodesExist = IMODELHUBERROR_BASE + 21,\n  LocksExist = IMODELHUBERROR_BASE + 22,\n  iModelAlreadyExists = IMODELHUBERROR_BASE + 23,\n  iModelDoesNotExist = IMODELHUBERROR_BASE + 24,\n  FileDoesNotExist = IMODELHUBERROR_BASE + 25,\n  FileAlreadyExists = IMODELHUBERROR_BASE + 26,\n  LockDoesNotExist = IMODELHUBERROR_BASE + 27,\n  LockOwnedByAnotherBriefcase = IMODELHUBERROR_BASE + 28,\n  CodeStateInvalid = IMODELHUBERROR_BASE + 29,\n  CodeReservedByAnotherBriefcase = IMODELHUBERROR_BASE + 30,\n  CodeDoesNotExist = IMODELHUBERROR_BASE + 31,\n  EventTypeDoesNotExist = IMODELHUBERROR_BASE + 32,\n  EventSubscriptionDoesNotExist = IMODELHUBERROR_BASE + 33,\n  EventSubscriptionAlreadyExists = IMODELHUBERROR_BASE + 34,\n  ProjectIdIsNotSpecified = IMODELHUBERROR_BASE + 35,\n  FailedToGetProjectPermissions = IMODELHUBERROR_BASE + 36,\n  FailedToGetProjectMembers = IMODELHUBERROR_BASE + 37,\n  ChangeSetAlreadyHasVersion = IMODELHUBERROR_BASE + 38,\n  VersionAlreadyExists = IMODELHUBERROR_BASE + 39,\n  JobSchedulingFailed = IMODELHUBERROR_BASE + 40,\n  ConflictsAggregate = IMODELHUBERROR_BASE + 41,\n  FailedToGetProjectById = IMODELHUBERROR_BASE + 42,\n\n  DatabaseOperationFailed = IMODELHUBERROR_BASE + 43,\n  SeedFileInitializationFailed = IMODELHUBERROR_BASE + 44,\n\n  FailedToGetAssetPermissions = IMODELHUBERROR_BASE + 45,\n  FailedToGetAssetMembers = IMODELHUBERROR_BASE + 46,\n\n  // Errors that are returned for incorrect iModelHub request.\n  UndefinedArgumentError = IMODELHUBERROR_REQUESTERRORBASE + 1,\n  InvalidArgumentError = IMODELHUBERROR_REQUESTERRORBASE + 2,\n  MissingDownloadUrlError = IMODELHUBERROR_REQUESTERRORBASE + 3,\n  NotSupportedInBrowser = IMODELHUBERROR_REQUESTERRORBASE + 4,\n  FileHandlerNotSet = IMODELHUBERROR_REQUESTERRORBASE + 5,\n  FileNotFound = IMODELHUBERROR_REQUESTERRORBASE + 6,\n  InitializationTimeout = IMODELHUBERROR_REQUESTERRORBASE + 7,\n}\n\n/** Authentication Errors\n * @beta Internal? Right package?\n */\nexport enum AuthStatus {\n  Success = 0,\n  AUTHSTATUS_BASE = 0x20000,\n  Error = AUTHSTATUS_BASE,\n}\n\n/** When you want to associate an explanatory message with an error status value.\n * @beta Internal?\n */\nexport interface StatusCodeWithMessage<ErrorCodeType> {\n  status: ErrorCodeType;\n  message: string;\n}\n\n/** Defines the *signature* for a function that returns meta-data related to an error.\n * Declared as a function so that the expense of creating the meta-data is only paid when it is needed.\n * @public\n */\nexport type GetMetaDataFunction = () => any;\n\n/** The error type thrown by this module. `BentleyError` subclasses `Error` to add an `errorNumber` member. See [[IModelStatus]] for `errorNumber` values.\n * @public\n */\nexport class BentleyError extends Error {\n  private readonly _getMetaData: GetMetaDataFunction | undefined;\n  public errorNumber: number;\n\n  /** Construct a new BentleyError\n   * @param errorNumber The required error number originating from one of the standard status enums.\n   * See [[IModelStatus]], [[DbResult]], [[BentleyStatus]], [[BriefcaseStatus]], [[RepositoryStatus]], [[ChangeSetStatus]], [[HttpStatus]], [[WSStatus]], [[IModelHubStatus]]\n   * @param message The optional error message (should not be localized).\n   * @param log The optional LogFunction that should be used to log this BentleyError.\n   * @param category The optional logger category to use when logging.\n   * @param getMetaData Optional data to be passed to the logger.\n   */\n  public constructor(errorNumber: number, message?: string, log?: LogFunction, category?: string, getMetaData?: GetMetaDataFunction) {\n    super(message);\n    this.errorNumber = errorNumber;\n    this._getMetaData = getMetaData;\n    this.name = this._initName();\n    if (log)\n      Logger.logException(category || \"BentleyError\", this, log, this._getMetaData);  // TODO: Can we come up with a better default category?\n  }\n\n  /** Returns true if this BentleyError includes (optional) meta data. */\n  public get hasMetaData(): boolean { return this._getMetaData !== undefined; }\n\n  /** Return the meta data associated with this BentleyError. */\n  public getMetaData(): any {\n    return this.hasMetaData ? this._getMetaData!() : undefined;\n  }\n\n  /** This function returns the name of each error status. Override this method to handle more error status codes. */\n  protected _initName(): string {\n    switch (this.errorNumber) {\n      // IModelStatus cases\n      case IModelStatus.AlreadyLoaded: return \"Already Loaded\";\n      case IModelStatus.AlreadyOpen: return \"Already Open\";\n      case IModelStatus.BadArg: return \"Bad Arg\";\n      case IModelStatus.BadElement: return \"Bad Element\";\n      case IModelStatus.BadModel: return \"Bad Model\";\n      case IModelStatus.BadRequest: return \"Bad Request\";\n      case IModelStatus.BadSchema: return \"Bad Schema\";\n      case IModelStatus.CannotUndo: return \"Can not Undo\";\n      case IModelStatus.CodeNotReserved: return \"Code Not Reserved\";\n      case IModelStatus.DeletionProhibited: return \"Deletion Prohibited\";\n      case IModelStatus.DuplicateCode: return \"Duplicate Code\";\n      case IModelStatus.DuplicateName: return \"Duplicate Name\";\n      case IModelStatus.ElementBlockedChange: return \"Element Blocked Change\";\n      case IModelStatus.FileAlreadyExists: return \"File Already Exists\";\n      case IModelStatus.FileNotFound: return \"File Not Found\";\n      case IModelStatus.FileNotLoaded: return \"File Not Loaded\";\n      case IModelStatus.ForeignKeyConstraint: return \"ForeignKey Constraint\";\n      case IModelStatus.IdExists: return \"Id Exists\";\n      case IModelStatus.InDynamicTransaction: return \"InDynamicTransaction\";\n      case IModelStatus.InvalidCategory: return \"Invalid Category\";\n      case IModelStatus.InvalidCode: return \"Invalid Code\";\n      case IModelStatus.InvalidCodeSpec: return \"Invalid CodeSpec\";\n      case IModelStatus.InvalidId: return \"Invalid Id\";\n      case IModelStatus.InvalidName: return \"Invalid Name\";\n      case IModelStatus.InvalidParent: return \"Invalid Parent\";\n      case IModelStatus.InvalidProfileVersion: return \"Invalid Profile Version\";\n      case IModelStatus.IsCreatingChangeSet: return \"IsCreatingChangeSet\";\n      case IModelStatus.LockNotHeld: return \"Lock Not Held\";\n      case IModelStatus.Mismatch2d3d: return \"Mismatch 2d3d\";\n      case IModelStatus.MismatchGcs: return \"Mismatch Gcs\";\n      case IModelStatus.MissingDomain: return \"Missing Domain\";\n      case IModelStatus.MissingHandler: return \"Missing Handler\";\n      case IModelStatus.MissingId: return \"Missing Id\";\n      case IModelStatus.NoGeometry: return \"No Geometry\";\n      case IModelStatus.NoMultiTxnOperation: return \"NoMultiTxnOperation\";\n      case IModelStatus.NotDgnMarkupProject: return \"NotDgnMarkupProject\";\n      case IModelStatus.NotEnabled: return \"Not Enabled\";\n      case IModelStatus.NotFound: return \"Not Found\";\n      case IModelStatus.NotOpen: return \"Not Open\";\n      case IModelStatus.NotOpenForWrite: return \"Not Open For Write\";\n      case IModelStatus.NotSameUnitBase: return \"Not Same Unit Base\";\n      case IModelStatus.NothingToRedo: return \"Nothing To Redo\";\n      case IModelStatus.NothingToUndo: return \"Nothing To Undo\";\n      case IModelStatus.ParentBlockedChange: return \"Parent Blocked Change\";\n      case IModelStatus.ReadError: return \"Read Error\";\n      case IModelStatus.ReadOnly: return \"ReadOnly\";\n      case IModelStatus.ReadOnlyDomain: return \"ReadOnlyDomain\";\n      case IModelStatus.RepositoryManagerError: return \"RepositoryManagerError\";\n      case IModelStatus.SQLiteError: return \"SQLiteError\";\n      case IModelStatus.TransactionActive: return \"Transaction Active\";\n      case IModelStatus.UnitsMissing: return \"Units Missing\";\n      case IModelStatus.UnknownFormat: return \"Unknown Format\";\n      case IModelStatus.UpgradeFailed: return \"Upgrade Failed\";\n      case IModelStatus.ValidationFailed: return \"Validation Failed\";\n      case IModelStatus.VersionTooNew: return \"Version Too New\";\n      case IModelStatus.VersionTooOld: return \"Version Too Old\";\n      case IModelStatus.ViewNotFound: return \"View Not Found\";\n      case IModelStatus.WriteError: return \"Write Error\";\n      case IModelStatus.WrongClass: return \"Wrong Class\";\n      case IModelStatus.WrongIModel: return \"Wrong IModel\";\n      case IModelStatus.WrongDomain: return \"Wrong Domain\";\n      case IModelStatus.WrongElement: return \"Wrong Element\";\n      case IModelStatus.WrongHandler: return \"Wrong Handler\";\n      case IModelStatus.WrongModel: return \"Wrong Model\";\n\n      // DbResult cases\n      case DbResult.BE_SQLITE_ERROR: return \"BE_SQLITE_ERROR\";\n      case DbResult.BE_SQLITE_INTERNAL: return \"BE_SQLITE_INTERNAL\";\n      case DbResult.BE_SQLITE_PERM: return \"BE_SQLITE_PERM\";\n      case DbResult.BE_SQLITE_ABORT: return \"BE_SQLITE_ABORT\";\n      case DbResult.BE_SQLITE_BUSY: return \"Db is busy\";\n      case DbResult.BE_SQLITE_LOCKED: return \"Db is Locked\";\n      case DbResult.BE_SQLITE_NOMEM: return \"BE_SQLITE_NOMEM\";\n      case DbResult.BE_SQLITE_READONLY: return \"Readonly\";\n      case DbResult.BE_SQLITE_INTERRUPT: return \"BE_SQLITE_INTERRUPT\";\n      case DbResult.BE_SQLITE_IOERR: return \"BE_SQLITE_IOERR\";\n      case DbResult.BE_SQLITE_CORRUPT: return \"BE_SQLITE_CORRUPT\";\n      case DbResult.BE_SQLITE_NOTFOUND: return \"Not Found\";\n      case DbResult.BE_SQLITE_FULL: return \"BE_SQLITE_FULL\";\n      case DbResult.BE_SQLITE_CANTOPEN: return \"Can't open\";\n      case DbResult.BE_SQLITE_PROTOCOL: return \"BE_SQLITE_PROTOCOL\";\n      case DbResult.BE_SQLITE_EMPTY: return \"BE_SQLITE_EMPTY\";\n      case DbResult.BE_SQLITE_SCHEMA: return \"BE_SQLITE_SCHEMA\";\n      case DbResult.BE_SQLITE_TOOBIG: return \"BE_SQLITE_TOOBIG\";\n      case DbResult.BE_SQLITE_MISMATCH: return \"BE_SQLITE_MISMATCH\";\n      case DbResult.BE_SQLITE_MISUSE: return \"BE_SQLITE_MISUSE\";\n      case DbResult.BE_SQLITE_NOLFS: return \"BE_SQLITE_NOLFS\";\n      case DbResult.BE_SQLITE_AUTH: return \"BE_SQLITE_AUTH\";\n      case DbResult.BE_SQLITE_FORMAT: return \"BE_SQLITE_FORMAT\";\n      case DbResult.BE_SQLITE_RANGE: return \"BE_SQLITE_RANGE\";\n      case DbResult.BE_SQLITE_NOTADB: return \"Not a Database\";\n      case DbResult.BE_SQLITE_IOERR_READ: return \"BE_SQLITE_IOERR_READ\";\n      case DbResult.BE_SQLITE_IOERR_SHORT_READ: return \"BE_SQLITE_IOERR_SHORT_READ\";\n      case DbResult.BE_SQLITE_IOERR_WRITE: return \"BE_SQLITE_IOERR_WRITE\";\n      case DbResult.BE_SQLITE_IOERR_FSYNC: return \"BE_SQLITE_IOERR_FSYNC\";\n      case DbResult.BE_SQLITE_IOERR_DIR_FSYNC: return \"BE_SQLITE_IOERR_DIR_FSYNC\";\n      case DbResult.BE_SQLITE_IOERR_TRUNCATE: return \"BE_SQLITE_IOERR_TRUNCATE\";\n      case DbResult.BE_SQLITE_IOERR_FSTAT: return \"BE_SQLITE_IOERR_FSTAT\";\n      case DbResult.BE_SQLITE_IOERR_UNLOCK: return \"BE_SQLITE_IOERR_UNLOCK\";\n      case DbResult.BE_SQLITE_IOERR_RDLOCK: return \"BE_SQLITE_IOERR_RDLOCK\";\n      case DbResult.BE_SQLITE_IOERR_DELETE: return \"BE_SQLITE_IOERR_DELETE\";\n      case DbResult.BE_SQLITE_IOERR_BLOCKED: return \"BE_SQLITE_IOERR_BLOCKED\";\n      case DbResult.BE_SQLITE_IOERR_NOMEM: return \"BE_SQLITE_IOERR_NOMEM\";\n      case DbResult.BE_SQLITE_IOERR_ACCESS: return \"BE_SQLITE_IOERR_ACCESS\";\n      case DbResult.BE_SQLITE_IOERR_CHECKRESERVEDLOCK: return \"BE_SQLITE_IOERR_CHECKRESERVEDLOCK\";\n      case DbResult.BE_SQLITE_IOERR_LOCK: return \"BE_SQLITE_IOERR_LOCK\";\n      case DbResult.BE_SQLITE_IOERR_CLOSE: return \"BE_SQLITE_IOERR_CLOSE\";\n      case DbResult.BE_SQLITE_IOERR_DIR_CLOSE: return \"BE_SQLITE_IOERR_DIR_CLOSE\";\n      case DbResult.BE_SQLITE_IOERR_SHMOPEN: return \"BE_SQLITE_IOERR_SHMOPEN\";\n      case DbResult.BE_SQLITE_IOERR_SHMSIZE: return \"BE_SQLITE_IOERR_SHMSIZE\";\n      case DbResult.BE_SQLITE_IOERR_SHMLOCK: return \"BE_SQLITE_IOERR_SHMLOCK\";\n      case DbResult.BE_SQLITE_IOERR_SHMMAP: return \"BE_SQLITE_IOERR_SHMMAP\";\n      case DbResult.BE_SQLITE_IOERR_SEEK: return \"BE_SQLITE_IOERR_SEEK\";\n      case DbResult.BE_SQLITE_IOERR_DELETE_NOENT: return \"BE_SQLITE_IOERR_DELETE_NOENT\";\n      case DbResult.BE_SQLITE_ERROR_FileExists: return \"File Exists\";\n      case DbResult.BE_SQLITE_ERROR_AlreadyOpen: return \"Already Open\";\n      case DbResult.BE_SQLITE_ERROR_NoPropertyTable: return \"No Property Table\";\n      case DbResult.BE_SQLITE_ERROR_FileNotFound: return \"File Not Found\";\n      case DbResult.BE_SQLITE_ERROR_NoTxnActive: return \"No Txn Active\";\n      case DbResult.BE_SQLITE_ERROR_BadDbProfile: return \"Bad Db Profile\";\n      case DbResult.BE_SQLITE_ERROR_InvalidProfileVersion: return \"Invalid Profile Version\";\n      case DbResult.BE_SQLITE_ERROR_ProfileUpgradeFailed: return \"Profile Upgrade Failed\";\n      case DbResult.BE_SQLITE_ERROR_ProfileTooOldForReadWrite: return \"Profile Too Old For ReadWrite\";\n      case DbResult.BE_SQLITE_ERROR_ProfileTooOld: return \"Profile Too Old\";\n      case DbResult.BE_SQLITE_ERROR_ProfileTooNewForReadWrite: return \"Profile Too New For ReadWrite\";\n      case DbResult.BE_SQLITE_ERROR_ProfileTooNew: return \"Profile Too New\";\n      case DbResult.BE_SQLITE_ERROR_ChangeTrackError: return \"ChangeTrack Error\";\n      case DbResult.BE_SQLITE_ERROR_InvalidChangeSetVersion: return \"Invalid ChangeSet Version\";\n      case DbResult.BE_SQLITE_ERROR_SchemaUpgradeRequired: return \"Schema Upgrade Required\";\n      case DbResult.BE_SQLITE_ERROR_SchemaTooNew: return \"Schema Too New\";\n      case DbResult.BE_SQLITE_ERROR_SchemaTooOld: return \"Schema Too Old\";\n      case DbResult.BE_SQLITE_ERROR_SchemaLockFailed: return \"Schema Lock Failed\";\n      case DbResult.BE_SQLITE_ERROR_SchemaUpgradeFailed: return \"Schema Upgrade Failed\";\n      case DbResult.BE_SQLITE_ERROR_SchemaImportFailed: return \"Schema Import Failed\";\n      case DbResult.BE_SQLITE_ERROR_CouldNotAcquireLocksOrCodes: return \"Could Not Acquire Locks Or Codes\";\n      case DbResult.BE_SQLITE_LOCKED_SHAREDCACHE: return \"BE_SQLITE_LOCKED_SHAREDCACHE\";\n      case DbResult.BE_SQLITE_BUSY_RECOVERY: return \"BE_SQLITE_BUSY_RECOVERY\";\n      case DbResult.BE_SQLITE_CANTOPEN_NOTEMPDIR: return \"SQLite No Temp Dir\";\n      case DbResult.BE_SQLITE_CANTOPEN_ISDIR: return \"BE_SQLITE_CANTOPEN_ISDIR\";\n      case DbResult.BE_SQLITE_CANTOPEN_FULLPATH: return \"BE_SQLITE_CANTOPEN_FULLPATH\";\n      case DbResult.BE_SQLITE_CORRUPT_VTAB: return \"BE_SQLITE_CORRUPT_VTAB\";\n      case DbResult.BE_SQLITE_READONLY_RECOVERY: return \"BE_SQLITE_READONLY_RECOVERY\";\n      case DbResult.BE_SQLITE_READONLY_CANTLOCK: return \"BE_SQLITE_READONLY_CANTLOCK\";\n      case DbResult.BE_SQLITE_READONLY_ROLLBACK: return \"BE_SQLITE_READONLY_ROLLBACK\";\n      case DbResult.BE_SQLITE_ABORT_ROLLBACK: return \"BE_SQLITE_ABORT_ROLLBACK\";\n      case DbResult.BE_SQLITE_CONSTRAINT_CHECK: return \"BE_SQLITE_CONSTRAINT_CHECK\";\n      case DbResult.BE_SQLITE_CONSTRAINT_COMMITHOOK: return \"CommitHook Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_FOREIGNKEY: return \"Foreign Key Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_FUNCTION: return \"Function Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_NOTNULL: return \"NotNull Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_PRIMARYKEY: return \"Primary Key Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_TRIGGER: return \"Trigger Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_UNIQUE: return \"Unique Constraint Error\";\n      case DbResult.BE_SQLITE_CONSTRAINT_VTAB: return \"VTable Constraint Error\";\n\n      // BentleyStatus cases\n      case BentleyStatus.ERROR: return \"Error\";\n\n      // BriefcaseStatus\n      case BriefcaseStatus.CannotAcquire: return \"CannotAcquire\";\n      case BriefcaseStatus.CannotDownload: return \"CannotDownload\";\n      case BriefcaseStatus.CannotCopy: return \"CannotCopy\";\n      case BriefcaseStatus.CannotDelete: return \"CannotDelete\";\n      case BriefcaseStatus.VersionNotFound: return \"VersionNotFound\";\n\n      // RpcInterface\n      case RpcInterfaceStatus.IncompatibleVersion: return \"RpcInterfaceStatus.IncompatibleVersion\";\n\n      // ChangeSetStatus\n      case ChangeSetStatus.ApplyError: return \"Error applying a change set when reversing or reinstating it\";\n      case ChangeSetStatus.ChangeTrackingNotEnabled: return \"Change tracking has not been enabled. The ChangeSet API mandates this\";\n      case ChangeSetStatus.CorruptedChangeStream: return \"Contents of the change stream are corrupted and does not match the ChangeSet\";\n      case ChangeSetStatus.FileNotFound: return \"File containing the changes was not found\";\n      case ChangeSetStatus.FileWriteError: return \"Error writing the contents of the change set to the backing change stream file\";\n      case ChangeSetStatus.HasLocalChanges: return \"Cannot perform the operation since the Db has local changes\";\n      case ChangeSetStatus.HasUncommittedChanges: return \"Cannot perform the operation since current transaction has uncommitted changes\";\n      case ChangeSetStatus.InvalidId: return \"Invalid ChangeSet Id\";\n      case ChangeSetStatus.InvalidVersion: return \"Invalid version of the change set\";\n      case ChangeSetStatus.InDynamicTransaction: return \"Cannot perform the operation since system is in the middle of a dynamic transaction\";\n      case ChangeSetStatus.IsCreatingChangeSet: return \"Cannot perform operation since system is in the middle of a creating a change set\";\n      case ChangeSetStatus.IsNotCreatingChangeSet: return \"Cannot perform operation since the system is not creating a change set\";\n      case ChangeSetStatus.MergePropagationError: return \"Error propagating the changes after the merge\";\n      case ChangeSetStatus.NothingToMerge: return \"No change sets to merge\";\n      case ChangeSetStatus.NoTransactions: return \"No transactions are available to create a change set\";\n      case ChangeSetStatus.ParentMismatch: return \"Parent change set of the Db does not match the parent id of the change set\";\n      case ChangeSetStatus.SQLiteError: return \"Error performing a SQLite operation on the Db\";\n      case ChangeSetStatus.WrongDgnDb: return \"ChangeSet originated in a different Db\";\n      case ChangeSetStatus.CouldNotOpenDgnDb: return \"Could not open the DgnDb to merge change set\";\n      case ChangeSetStatus.MergeSchemaChangesOnOpen: return \"Cannot merge changes in in an open DgnDb. Close the DgnDb, and process the operation when it is opened\";\n      case ChangeSetStatus.ReverseOrReinstateSchemaChangesOnOpen: return \"Cannot reverse or reinstate schema changes in an open DgnDb. Close the DgnDb, and process the operation when it is opened\";\n      case ChangeSetStatus.ProcessSchemaChangesOnOpen: return \"Cannot process changes schema changes in an open DgnDb. Close the DgnDb, and process the operation when it is opened\";\n      case ChangeSetStatus.CannotMergeIntoReadonly: return \"Cannot merge changes into a Readonly DgnDb\";\n      case ChangeSetStatus.CannotMergeIntoMaster: return \"Cannot merge changes into a Master DgnDb\";\n      case ChangeSetStatus.CannotMergeIntoReversed: return \"Cannot merge changes into a DgnDb that has reversed change sets\";\n\n      // RepositoryStatus\n      case RepositoryStatus.ServerUnavailable: return \"ServerUnavailable\";\n      case RepositoryStatus.LockAlreadyHeld: return \"LockAlreadyHeld\";\n      case RepositoryStatus.SyncError: return \"SyncError\";\n      case RepositoryStatus.InvalidResponse: return \"InvalidResponse\";\n      case RepositoryStatus.PendingTransactions: return \"PendingTransactions\";\n      case RepositoryStatus.LockUsed: return \"LockUsed\";\n      case RepositoryStatus.CannotCreateChangeSet: return \"CannotCreateChangeSet\";\n      case RepositoryStatus.InvalidRequest: return \"InvalidRequest\";\n      case RepositoryStatus.ChangeSetRequired: return \"ChangeSetRequired\";\n      case RepositoryStatus.CodeUnavailable: return \"CodeUnavailable\";\n      case RepositoryStatus.CodeNotReserved: return \"CodeNotReserved\";\n      case RepositoryStatus.CodeUsed: return \"CodeUsed\";\n      case RepositoryStatus.LockNotHeld: return \"LockNotHeld\";\n      case RepositoryStatus.RepositoryIsLocked: return \"RepositoryIsLocked\";\n\n      // HTTP Status\n      case HttpStatus.Info: return \"HTTP Info\";\n      case HttpStatus.Redirection: return \"HTTP Redirection\";\n      case HttpStatus.ClientError: return \"HTTP Client error\";\n      case HttpStatus.ServerError: return \"HTTP Server error\";\n\n      // WSStatus\n      case WSStatus.Unknown: return \"Unknown error\";\n      case WSStatus.ClassNotFound: return \"Class not found\";\n      case WSStatus.FileNotFound: return \"File not found\";\n      case WSStatus.InstanceNotFound: return \"Instance not found\";\n      case WSStatus.LoginFailed: return \"Login failed\";\n      case WSStatus.NoClientLicense: return \"No client license\";\n      case WSStatus.NoServerLicense: return \"No server license\";\n      case WSStatus.NotEnoughRights: return \"Not enough rights\";\n      case WSStatus.NotSupported: return \"Not supported\";\n      case WSStatus.PropertyNotFound: return \"Property not found\";\n      case WSStatus.RepositoryNotFound: return \"Repository not found\";\n      case WSStatus.SchemaNotFound: return \"Schema not found\";\n      case WSStatus.SslRequired: return \"SSL required\";\n      case WSStatus.TooManyBadLoginAttempts: return \"Too many bad login attempts\";\n\n      // IModelHubStatus\n      case IModelHubStatus.Unknown: return \"Unknown error\";\n      case IModelHubStatus.MissingRequiredProperties: return \"Missing required properties\";\n      case IModelHubStatus.InvalidPropertiesValues: return \"Invalid properties values\";\n      case IModelHubStatus.UserDoesNotHavePermission: return \"User does not have permission\";\n      case IModelHubStatus.UserDoesNotHaveAccess: return \"User does not have access\";\n      case IModelHubStatus.InvalidBriefcase: return \"Invalid briefcase\";\n      case IModelHubStatus.BriefcaseDoesNotExist: return \"Briefcase does not exist\";\n      case IModelHubStatus.BriefcaseDoesNotBelongToUser: return \"Briefcase does not belong to user\";\n      case IModelHubStatus.AnotherUserPushing: return \"Another user pushing\";\n      case IModelHubStatus.ChangeSetAlreadyExists: return \"ChangeSet already exists\";\n      case IModelHubStatus.ChangeSetDoesNotExist: return \"ChangeSet does not exist\";\n      case IModelHubStatus.FileIsNotUploaded: return \"File is not uploaded\";\n      case IModelHubStatus.iModelIsNotInitialized: return \"iModel is not initialized\";\n      case IModelHubStatus.ChangeSetPointsToBadSeed: return \"ChangeSet points to a bad seed file\";\n      case IModelHubStatus.OperationFailed: return \"iModelHub operation has failed\";\n      case IModelHubStatus.PullIsRequired: return \"Pull is required\";\n      case IModelHubStatus.MaximumNumberOfBriefcasesPerUser: return \"Limit of briefcases per user was reached\";\n      case IModelHubStatus.MaximumNumberOfBriefcasesPerUserPerMinute: return \"Limit of briefcases per user per minute was reached\";\n      case IModelHubStatus.DatabaseTemporarilyLocked: return \"Database is temporarily locked\";\n      case IModelHubStatus.iModelIsLocked: return \"iModel is locked\";\n      case IModelHubStatus.CodesExist: return \"Code already exists\";\n      case IModelHubStatus.LocksExist: return \"Lock already exists\";\n      case IModelHubStatus.iModelAlreadyExists: return \"iModel already exists\";\n      case IModelHubStatus.iModelDoesNotExist: return \"iModel does not exist\";\n      case IModelHubStatus.LockDoesNotExist: return \"Lock does not exist\";\n      case IModelHubStatus.LockOwnedByAnotherBriefcase: return \"Lock is owned by another briefcase\";\n      case IModelHubStatus.CodeStateInvalid: return \"Code state is invalid\";\n      case IModelHubStatus.CodeReservedByAnotherBriefcase: return \"Code is reserved by another briefcase\";\n      case IModelHubStatus.CodeDoesNotExist: return \"Code does not exist\";\n      case IModelHubStatus.FileDoesNotExist: return \"File does not exist\";\n      case IModelHubStatus.FileAlreadyExists: return \"File already exists\";\n      case IModelHubStatus.EventTypeDoesNotExist: return \"Event type does not exist\";\n      case IModelHubStatus.EventSubscriptionDoesNotExist: return \"Event subscription does not exist\";\n      case IModelHubStatus.EventSubscriptionAlreadyExists: return \"Event subscription already exists\";\n      case IModelHubStatus.ProjectIdIsNotSpecified: return \"Project Id is not specified\";\n      case IModelHubStatus.FailedToGetProjectPermissions: return \"Failed to get project permissions\";\n      case IModelHubStatus.FailedToGetProjectMembers: return \"Failed to get project members\";\n      case IModelHubStatus.FailedToGetAssetPermissions: return \"Failed to get asset permissions\";\n      case IModelHubStatus.FailedToGetAssetMembers: return \"Failed to get asset members\";\n      case IModelHubStatus.ChangeSetAlreadyHasVersion: return \"ChangeSet already has version\";\n      case IModelHubStatus.VersionAlreadyExists: return \"Version already exists\";\n      case IModelHubStatus.JobSchedulingFailed: return \"Failed to schedule a background job\";\n      case IModelHubStatus.ConflictsAggregate: return \"Codes or locks are owned by another briefcase\";\n      case IModelHubStatus.FailedToGetProjectById: return \"Failed to query project by its id\";\n      case IModelHubStatus.DatabaseOperationFailed: return \"Database operation has failed\";\n\n      // errors that are returned for incorrect iModelHub request.\n      case IModelHubStatus.UndefinedArgumentError: return \"Undefined argument\";\n      case IModelHubStatus.InvalidArgumentError: return \"Invalid argument\";\n      case IModelHubStatus.MissingDownloadUrlError: return \"Missing download url\";\n      case IModelHubStatus.NotSupportedInBrowser: return \"Not supported in browser\";\n      case IModelHubStatus.FileHandlerNotSet: return \"File handler is not set\";\n      case IModelHubStatus.FileNotFound: return \"File not found\";\n\n      // errors returned from authorization\n      case AuthStatus.Error: return \"Authorization error\";\n\n      // Unexpected cases\n      case IModelStatus.Success:\n      case DbResult.BE_SQLITE_OK:\n      case DbResult.BE_SQLITE_ROW:\n      case DbResult.BE_SQLITE_DONE:\n      case BentleyStatus.SUCCESS:\n        return \"Success\";\n\n      default:\n        return \"Error (\" + this.errorNumber + \")\";\n    }\n  }\n}\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module Logging */\r\n\r\n/** Logger categories used by this package\r\n * @see [Logger]($bentley)\r\n * @public\r\n */\r\nexport enum BentleyLoggerCategory {\r\n  /** The logger category used by common classes relating to ElementProps. */\r\n  Performance = \"Performance\",\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @module Utils */\r\n\r\nimport { Guid, GuidString } from \"./Id\";\r\n\r\n/** The data properties of ClientRequestContext.\r\n * @public\r\n */\r\nexport interface ClientRequestContextProps {\r\n  /** Used for logging to correlate all service requests that originated from this client request */\r\n  readonly activityId: GuidString;\r\n\r\n  /** Used for logging and usage tracking to identify the application that created this client request */\r\n  readonly applicationId: string;\r\n\r\n  /** Used for logging and usage tracking to identify the application version that created this client request */\r\n  readonly applicationVersion: string;\r\n\r\n  /** Used for logging to identify the session that created this client request */\r\n  readonly sessionId: GuidString;\r\n}\r\n\r\n/** Provides generic context for a server application to get details of a particular\r\n * request that originated at the client. This context is used to pass information for various\r\n * purposes including usage tracking and logging. Services that require authorization are\r\n * passed an instance of the subclass:\r\n * [[AuthorizedClientRequestContext]].\r\n * @see [ClientRequestContext rules]($docs/learning/backend/managingclientrequestcontext.md).\r\n * @see [[AuthorizedClientRequestContext]]\r\n * @public\r\n */\r\nexport class ClientRequestContext implements ClientRequestContextProps {\r\n  /** Used for logging to correlate all service requests that originated from this client request */\r\n  public readonly activityId: GuidString;\r\n\r\n  /** Used for logging and usage tracking to identify the application that created this client request */\r\n  public readonly applicationId: string;\r\n\r\n  /** Used for logging and usage tracking to identify the application version that created this client request */\r\n  public readonly applicationVersion: string;\r\n\r\n  /** Used for logging to identify the session that created this client request */\r\n  public readonly sessionId: GuidString;\r\n\r\n  /** Create a new ClientRequestContext */\r\n  public constructor(activityId: GuidString = Guid.createValue(), applicationId: string = \"\", applicationVersion: string = \"\", sessionId: GuidString = Guid.empty) {\r\n    this.activityId = activityId;\r\n    this.applicationId = applicationId;\r\n    this.applicationVersion = applicationVersion;\r\n    this.sessionId = sessionId;\r\n    this._useContextForRpc = false;\r\n  }\r\n\r\n  /** Get the current client request context */\r\n  public static get current() { return ClientRequestContext._current; }\r\n  protected static _current: ClientRequestContext = new ClientRequestContext();\r\n\r\n  /**\r\n   * Set or reset the current ClientRequestContext to be this object. Should be called by async functions and the functions that they call\r\n   * at every resume point. See [ClientRequestContext rules]($docs/learning/backend/managingclientrequestcontext.md).\r\n   */\r\n  public enter(): this {\r\n    ClientRequestContext._current = this;\r\n    return this;\r\n  }\r\n\r\n  /** Setup use of this context for the next RPC call\r\n   * @internal\r\n   */\r\n  private _useContextForRpc: boolean;\r\n  public get useContextForRpc(): boolean { return this._useContextForRpc; }\r\n  public set useContextForRpc(value: boolean) { this._useContextForRpc = value; }\r\n  /** @internal */\r\n  public toJSON(): ClientRequestContextProps {\r\n    return {\r\n      activityId: this.activityId,\r\n      applicationId: this.applicationId,\r\n      applicationVersion: this.applicationVersion,\r\n      sessionId: this.sessionId,\r\n    };\r\n  }\r\n}\r\n\r\n/** Serialized format for sending the client request context across the RPC layer\r\n * @public\r\n */\r\nexport interface SerializedClientRequestContext {\r\n  id: string;\r\n  applicationId: string;\r\n  applicationVersion: string;\r\n  sessionId: string;\r\n  authorization?: string;\r\n  userId?: string;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n/**\n * A function that returns a numerical value indicating how two objects are ordered in relation to one another.\n * Such functions are used by various collection classes in the iModel.js library.\n * Given values `lhs` and `rhs`, the function returns:\n *  - Zero if lhs == rhs\n *  - A negative number if lhs < rhs\n *  - A positive number if lhs > rhs\n *\n * An OrderedComparator `must` implement [strict weak ordering](https://en.wikipedia.org/wiki/Weak_ordering#Strict_weak_orderings), which can be summarized by the following rules:\n *  - `compare(x, x)` returns zero.\n *  - If `compare(x, y)` returns zero, then so does `compare(y, x)` (i.e., `x == y` implies `y == x`).\n *  - If `compare(x, y)` returns non-zero, then `compare(y, x)` returns a value with an opposite sign (i.e., `x < y` implies `y > x`).\n *  - If `compare(x, y)` and `compare(y, z)` return non-zero values with the same sign, then `compare(x, z)` returns a value with the same sign (i.e., `x < y < z` implies `x < z`).\n *\n * @see SortedArray\n * @see Dictionary\n * @see IndexMap\n * @see PriorityQueue\n * @public\n */\nexport type OrderedComparator<T, U = T> = (lhs: T, rhs: U) => number;\n\n/**\n * An [[OrderedComparator]] for numbers that treats two numbers as equal if the absolute value of their difference is less than a specified tolerance.\n * @public\n */\nexport function compareWithTolerance(a: number, b: number, tolerance = 0.1): number {\n  if (a < b - tolerance)\n    return -1;\n  else if (a > b + tolerance)\n    return 1;\n  else\n    return 0;\n}\n\n/** @public */\nexport function compareNumbers(a: number, b: number): number { return a - b; }\n\n/** @public */\nexport function compareBooleans(a: boolean, b: boolean): number { return a !== b ? (a < b ? -1 : 1) : 0; }\n\n/** @public */\nexport function compareStrings(a: string, b: string): number { return a === b ? 0 : (a < b ? -1 : 1); }\n\n/** @public */\nexport function comparePossiblyUndefined<T>(compareDefined: (lhs: T, rhs: T) => number, lhs?: T, rhs?: T): number {\n  if (undefined === lhs)\n    return undefined === rhs ? 0 : -1;\n  else if (undefined === rhs)\n    return 1;\n  else\n    return compareDefined(lhs, rhs);\n}\n\n/** @public */\nexport function compareStringsOrUndefined(lhs?: string, rhs?: string): number { return comparePossiblyUndefined(compareStrings, lhs, rhs); }\n\n/** @public */\nexport function compareNumbersOrUndefined(lhs?: number, rhs?: number): number { return comparePossiblyUndefined(compareNumbers, lhs, rhs); }\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Collections */\n\nimport { CloneFunction, shallowClone, lowerBound } from \"./SortedArray\";\nimport { OrderedComparator } from \"./Compare\";\n\nclass DictionaryIterator<K, V> implements Iterator<DictionaryEntry<K, V>> {\n  private _keys: K[];\n  private _values: V[];\n  private _curIndex = -1;\n\n  public constructor(keys: K[], values: V[]) { this._keys = keys; this._values = values; }\n\n  public next(): IteratorResult<DictionaryEntry<K, V>> {\n    if (++this._curIndex >= this._keys.length) {\n      // The ECMAScript spec states that value=undefined is valid if done=true. The TypeScript interface violates the spec hence the cast to any and back below.\n      return { done: true } as any as IteratorResult<DictionaryEntry<K, V>>;\n    } else {\n      return {\n        value: {\n          key: this._keys[this._curIndex],\n          value: this._values[this._curIndex],\n        },\n        done: false,\n      };\n    }\n  }\n}\n\n/**\n * Represents an entry in a [[Dictionary]].\n * @public\n */\nexport interface DictionaryEntry<K, V> {\n  /** The key used for lookup in the Dictionary. */\n  key: K;\n  /** The value associated with the key in the Dictionary. */\n  value: V;\n}\n\n/**\n * Maintains a mapping of keys to values.\n * Unlike the standard Map<K, V>, a Dictionary<K, V> supports custom comparison logic for keys of object type (and for any other type).\n * The user supplies a key comparison function to the constructor, that must meet the following criteria given 'lhs' and 'rhs' of type K:\n *  - If lhs is equal to rhs, returns 0\n *  - If lhs is less than rhs, returns a negative value\n *  - If lhs is greater than rhs, returns a positive value\n *  - If compare(lhs, rhs) returns 0, then compare(rhs, lhs) must also return 0\n *  - If compare(lhs, rhs) returns a negative value, then compare(rhs, lhs) must return a positive value, and vice versa.\n *\n * Modifying a key in a way that affects the comparison function will produce unpredictable results, the\n * most likely of which is that keys will cease to map to the values with which they were initially inserted.\n * @public\n */\nexport class Dictionary<K, V> implements Iterable<DictionaryEntry<K, V>> {\n  protected _keys: K[] = [];\n  protected readonly _compareKeys: OrderedComparator<K>;\n  protected readonly _cloneKey: CloneFunction<K>;\n  protected _values: V[] = [];\n  protected readonly _cloneValue: CloneFunction<V>;\n\n  /**\n   * Construct a new Dictionary<K, V>.\n   * @param compareKeys The function used to compare keys within the dictionary.\n   * @param cloneKey The function invoked to clone a key for insertion into the dictionary. The default implementation simply returns its input.\n   * @param cloneValue The function invoked to clone a value for insertion into the dictionary. The default implementation simply returns its input.\n   */\n  public constructor(compareKeys: OrderedComparator<K>, cloneKey: CloneFunction<K> = shallowClone, cloneValue: CloneFunction<V> = shallowClone) {\n    this._compareKeys = compareKeys;\n    this._cloneKey = cloneKey;\n    this._cloneValue = cloneValue;\n  }\n\n  /** The number of entries in the dictionary. */\n  public get size(): number { return this._keys.length; }\n\n  /** Returns an iterator over the key-value pairs in the Dictionary suitable for use in `for-of` loops. Entries are returned in sorted order by key. */\n  public [Symbol.iterator](): Iterator<DictionaryEntry<K, V>> { return new DictionaryIterator<K, V>(this._keys, this._values); }\n\n  /** Removes all entries from this dictionary */\n  public clear(): void {\n    this._keys = [];\n    this._values = [];\n  }\n\n  /**\n   * Looks up a value by its key.\n   * @param key The key to search for\n   * @returns the value associated with the key, or undefined if the key is not present in the dictionary.\n   */\n  public get(key: K): V | undefined {\n    const bound = this.lowerBound(key);\n    return bound.equal ? this._values[bound.index] : undefined;\n  }\n\n  /**\n   * Determines if an entry exists for the specified key\n   * @param key The key to search for\n   * @returns true if an entry exists in this dictionary corresponding to the specified key.\n   */\n  public has(key: K): boolean {\n    return this.lowerBound(key).equal;\n  }\n\n  /**\n   * Deletes a value using its key.\n   * @param key The key to delete\n   * @returns true if the key was found and deleted.\n   */\n  public delete(key: K): boolean {\n    const bound = this.lowerBound(key);\n    if (bound.equal) {\n      this._values.splice(bound.index, 1);\n      this._keys.splice(bound.index, 1);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Attempts to insert a new entry into the dictionary. If an entry with an equivalent key exists, the dictionary is unmodified.\n   * If the new entry is in fact inserted, both the key and value will be cloned using the functions supplied to the dictionary's constructor.\n   * @param key The key to associate with the value\n   * @param value The value to associate with the key\n   * @returns true if the new entry was inserted, false if an entry with an equivalent key already exists.\n   */\n  public insert(key: K, value: V): boolean {\n    const bound = this.lowerBound(key);\n    if (!bound.equal) {\n      this._keys.splice(bound.index, 0, this._cloneKey(key));\n      this._values.splice(bound.index, 0, this._cloneValue(value));\n    }\n\n    return !bound.equal;\n  }\n\n  /**\n   * Sets the value associated with the specified key in the dictionary.\n   * If no such key already exists, this is equivalent to insert(key, value); otherwise, the existing value associated with the key is replaced.\n   * In either case, the value will be cloned using the function supplied to the dictionary's constructor.\n   */\n  public set(key: K, value: V): void {\n    value = this._cloneValue(value);\n    const bound = this.lowerBound(key);\n    if (bound.equal) {\n      this._values[bound.index] = value;\n    } else {\n      this._keys.splice(bound.index, 0, this._cloneKey(key));\n      this._values.splice(bound.index, 0, value);\n    }\n  }\n\n  /**\n   * Extracts the contents of this dictionary as an array of { key, value } pairs, and empties this dictionary.\n   * @returns An array of { key, value } pairs sorted by key.\n   */\n  public extractPairs(): Array<{ key: K, value: V }> {\n    const pairs: Array<{ key: K, value: V }> = [];\n    for (let i = 0; i < this.size; i++)\n      pairs.push({ key: this._keys[i], value: this._values[i] });\n\n    this.clear();\n    return pairs;\n  }\n\n  /**\n   * Extracts the contents of this dictionary as a pair of { keys, values } arrays, and empties this dictionary.\n   * The array of keys is sorted according to the comparison criterion.\n   * The position of each value in the array of values corresponds the the position of the corresponding key in the array of keys.\n   * @returns a pair of { keys, values } arrays in which key[i] corresponds to value[i] in this dictionary and the keys are in sorted order.\n   */\n  public extractArrays(): { keys: K[], values: V[] } {\n    const result = { keys: this._keys, values: this._values };\n    this.clear();\n    return result;\n  }\n\n  /** Apply a function to each (key, value) pair in the dictionary, in sorted order.\n   * @param func The function to be applied.\n   */\n  public forEach(func: (key: K, value: V) => void): void {\n    for (let i = 0; i < this.size; i++)\n      func(this._keys[i], this._values[i]);\n  }\n\n  /**\n   * Computes the position at which the specified key should be inserted to maintain sorted order.\n   * @param key The key whose position is to be computed.\n   * @returns an object with 'index' corresponding to the computed position and 'equal' set to true if an equivalent key already exists at that index.\n   */\n  protected lowerBound(key: K): { index: number, equal: boolean } { return lowerBound(key, this._keys, this._compareKeys); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n/** Interface adopted by a type which has deterministic cleanup logic.\n * For example:\n *  - Most rendering-related types, such as [[RenderGraphic]] and [[Viewport]], own WebGL resources which must be explicitly released when no longer needed.\n *  - Some low-level objects like [[ECDb]] own native types defined in C++ code which must be explicitly released when no longer needed.\n *\n * A similar concept exists in languages like C++ (implemented as \"destructors\") and C# (\"IDisposable\").\n * However, because TypeScript and Javascript lack any built-in support for deterministic destruction, it is up to the programmer to ensure dispose() is called appropriately.\n * Failure to do so may result in memory leaks or leaking of other resources.\n *\n * IDisposable tends to be contagious; that is, if a type has members which implement IDisposable, that type should also implement IDisposable to dispose of those members.\n *\n * Implementations of IDisposable tend to be more \"low-level\" types. The disposal of such types is often handled on your behalf by imodel.js.\n * However, always consult the documentation for an IDisposable type to determine under what circumstances you are expected to explicitly dispose of it.\n * @public\n */\nexport interface IDisposable {\n  /** Disposes of any resources owned by this object.\n   * @note The object is generally considered unusable after it has been disposed of.\n   */\n  dispose(): void;\n}\n\n/** Convenience function for disposing of a disposable object that may be undefined.\n * This is primarily used to simplify implementations of [[IDisposable.dispose]].\n * As a simple example:\n * ```ts\n *  class Disposable implements IDisposable {\n *    public member1?: DisposableType1;\n *    public member2?: DisposableType2;\n *\n *    public dispose() {\n *      this.member1 = dispose(this.member1); // If member1 is defined, dispose of it and set it to undefined.\n *      this.member2 = dispose(this.member2); // Likewise for member2.\n *    }\n *  }\n * ```\n * @param disposable The object to be disposed of.\n * @returns undefined\n * @public\n */\nexport function dispose(disposable?: IDisposable): undefined {\n  if (undefined !== disposable)\n    disposable.dispose();\n  return undefined;\n}\n\n/** Disposes of and empties a list of disposable objects.\n * @param list The list of disposable objects.\n * @returns undefined\n * @public\n */\nexport function disposeArray(list?: IDisposable[]): undefined {\n  if (undefined === list)\n    return undefined;\n\n  for (const entry of list)\n    dispose(entry);\n\n  list.length = 0;\n  return undefined;\n}\n\n/** A 'using' function which is a substitution for .NET's using statement. It makes sure that 'dispose'\n * is called on the resource no matter if the func returns or throws. If func returns, the return value\n * of this function is equal to return value of func. If func throws, this function also throws (after\n * disposing the resource).\n * @public\n */\nexport function using<T extends IDisposable, TResult>(resources: T | T[], func: (...r: T[]) => TResult): TResult {\n  if (!Array.isArray(resources))\n    return using([resources], func);\n\n  const doDispose = () => resources.forEach((disposable) => disposable.dispose());\n  let shouldDisposeImmediately = true;\n\n  try {\n    const result = func(...resources);\n    if (result instanceof Promise) {\n      shouldDisposeImmediately = false;\n      result.then(doDispose, doDispose);\n    }\n    return result;\n  } finally {\n    if (shouldDisposeImmediately)\n      doDispose();\n  }\n}\n\n/** A definition of function which may be called to dispose an object\n * @public\n */\nexport type DisposeFunc = () => void;\n\nclass FuncDisposable implements IDisposable {\n  private _disposeFunc: () => void;\n  constructor(disposeFunc: () => void) { this._disposeFunc = disposeFunc; }\n  public dispose() { this._disposeFunc(); }\n}\n\n/** A disposable container of disposable objects.\n * @public\n */\nexport class DisposableList implements IDisposable {\n  private _disposables: IDisposable[];\n\n  /** Creates a disposable list. */\n  constructor(disposables: Array<IDisposable | DisposeFunc> = []) {\n    this._disposables = [];\n    disposables.forEach((disposable) => {\n      this.add(disposable);\n    });\n  }\n\n  private isDisposable(x: IDisposable | DisposeFunc): x is IDisposable {\n    return (x as IDisposable).dispose !== undefined;\n  }\n\n  /** Register an object for disposal. */\n  public add(disposable: IDisposable | DisposeFunc) {\n    if (this.isDisposable(disposable))\n      this._disposables.push(disposable);\n    else\n      this._disposables.push(new FuncDisposable(disposable));\n  }\n\n  /** Unregister disposable object. */\n  public remove(disposable: IDisposable): void {\n    const idx = this._disposables.indexOf(disposable);\n    if (-1 !== idx)\n      this._disposables.splice(idx, 1);\n  }\n\n  /** Disposes all registered objects. */\n  public dispose(): void {\n    for (const disposable of this._disposables)\n      disposable.dispose();\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Ids */\n\n/** A string containing a well-formed string representation of an [Id64]($bentleyjs-core).\n * See [Working with Ids]($docs/learning/common/Id64.md).\n * @public\n */\nexport type Id64String = string;\n\n/** A string containing a well-formed string representation of a [Guid]($bentleyjs-core).\n * @public\n */\nexport type GuidString = string;\n\n/** A set of [[Id64String]]s.\n * @public\n */\nexport type Id64Set = Set<Id64String>;\n\n/** An array of [[Id64String]]s.\n * @public\n */\nexport type Id64Array = Id64String[];\n\n/** Used as an argument to a function that can accept one or more [[Id64String]]s.\n * @public\n */\nexport type Id64Arg = Id64String | Id64Set | Id64Array;\n\nfunction toHex(str: string): number {\n  const v = parseInt(str, 16);\n  return Number.isNaN(v) ? 0 : v;\n}\n\nfunction isLowerCaseNonZeroHexDigit(str: string, index: number) {\n  return isLowerCaseHexDigit(str, index, false);\n}\n\nfunction isLowerCaseHexDigit(str: string, index: number, allowZero: boolean = true): boolean {\n  const charCode = str.charCodeAt(index);\n  const minDecimalDigit = allowZero ? 0x30 : 0x31; // '0' or '1'...\n  return (charCode >= minDecimalDigit && charCode <= 0x39) || (charCode >= 0x61 && charCode <= 0x66); //  '0'-'9, 'a' -'f'\n}\n\nfunction isValidHexString(id: string, startIndex: number, len: number) {\n  if (len === 0)\n    return false;\n\n  // No leading zeroes...\n  if (!isLowerCaseNonZeroHexDigit(id, startIndex))\n    return false;\n\n  // ...followed by len-1 lowercase hexadecimal digits.\n  for (let i = 1; i < len; i++)\n    if (!isLowerCaseHexDigit(id, startIndex + i))\n      return false;\n\n  return true;\n}\n\n/**\n * The Id64 namespace provides facilities for working with 64-bit identifiers. These Ids are stored as 64-bit integers inside an [[IModelDb]], but must be represented\n * as strings in JavaScript because JavaScript does not intrinsically support 64-bit integers.\n *\n * The [[Id64String]] type alias is used to indicate function arguments, return types, and variables which are known to contain a well-formed representation of a 64-bit Id.\n *\n * See [Working with Ids]($docs/learning/common/Id64.md) for a detailed description and code examples.\n * @public\n */\nexport namespace Id64 {\n  /** Extract the \"local\" Id portion of an Id64String, contained in the lower 40 bits of the 64-bit value. */\n  export function getLocalId(id: Id64String): number {\n    if (isInvalid(id))\n      return 0;\n\n    let start = 2;\n    const len = id.length;\n    if (len > 12)\n      start = (len - 10);\n\n    return toHex(id.slice(start));\n  }\n\n  /** Extract the briefcase Id portion of an Id64String, contained in the upper 24 bits of the 64-bit value. */\n  export function getBriefcaseId(id: Id64String): number {\n    if (isInvalid(id))\n      return 0;\n\n    const str = id.toString();\n    let start = 2;\n    const len = str.length;\n    if (len <= 12)\n      return 0;\n\n    start = (len - 10);\n    return toHex(str.slice(2, start));\n  }\n\n  /** Create an Id64String from its JSON representation.\n   * @param prop The JSON representation of an Id.\n   * @returns A well-formed Id string.\n   * @note if the input is undefined, the result is \"0\", indicating an invalid Id.\n   * @note if the input is not undefined, the result is the same as that of [[Id64.fromString]].\n   */\n  export function fromJSON(prop?: string): Id64String {\n    return typeof prop === \"string\" ? Id64.fromString(prop) : Id64.invalid;\n  }\n\n  /** Given a string value, attempt to normalize it into a well-formed Id string.\n   * If the input is already a well-formed Id string, it is returned unmodified.\n   * Otherwise, the input is trimmed of leading and trailing whitespace, converted to lowercase, and an attempt is made to parse it as a 64-bit hexadecimal integer.\n   * If parsing succeeds the normalized result is returned; otherwise the result is \"0\", indicating an invalid Id.\n   *\n   * For a description of \"well-formed\", see [Working with Ids]($docs/learning/common/Id64.md).\n   */\n  export function fromString(val: string): Id64String {\n    // NB: in case this is called from JavaScript, we must check the run-time type...\n    if (typeof val !== \"string\")\n      return invalid;\n\n    // Skip the common case in which the input is already a well-formed Id string\n    if (Id64.isId64(val))\n      return val;\n\n    // Attempt to normalize the input into a well-formed Id string\n    val = val.toLowerCase().trim();\n    const len = val.length;\n    if (len < 2 || val[0] !== \"0\" || val[1] !== \"x\")\n      return invalid;\n\n    let low = 0;\n    let high = 0;\n    let start = 2;\n    if (len > 12) {\n      start = (len - 10);\n      high = toHex(val.slice(2, start));\n    }\n\n    low = toHex(val.slice(start));\n    return fromLocalAndBriefcaseIds(low, high);\n  }\n\n  // Used when constructing local ID portion of Id64String. Performance optimization.\n  const _localIdPrefixByLocalIdLength = [\n    \"0000000000\",\n    \"000000000\",\n    \"00000000\",\n    \"0000000\",\n    \"000000\",\n    \"00000\",\n    \"0000\",\n    \"000\",\n    \"00\",\n    \"0\",\n    \"\",\n  ];\n\n  /** Produce an Id string from a local and briefcase Id.\n   * @param localId The non-zero local Id as an unsigned 40-bit integer.\n   * @param briefcaseId The briefcase Id as an unsigned 24-bit integer.\n   * @returns an Id64String containing the hexadecimal string representation of the unsigned 64-bit integer which would result from the\n   * operation `localId | (briefcaseId << 40)`, or an invalid Id \"0\" if the inputs are invalid.\n   */\n  export function fromLocalAndBriefcaseIds(localId: number, briefcaseId: number): Id64String {\n    // NB: Yes, we must check the run-time type...\n    if (typeof localId !== \"number\" || typeof briefcaseId !== \"number\")\n      return invalid;\n\n    localId = Math.floor(localId);\n    if (0 === localId)\n      return invalid;\n\n    briefcaseId = Math.floor(briefcaseId);\n    const lowStr = localId.toString(16);\n    return \"0x\" + ((briefcaseId === 0) ? lowStr : (briefcaseId.toString(16) + (_localIdPrefixByLocalIdLength[lowStr.length] + lowStr)));\n  }\n\n  // Used as a buffer when converting a pair of 32-bit integers to an Id64String. Significant performance optimization.\n  const _scratchCharCodes = [\n    0x30, // \"0\"\n    0x78, // \"x\"\n    0x30, // \"0\"\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n    0x30,\n  ];\n\n  // Convert 4-bit unsigned integer to char code representing lower-case hexadecimal digit.\n  function uint4ToCharCode(uint4: number): number {\n    return uint4 + (uint4 < 10 ? 0x30 : 0x57);\n  }\n\n  // Convert char code representing lower-case hexadecimal digit to 4-bit unsigned integer.\n  function charCodeToUint4(char: number): number {\n    return char - (char >= 0x57 ? 0x57 : 0x30);\n  }\n\n  // Convert a substring to a uint32. This is twice as fast as using Number.parseInt().\n  function substringToUint32(id: Id64String, start: number, end: number): number {\n    let uint32 = 0;\n    for (let i = start; i < end; i++) {\n      const uint4 = charCodeToUint4(id.charCodeAt(i));\n      const shift = (end - i - 1) << 2;\n      const mask = uint4 << shift;\n      uint32 = (uint32 | mask) >>> 0; // >>> 0 to force unsigned because javascript\n    }\n\n    return uint32;\n  }\n\n  /** Create an Id64String from a pair of unsigned 32-bit integers.\n   * @param lowBytes The lower 4 bytes of the Id\n   * @param highBytes The upper 4 bytes of the Id\n   * @returns an Id64String containing the hexadecimal string representation of the unsigned 64-bit integer which would result from the\n   * operation `lowBytes | (highBytes << 32)`.\n   */\n  export function fromUint32Pair(lowBytes: number, highBytes: number): Id64String {\n    const localIdLow = lowBytes >>> 0;\n    const localIdHigh = (highBytes & 0x000000ff) * (0xffffffff + 1); // aka (highBytes & 0xff) << 32\n    const localId = localIdLow + localIdHigh; // aka localIdLow | localIdHigh\n    if (0 === localId)\n      return invalid;\n\n    // Need to omit or preserve leading zeroes...\n    const buffer = _scratchCharCodes;\n    let index = 2;\n    for (let i = 7; i >= 0; i--) {\n      const shift = i << 2;\n      const mask = 0xf << shift;\n      const uint4 = (highBytes & mask) >>> shift;\n      if (index > 2 || 0 !== uint4)\n        buffer[index++] = uint4ToCharCode(uint4);\n    }\n\n    for (let i = 7; i >= 0; i--) {\n      const shift = i << 2;\n      const mask = 0xf << shift;\n      const uint4 = (lowBytes & mask) >>> shift;\n      if (index > 2 || 0 !== uint4)\n        buffer[index++] = uint4ToCharCode(uint4);\n    }\n\n    if (buffer.length !== index)\n      buffer.length = index;\n\n    return String.fromCharCode(..._scratchCharCodes);\n  }\n\n  /** @internal */\n  export function isValidUint32Pair(lowBytes: number, highBytes: number): boolean {\n    // Detect local ID of zero\n    return 0 !== lowBytes || 0 !== (highBytes & 0x000000ff);\n  }\n\n  /** Represents an unsigned 64-bit integer as a pair of unsigned 32-bit integers.\n   * @see [[Id64.getUint32Pair]]\n   */\n  export interface Uint32Pair {\n    /** The lower 4 bytes of the 64-bit integer. */\n    lower: number;\n    /** The upper 4 bytes of the 64-bit integer. */\n    upper: number;\n  }\n\n  /** Convert an Id64String to a 64-bit unsigned integer represented as a pair of unsigned 32-bit integers. */\n  export function getUint32Pair(id: Id64String): Uint32Pair {\n    return {\n      lower: getLowerUint32(id),\n      upper: getUpperUint32(id),\n    };\n  }\n\n  /** Extract an unsigned 32-bit integer from the lower 4 bytes of an Id64String. */\n  export function getLowerUint32(id: Id64String): number {\n    if (isInvalid(id))\n      return 0;\n\n    const end = id.length;\n    const start = end > 10 ? end - 8 : 2;\n    return substringToUint32(id, start, end);\n  }\n\n  /** Extract an unsigned 32-bit integer from the upper 4 bytes of an Id64String. */\n  export function getUpperUint32(id: Id64String): number {\n    const len = id.length;\n    if (len <= 10 || isInvalid(id))\n      return 0;\n\n    return substringToUint32(id, 2, len - 8);\n  }\n\n  /** Convert an [[Id64Arg]] into an [[Id64Set]].\n   *\n   * This method can be used by functions that accept an Id64Arg to conveniently process the value(s). For example:\n   * ```ts\n   *   public addCategories(arg: Id64Arg) { Id64.toIdSet(arg).forEach((id) => this.categories.add(id)); }\n   * ```\n   *\n   * Alternatively, to avoid allocating a new Id64Set, use [[Id64.forEach]] or [[Id64.iterate]].\n   *\n   * @param arg The Ids to convert to an Id64Set.\n   * @param makeCopy If true, and the input is already an Id64Set, returns a deep copy of the input.\n   * @returns An Id64Set containing the set of [[Id64String]]s represented by the Id64Arg.\n   */\n  export function toIdSet(arg: Id64Arg, makeCopy: boolean = false): Id64Set {\n    if (arg instanceof Set)\n      return makeCopy ? new Set<string>(arg) : arg;\n\n    const ids = new Set<Id64String>();\n    if (typeof arg === \"string\")\n      ids.add(arg);\n    else if (Array.isArray(arg)) {\n      arg.forEach((id: Id64String) => {\n        if (typeof id === \"string\")\n          ids.add(id);\n      });\n    }\n\n    return ids;\n  }\n\n  /** Execute a function on each [[Id64String]] of an [[Id64Arg]].\n   * @param arg The Id(s) to iterate.\n   * @param callback The function to invoke on each Id.\n   * @see [[Id64.iterate]] for a similar function which allows iteration to be halted before it completes.\n   */\n  export function forEach(arg: Id64Arg, callback: (id: Id64String) => void): void {\n    Id64.iterate(arg, (id: Id64String) => {\n      callback(id);\n      return true;\n    });\n  }\n\n  /** Execute a function on each [[Id64String]] of an [[Id64Arg]], optionally terminating before iteration completes.\n   * @param arg The Id(s) to iterate.\n   * @param callback The function to invoke on each Id. The function returns false to terminate iteration, or true to continue iteration.\n   * @returns True if all Ids were iterated, or false if iteration was terminated due to the callback returning false.\n   */\n  export function iterate(arg: Id64Arg, callback: (id: Id64String) => boolean): boolean {\n    if (typeof arg === \"string\")\n      return callback(arg);\n\n    for (const id of arg)\n      if (!callback(id))\n        return false;\n\n    return true;\n  }\n\n  /** Return the first [[Id64String]] of an [[Id64Arg]]. */\n  export function getFirst(arg: Id64Arg): Id64String {\n    return typeof arg === \"string\" ? arg : (Array.isArray(arg) ? arg[0] : arg.values().next().value);\n  }\n\n  /** Return the number of [[Id64String]]s represented by an [[Id64Arg]]. */\n  export function sizeOf(arg: Id64Arg): number {\n    return typeof arg === \"string\" ? 1 : (Array.isArray(arg) ? arg.length : arg.size);\n  }\n\n  /** Returns true if the [[Id64Arg]] contains the specified Id. */\n  export function has(arg: Id64Arg, id: Id64String): boolean {\n    if (typeof arg === \"string\")\n      return arg === id;\n    if (Array.isArray(arg))\n      return -1 !== arg.indexOf(id);\n\n    return arg.has(id);\n  }\n\n  /** The string representation of an invalid Id. */\n  export const invalid = \"0\";\n\n  /** Determine if the supplied id string represents a transient Id.\n   * @param id A well-formed Id string.\n   * @returns true if the Id represents a transient Id.\n   * @note This method assumes the input is a well-formed Id string.\n   * @see [[Id64.isTransientId64]]\n   * @see [[TransientIdSequence]]\n   */\n  export function isTransient(id: Id64String): boolean {\n    // A transient Id is of the format \"0xffffffxxxxxxxxxx\" where the leading 6 digits indicate an invalid briefcase Id.\n    return 18 === id.length && id.startsWith(\"0xffffff\");\n  }\n\n  /** Determine if the input is a well-formed [[Id64String]] and represents a transient Id.\n   * @see [[Id64.isTransient]]\n   * @see [[Id64.isId64]]\n   * @see [[TransientIdSequence]]\n   */\n  export function isTransientId64(id: string): boolean {\n    return isValidId64(id) && isTransient(id);\n  }\n\n  /** Determine if the input is a well-formed [[Id64String]].\n   *\n   * For a description of \"well-formed\", see [Working with Ids]($docs/learning/common/Id64.md).\n   * @see [[Id64.isValidId64]]\n   */\n  export function isId64(id: string): boolean {\n    const len = id.length;\n    if (0 === len || 18 < len)\n      return false;\n\n    if (\"0\" !== id[0])\n      return false;\n\n    // Well-formed invalid Id: \"0\"\n    if (1 === len)\n      return true;\n\n    // Valid Ids begin with \"0x\" followed by at least one lower-case hexadecimal digit.\n    if (2 === len || \"x\" !== id[1])\n      return false;\n\n    // If briefcase Id is present, it occupies at least one digit, followed by 10 digits for local Id\n    let localIdStart = 2;\n    if (len > 12) {\n      localIdStart = len - 10;\n\n      // Verify briefcase Id\n      if (!isValidHexString(id, 2, localIdStart - 2))\n        return false;\n\n      // Skip leading zeroes in local Id\n      for (let i = localIdStart; i < len; i++) {\n        if (0x30 !== id.charCodeAt(i)) // '0'\n          break;\n        else\n          localIdStart++;\n      }\n\n      if (localIdStart >= len)\n        return false;\n    }\n\n    return isValidHexString(id, localIdStart, len - localIdStart);\n  }\n\n  /** Returns true if the input is not equal to the representation of an invalid Id.\n   * @note This method assumes the input is a well-formed Id string.\n   * @see [[Id64.isInvalid]]\n   * @see [[Id64.isValidId64]]\n   */\n  export function isValid(id: Id64String): boolean { return Id64.invalid !== id; }\n\n  /** Returns true if the input is a well-formed [[Id64String]] representing a valid Id.\n   * @see [[Id64.isValid]]\n   * @see [[Id64.isId64]]\n   */\n  export function isValidId64(id: string): boolean { return Id64.invalid !== id && Id64.isId64(id); }\n\n  /** Returns true if the input is a well-formed [[Id64String]] representing an invalid Id.\n   * @see [[Id64.isValid]]\n   */\n  export function isInvalid(id: Id64String): boolean { return Id64.invalid === id; }\n\n  /** A specialized replacement for Set<Id64String> optimized for performance-critical code which represents large sets of 64-bit IDs as pairs of\n   * 32-bit integers.\n   * The internal representation is a Map<number, Set<number>> where the Map key is the upper 4 bytes of the IDs and the Set elements are the lower 4 bytes of the IDs.\n   * Because the upper 4 bytes store the 24-bit briefcase ID plus the upper 8 bits of the local ID, there will be a very small distribution of unique Map keys.\n   * To further optimize this data type, the following assumptions are made regarding the { lower, upper } inputs, and no validation is performed to confirm them:\n   *  - The inputs are unsigned 32-bit integers;\n   *  - The inputs represent a valid Id64String (e.g., local ID is not zero).\n   * @see [[Id64.Uint32Map]] for a similarly-optimized replacement for Map<Id64String, T>\n   * @public\n   */\n  export class Uint32Set {\n    protected readonly _map = new Map<number, Set<number>>();\n\n    /** Construct a new Uint32Set.\n     * @param ids If supplied, all of the specified Ids will be added to the new set.\n     */\n    public constructor(ids?: Id64Arg) {\n      if (undefined !== ids)\n        this.addIds(ids);\n    }\n\n    /** Remove all contents of this set. */\n    public clear(): void {\n      this._map.clear();\n    }\n\n    /** Add an Id to the set. */\n    public addId(id: Id64String): void {\n      this.add(Id64.getLowerUint32(id), Id64.getUpperUint32(id));\n    }\n\n    /** Add any number of Ids to the set. */\n    public addIds(ids: Id64Arg): void {\n      Id64.forEach(ids, (id) => this.addId(id));\n    }\n\n    /** Returns true if the set contains the specified Id. */\n    public hasId(id: Id64String): boolean { return this.has(Id64.getLowerUint32(id), Id64.getUpperUint32(id)); }\n\n    /** Add an Id to the set. */\n    public add(low: number, high: number): void {\n      let set = this._map.get(high);\n      if (undefined === set) {\n        set = new Set<number>();\n        this._map.set(high, set);\n      }\n\n      set.add(low);\n    }\n\n    /** Remove an Id from the set. */\n    public deleteId(id: Id64String): void {\n      this.delete(Id64.getLowerUint32(id), Id64.getUpperUint32(id));\n    }\n\n    /** Remove any number of Ids from the set. */\n    public deleteIds(ids: Id64Arg): void {\n      Id64.forEach(ids, (id) => this.deleteId(id));\n    }\n\n    /** Remove an Id from the set. */\n    public delete(low: number, high: number): void {\n      const set = this._map.get(high);\n      if (undefined !== set)\n        set.delete(low);\n    }\n\n    /** Returns true if the set contains the specified Id. */\n    public has(low: number, high: number): boolean {\n      const set = this._map.get(high);\n      return undefined !== set && set.has(low);\n    }\n\n    /** Returns true if the set contains no Ids. */\n    public get isEmpty(): boolean { return 0 === this._map.size; }\n\n    /** Returns the number of Ids contained in the set. */\n    public get size(): number {\n      let size = 0;\n      for (const entry of this._map)\n        size += entry[1].size;\n\n      return size;\n    }\n\n    /** Populates and returns an array of all Ids contained in the set. */\n    public toId64Array(): Id64Array {\n      const ids: Id64Array = [];\n      for (const entry of this._map)\n        for (const low of entry[1])\n          ids.push(Id64.fromUint32Pair(low, entry[0]));\n\n      return ids;\n    }\n\n    /** Populates and returns a set of all Ids contained in the set. */\n    public toId64Set(): Id64Set {\n      const ids = new Set<string>();\n      for (const entry of this._map)\n        for (const low of entry[1])\n          ids.add(Id64.fromUint32Pair(low, entry[0]));\n\n      return ids;\n    }\n\n    /** Execute a function against each Id in this set. */\n    public forEach(func: (lo: number, hi: number) => void): void {\n      for (const entry of this._map)\n        for (const lo of entry[1])\n          func(lo, entry[0]);\n    }\n  }\n\n  /** A specialized replacement for Map<Id64String, T> optimized for performance-critical code.\n   * @see [[Id64.Uint32Set]] for implementation details.\n   * @public\n   */\n  export class Uint32Map<T> {\n    protected readonly _map = new Map<number, Map<number, T>>();\n\n    /** Remove all entries from the map. */\n    public clear(): void { this._map.clear(); }\n    /** Find an entry in the map by Id. */\n    public getById(id: Id64String): T | undefined { return this.get(Id64.getLowerUint32(id), Id64.getUpperUint32(id)); }\n    /** Set an entry in the map by Id. */\n    public setById(id: Id64String, value: T): void { this.set(Id64.getLowerUint32(id), Id64.getUpperUint32(id), value); }\n\n    /** Set an entry in the map by Id components. */\n    public set(low: number, high: number, value: T): void {\n      let map = this._map.get(high);\n      if (undefined === map) {\n        map = new Map<number, T>();\n        this._map.set(high, map);\n      }\n\n      map.set(low, value);\n    }\n\n    /** Get an entry from the map by Id components. */\n    public get(low: number, high: number): T | undefined {\n      const map = this._map.get(high);\n      return undefined !== map ? map.get(low) : undefined;\n    }\n\n    /** Returns true if the map contains no entries. */\n    public get isEmpty(): boolean { return 0 === this._map.size; }\n    /** Returns the number of entries in the map. */\n    public get size(): number {\n      let size = 0;\n      for (const entry of this._map)\n        size += entry[1].size;\n\n      return size;\n    }\n\n    /** Execute a function against each entry in this map. */\n    public forEach(func: (lo: number, hi: number, value: T) => void): void {\n      for (const outerEntry of this._map)\n        for (const innerEntry of outerEntry[1])\n          func(innerEntry[0], outerEntry[0], innerEntry[1]);\n    }\n  }\n}\n\n/**\n * Generates unique [[Id64String]] values in sequence, which are guaranteed not to conflict with Ids associated with persistent elements or models.\n * This is useful for associating stable, non-persistent identifiers with things like [Decorator]($frontend)s.\n * A TransientIdSequence can generate a maximum of (2^40)-2 unique Ids.\n * @public\n */\nexport class TransientIdSequence {\n  private _localId: number = 0;\n\n  /** Generate and return the next transient Id64String in the sequence. */\n  public get next(): Id64String { return Id64.fromLocalAndBriefcaseIds(++this._localId, 0xffffff); }\n}\n\n/**\n * The Guid namespace provides facilities for working with GUID strings using the \"8-4-4-4-12\" pattern.\n *\n * The [[GuidString]] type alias is used to indicate function arguments, return types, and variables which are known to\n * be in the GUID format.\n * @public\n */\nexport namespace Guid {\n  const uuidPattern = new RegExp(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n\n  /** Represents the empty Guid 00000000-0000-0000-0000-000000000000 */\n  export const empty: GuidString = \"00000000-0000-0000-0000-000000000000\";\n\n  /** Determine whether the input string is \"guid-like\". That is, it follows the 8-4-4-4-12 pattern. This does not enforce\n   *  that the string is actually in valid UUID format.\n   */\n  export function isGuid(value: string): boolean { return uuidPattern.test(value); }\n\n  /** Determine whether the input string is a valid V4 Guid string */\n  export function isV4Guid(value: string): boolean { return /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(value); }\n\n  /** Create a new V4 Guid value */\n  export function createValue(): GuidString {\n    // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Collections */\n\nimport { CloneFunction, shallowClone, lowerBound } from \"./SortedArray\";\nimport { OrderedComparator } from \"./Compare\";\n\n/** Associates a value of type T with an index representing its insertion order in an IndexMap<T>\n * @public\n */\nexport class IndexedValue<T> {\n  public readonly value: T;\n  public readonly index: number;\n\n  public constructor(value: T, index: number) {\n    this.value = value;\n    this.index = index;\n  }\n}\n\n/**\n * Maintains a set of unique elements in sorted order and retains the insertion order of each.\n * The uniqueness of the elements is determined by a comparison routine supplied by the user.\n * The user may also supply a maximum size, beyond which insertions will fail.\n * @public\n */\nexport class IndexMap<T> {\n  protected _array: Array<IndexedValue<T>> = [];\n  protected readonly _compareValues: OrderedComparator<T>;\n  protected readonly _clone: CloneFunction<T>;\n  protected readonly _maximumSize: number;\n\n  /**\n   * Construct a new IndexMap<T>.\n   * @param compare The function used to compare elements within the map.\n   * @param maximumSize The maximum number of elements permitted in the IndexMap. The maximum index of an element is maximumSize-1.\n   * @param clone The function invoked to clone a new element for insertion into the array. The default implementation simply returns its input.\n   */\n  public constructor(compare: OrderedComparator<T>, maximumSize: number = Number.MAX_SAFE_INTEGER, clone: CloneFunction<T> = shallowClone) {\n    this._compareValues = compare;\n    this._clone = clone;\n    this._maximumSize = maximumSize;\n  }\n\n  /** The number of elements in the map. */\n  public get length(): number { return this._array.length; }\n\n  /** Returns true if the maximum number of elements have been inserted. */\n  public get isFull(): boolean { return this.length >= this._maximumSize; }\n\n  /** Returns true if the map contains no elements. */\n  public get isEmpty(): boolean { return 0 === this.length; }\n\n  /** Removes all elements from the map. */\n  public clear(): void { this._array = []; }\n\n  /** Attempt to insert a new value into the map.\n   * If an equivalent element already exists in the map, the corresponding index is returned.\n   * If the map is full, nothing is inserted and -1 is returned.\n   * Otherwise:\n   *  The new element is mapped to the next-available index (that is, the length of the map prior to insertion of this new element);\n   *  the value is cloned using the function supplied to the IndexMap constructor;\n   *  the cloned result is inserted into the map; and\n   *  the index of the new element is returned.\n   * @param value The value to insert\n   * @param onInsert The optional callback method to call if insertion occurs with the inserted value\n   * @returns the index of the equivalent element in the map, or -1 if the map is full and no equivalent element exists.\n   */\n  public insert(value: T, onInsert?: (value: T) => any): number {\n    const bound = this.lowerBound(value);\n    if (bound.equal)\n      return this._array[bound.index].index;\n    else if (this.isFull)\n      return -1;\n\n    const entry = new IndexedValue<T>(this._clone(value), this._array.length);\n\n    if (undefined !== onInsert)\n      onInsert(entry.value);\n\n    this._array.splice(bound.index, 0, entry);\n    return entry.index;\n  }\n\n  /**\n   * Finds the index of an element equivalent to the supplied value.\n   * @param value the value to find\n   * @returns the index of an equivalent element in the map, or -1 if no such element exists.\n   */\n  public indexOf(value: T): number {\n    const bound = this.lowerBound(value);\n    return bound.equal ? this._array[bound.index].index : -1;\n  }\n\n  protected lowerBound(value: T): { index: number, equal: boolean } { return lowerBound(value, this._array, (lhs: T, rhs: IndexedValue<T>) => this._compareValues(lhs, rhs.value)); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n/** Utility functions for converting from JSON objects, with default values.\n * @public\n */\nexport namespace JsonUtils {\n  /** Get a value as a boolean.\n   * @param json the input JSON object\n   * @param defaultVal default value if json cannot be converted to boolean\n   * @returns the value of json as a boolean, or default value\n   */\n  export function asBool(json: any, defaultVal = false): boolean { return isNullOrUndefined(json) ? defaultVal : !!json; }\n  /** Get a value as an integer.\n   * @param json the input JSON object\n   * @param defaultVal default value if json cannot be converted to integer\n   * @returns the value of json as an integer, or default value\n   */\n  export function asInt(json: any, defaultVal = 0): number { return (typeof json === \"number\") ? Math.trunc(json) : defaultVal; }\n  /** Get a value as a double.\n   * @param json the input JSON object\n   * @param defaultVal default value if json cannot be converted to double\n   * @returns the value of json as a double, or default value\n   */\n  export function asDouble(json: any, defaultVal = 0): number { return (typeof json === \"number\") ? json : defaultVal; }\n  /** Get a value as a string.\n   * @param json the input JSON object\n   * @param defaultVal default value if json cannot be converted to string\n   * @returns the value of json as a string, or default value\n   */\n  export function asString(json: any, defaultVal = \"\"): string { return isNullOrUndefined(json) ? defaultVal : json.toString(); }\n\n  /** Get a value as an array.\n   * @param json the input JSON object\n   * @returns the input JSON object if it is an array, otherwise undefined\n   */\n  export function asArray(json: any): any { return Array.isArray(json) ? json : undefined; }\n\n  /** Get a value as an object.\n   * @param json the input JSON object\n   * @returns the input JSON object if it is an object, otherwise undefined\n   */\n  export function asObject(json: any): any { return \"object\" === typeof json ? json : undefined; }\n\n  /** Set or remove a number on a json object, given a key name, a value, and a default value. Sets `json[key] = val` if val is *not* equal to the default,\n   * otherwise `delete json[key]`. This is used to omit values from JSON strings that are of known defaults.\n   * @param json the JSON object to affect\n   * @param key the name of the member to set or remove\n   * @param val the value to set\n   * @param defaultVal the default value.\n   */\n  export function setOrRemoveNumber(json: any, key: string, val: number, defaultVal: number) { if (val === defaultVal) delete json[key]; else json[key] = val; }\n\n  /** Set or remove a boolean on a json object, given a key name, a value, and a default value. Sets `json[key] = val` if val is *not* equal to the default,\n   * otherwise `delete json[key]`. This is used to omit values from JSON strings that are of known defaults.\n   * @param json the JSON object to affect\n   * @param key the name of the member to set or remove\n   * @param val the value to set\n   * @param defaultVal the default value.\n   */\n  export function setOrRemoveBoolean(json: any, key: string, val: boolean, defaultVal: boolean) { if (val === defaultVal) delete json[key]; else json[key] = val; }\n\n  /** Determine if a Javascript object is equivalent to `{}`.\n   * @param json The JSON object to test.\n   * @returns true if `json` is an Object with no keys.\n   */\n  export function isEmptyObject(json: any): boolean {\n    return \"object\" === typeof json && 0 === Object.keys(json).length;\n  }\n\n  /** Determine if the input is undefined or an empty Javascript object.\n   * @param json The JSON object to test.\n   * @returns true if `json` is undefined or is an Object with no keys (equivalent to `{}`).\n   */\n  export function isEmptyObjectOrUndefined(json: any): boolean {\n    return undefined === json || isEmptyObject(json);\n  }\n\n  function isNullOrUndefined(json: any): boolean { return null === json || undefined === json; }\n\n  /**\n   * Convert the input object into a \"pure\" JavaScript object, with only instances of \"object\" or primitives in the returned value.\n   * Works recursively for object members, and over arrays entries. Calls \"toJSON\" on any members that implement it.\n   */\n  export function toObject(val: any): any {\n    if (typeof val === \"boolean\" || typeof val === \"number\" || typeof val === \"string\")\n      return val;\n\n    if (typeof val !== \"object\")\n      return undefined;\n\n    // See if the object has toJSON() function defined.\n    if (typeof val.toJSON !== \"undefined\")\n      return toObject(val.toJSON());\n\n    // if it's an array, convert each member.\n    if (Array.isArray(val)) {\n      const arr = new Array(val.length);\n      val.forEach((el, i) => { arr[i] = toObject(el); });\n      return arr;\n    }\n\n    // Convert each property\n    const out: any = {};\n    Object.getOwnPropertyNames(val).forEach((prop) => {\n      const transformVal = toObject(val[prop]);\n      if (transformVal !== undefined)\n        out[prop] = transformVal;\n    });\n\n    return out;\n  }\n\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Collections */\n\nimport { OrderedComparator } from \"./Compare\";\nimport { Dictionary } from \"./Dictionary\";\n\n/*\n * Derived from:\n * Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\n * See README.md at https://github.com/rsms/js-lru for details.\n */\n\n/** An entry holds the key and value, and pointers to any older and newer entries.\n * @public\n */\nexport class Entry<K, V> {\n  public newer?: Entry<K, V>;\n  public older?: Entry<K, V>;\n  constructor(public key: K, public value: V) { }\n}\n\nclass EntryIterator<K, V> implements Iterator<[K, V] | undefined> {\n  private _entry: Entry<K, V> | undefined;\n  constructor(oldestEntry: Entry<K, V>) {\n    this._entry = oldestEntry;\n  }\n  public next() {\n    const ent = this._entry;\n    if (!ent)\n      return { done: true, value: undefined };\n    this._entry = ent.newer;\n    const val: [K, V] = [ent.key, ent.value];\n    return { done: false, value: val };\n  }\n}\n\nclass KeyIterator<K, V> implements Iterator<K | undefined>  {\n  private _entry: Entry<K, V> | undefined;\n  constructor(oldestEntry: Entry<K, V>) {\n    this._entry = oldestEntry;\n  }\n  public next() {\n    const ent = this._entry;\n    if (!ent)\n      return { done: true, value: undefined };\n    this._entry = ent.newer;\n    return { done: false, value: ent.key };\n  }\n}\n\nclass ValueIterator<K, V> implements Iterator<V | undefined> {\n  private _entry: Entry<K, V> | undefined;\n  constructor(oldestEntry: Entry<K, V>) {\n    this._entry = oldestEntry;\n  }\n  public next() {\n    const ent = this._entry;\n    if (!ent)\n      return { done: true, value: undefined };\n    this._entry = ent.newer;\n    return { done: false, value: ent.value };\n  }\n}\n\n/** The interface that must be satisfied by the underlying container type used by a LRUCache.\n * Compatible with a [[Dictionary]] or a standard Map.\n * @public\n */\nexport interface EntryContainer<K, V> {\n  readonly size: number;\n  clear(): void;\n  get(key: K): Entry<K, V> | undefined;\n  set(key: K, value: Entry<K, V>): void;\n  has(key: K): boolean;\n  delete(key: K): void;\n}\n\n/**\n * A mapping of a key/value pairs, where the size of the cache can be limited.\n *\n * When entries are inserted, if the cache is \"full\", the\n * least-recently-used (LRU) value is dropped. When entries are retrieved, they are moved to the front of the LRU list.\n *\n * Illustration of the design:\n *\n * ```\n *\n *       entry             entry             entry             entry\n *       ______            ______            ______            ______\n *      | head |.newer => |      |.newer => |      |.newer => | tail |\n *      |  A   |          |  B   |          |  C   |          |  D   |\n *      |______| <= older.|______| <= older.|______| <= older.|______|\n *\n *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\n * ```\n * @public\n */\nexport class LRUCache<K, V> {\n  private _container: EntryContainer<K, V>;\n\n  /** Current number of items */\n  public size: number;\n\n  /** Maximum number of items this cache can hold */\n  public limit: number;\n\n  /** Least recently-used entry. Invalidated when cache is modified. */\n  public oldest?: Entry<K, V>;\n\n  /** Most recently-used entry. Invalidated when cache is modified. */\n  public newest?: Entry<K, V>;\n\n  /**\n   * Construct a new LRUCache to hold up to `limit` entries.\n   */\n  public constructor(limit: number, container: EntryContainer<K, V>) {\n    this.size = 0;\n    this.limit = limit;\n    this.oldest = this.newest = undefined;\n    this._container = container;\n  }\n\n  private markEntryAsUsed(entry: Entry<K, V>) {\n    if (entry === this.newest)\n      return; // Already the most recently used entry, so no need to update the list\n\n    // HEAD--------------TAIL\n    //   <.older   .newer>\n    //  <--- add direction --\n    //   A  B  C  <D>  E\n    if (entry.newer) {\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n      entry.newer.older = entry.older; // C <-- E.\n    }\n    if (entry.older) {\n      entry.older.newer = entry.newer; // C. --> E\n    }\n    entry.newer = undefined; // D --x\n    entry.older = this.newest; // D. --> E\n    if (this.newest) {\n      this.newest.newer = entry; // E. <-- D\n    }\n    this.newest = entry;\n  }\n\n  /**  Replace all values in this cache with key-value pairs (2-element Arrays) from provided iterable. */\n  public assign(entries: Iterable<[K, V]>): void {\n    let entry;\n    let limit = this.limit || Number.MAX_VALUE;\n    this._container.clear();\n    const it = entries[Symbol.iterator]();\n    for (let itv = it.next(); !itv.done; itv = it.next()) {\n      const e = new Entry(itv.value[0], itv.value[1]);\n      this._container.set(e.key, e);\n      if (!entry) {\n        this.oldest = e;\n      } else {\n        entry.newer = e;\n        e.older = entry;\n      }\n      entry = e;\n      if (limit-- === 0) {\n        throw new Error(\"overflow\");\n      }\n    }\n    this.newest = entry;\n    this.size = this._container.size;\n  }\n\n  /** Get and register recent use of <key>.\n   *  Returns the value associated with <key> or undefined if not in cache.\n   */\n  public get(key: K): V | undefined {\n    // First, find our cache entry\n    const entry = this._container.get(key);\n    if (!entry)\n      return; // Not cached. Sorry.\n    // As <key> was found in the cache, register it as being requested recently\n    this.markEntryAsUsed(entry);\n    return entry.value;\n  }\n\n  /** Put <value> into the cache associated with <key>. Replaces any existing entry with the same key.\n   *  @returns `this`.\n   */\n  public set(key: K, value: V): LRUCache<K, V> {\n    let entry = this._container.get(key);\n    if (entry) {\n      // update existing\n      entry.value = value;\n      this.markEntryAsUsed(entry);\n      return this;\n    }\n\n    // new entry\n    this._container.set(key, (entry = new Entry(key, value)));\n\n    if (this.newest) {\n      // link previous tail to the new tail (entry)\n      this.newest.newer = entry;\n      entry.older = this.newest;\n    } else {\n      // we're first in\n      this.oldest = entry;\n    }\n\n    // add new entry to the end of the linked list -- it is now the freshest entry.\n    this.newest = entry;\n    ++this.size;\n    if (this.size > this.limit) {\n      // we hit the limit -- remove the head\n      this.shift();\n    }\n    return this;\n  }\n\n  /**  Purge the least recently used (oldest) entry from the cache.\n   *  @returns The removed entry or undefined if the cache was empty.\n   */\n  public shift(): [K, V] | undefined {\n    const entry = this.oldest;\n    if (entry) {\n      if (entry.newer) {\n        // advance the list\n        this.oldest = entry.newer;\n        this.oldest.older = undefined;\n      } else {\n        // the cache is exhausted\n        this.oldest = undefined;\n        this.newest = undefined;\n      }\n      // Remove last strong reference to <entry> and remove links from the purged\n      // entry being returned:\n      entry.newer = entry.older = undefined;\n      this._container.delete(entry.key);\n      --this.size;\n      return [entry.key, entry.value];\n    }\n    return undefined;\n  }\n\n  /** Access value for `key` without registering recent use. Useful if you do not\n   *  want to change the state of the cache, but only \"peek\" at it.\n   *  @returns The value associated with `key` if found, or undefined if not found.\n   */\n  public find(key: K): V | undefined {\n    const e = this._container.get(key);\n    return e ? e.value : undefined;\n  }\n\n  /** Check if there's a value for key in the cache without registering recent use. */\n  public has(key: K): boolean {\n    return this._container.has(key);\n  }\n\n  /**  Remove entry `key` from cache and return its value.\n   *  @returns The removed value, or undefined if not found.\n   */\n  public delete(key: K): V | undefined {\n    const entry = this._container.get(key);\n    if (!entry) return;\n    this._container.delete(entry.key);\n    if (entry.newer && entry.older) {\n      // re-link the older entry with the newer entry\n      entry.older.newer = entry.newer;\n      entry.newer.older = entry.older;\n    } else if (entry.newer) {\n      // remove the link to us\n      entry.newer.older = undefined;\n      // link the newer entry to head\n      this.oldest = entry.newer;\n    } else if (entry.older) {\n      // remove the link to us\n      entry.older.newer = undefined;\n      // link the newer entry to head\n      this.newest = entry.older;\n    } else { // if(entry.older === undefined && entry.newer === undefined) {\n      this.oldest = this.newest = undefined;\n    }\n\n    this.size--;\n    return entry.value;\n  }\n\n  /**  Removes all entries */\n  public clear(): void {\n    // Note: clearing links should be safe, as we don't expose live links to user\n    this.oldest = this.newest = undefined;\n    this.size = 0;\n    this._container.clear();\n  }\n\n  /** Returns an iterator over all keys, starting with the oldest. */\n  public keys(): Iterator<K | undefined> | undefined {\n    return this.oldest ? new KeyIterator(this.oldest) : undefined;\n  }\n\n  /** Returns an iterator over all values, starting with the oldest. */\n  public values(): Iterator<V | undefined> | undefined {\n    return this.oldest ? new ValueIterator(this.oldest) : undefined;\n  }\n\n  /** Returns an iterator over all entries, starting with the oldest. */\n  public entries(): Iterator<[K, V] | undefined> | undefined {\n    return this.oldest ? new EntryIterator(this.oldest) : undefined;\n  }\n\n  /**  Call `fun` for each entry, starting with the oldest entry. */\n  public forEach(fun: (value: V, key: K, m: LRUCache<K, V>) => void, thisObj?: any): void {\n    if (typeof thisObj !== \"object\") {\n      thisObj = this;\n    }\n    let entry = this.oldest;\n    while (entry) {\n      fun.call(thisObj, entry.value, entry.key, this);\n      entry = entry.newer;\n    }\n  }\n\n  /** Returns a JSON (array) representation */\n  public toJSON(): Array<{ key: K, value: V }> {\n    const s = new Array(this.size);\n    let i = 0;\n    let entry = this.oldest;\n    while (entry) {\n      s[i++] = { key: entry.key, value: entry.value };\n      entry = entry.newer;\n    }\n    return s;\n  }\n\n  /** Returns a String representation */\n  public toString(): string {\n    let s = \"\";\n    let entry = this.oldest;\n    while (entry) {\n      s += String(entry.key) + \":\" + entry.value;\n      entry = entry.newer;\n      if (entry) {\n        s += \" < \";\n      }\n    }\n    return s;\n  }\n}\n\n/** A [[LRUCache]] using a standard Map as its internal storage.\n * @public\n */\nexport class LRUMap<K, V> extends LRUCache<K, V> {\n  /**\n   * Construct a new LRUMap to hold up to `limit` entries.\n   */\n  constructor(limit: number) {\n    super(limit, new Map<K, Entry<K, V>>());\n  }\n}\n\n/** A [[LRUCache]] using a [[Dictionary]] as its internal storage, permitting custom key comparison logic.\n * @public\n */\nexport class LRUDictionary<K, V> extends LRUCache<K, V> {\n  /**\n   * Construct a new LRUDictionary to hold up to `limit` entries.\n   * @param limit The maximum number of entries permitted in the dictionary.\n   * @param compareKeys The function used to compare keys within the dictionary.\n   */\n  constructor(limit: number, compareKeys: OrderedComparator<K>) {\n    super(limit, new Dictionary<K, Entry<K, V>>(compareKeys));\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Logging */\n\nimport { GetMetaDataFunction, IModelStatus, BentleyError } from \"./BentleyError\";\nimport { IDisposable } from \"./Disposable\";\nimport { ClientRequestContext } from \"./ClientRequestContext\";\nimport { BentleyLoggerCategory } from \"./BentleyLoggerCategory\";\n\n/** Defines the *signature* for a log function.\n * @public\n */\nexport type LogFunction = (category: string, message: string, metaData?: GetMetaDataFunction) => void;\n\n/** Use to categorize logging messages by severity.\n * @public\n */\nexport enum LogLevel {\n  /** Tracing and debugging - low level */\n  Trace,\n  /** Information - mid level */\n  Info,\n  /** Warnings - high level */\n  Warning,\n  /** Errors - highest level */\n  Error,\n  /** Higher than any real logging level. This is used to turn a category off. */\n  None,\n}\n\n/** Identifies a logging category and the LogLevel that should be used for it. The LogLevel is specified by its string name.\n * @public\n */\nexport interface LoggerCategoryAndLevel {\n  category: string;\n  logLevel: string;\n}\n\n/** Specifies logging levels, including the default logging level and a set of categories and levels for them.\n * @public\n */\nexport interface LoggerLevelsConfig {\n  defaultLevel?: string;\n  categoryLevels?: LoggerCategoryAndLevel[];\n}\n\n/** Logger allows libraries and apps to report potentially useful information about operations, and it allows apps and users to control\n * how or if the logged information is displayed or collected. See [Learning about Logging]($docs/learning/common/Logging.md).\n * @public\n */\nexport class Logger {\n  private static _logError: LogFunction | undefined;\n  private static _logWarning: LogFunction | undefined;\n  private static _logInfo: LogFunction | undefined;\n  private static _logTrace: LogFunction | undefined;\n  private static _categoryFilter: Map<string, LogLevel> = new Map<string, LogLevel>();\n  private static _minLevel: LogLevel | undefined = undefined;\n  private static _logExceptionCallstacks = false;\n\n  /** Initialize the logger streams. Should be called at application initialization time. */\n  public static initialize(logError: LogFunction | undefined, logWarning?: LogFunction | undefined, logInfo?: LogFunction | undefined, logTrace?: LogFunction | undefined): void {\n    Logger._logError = logError;\n    Logger._logWarning = logWarning;\n    Logger._logInfo = logInfo;\n    Logger._logTrace = logTrace;\n    Logger.turnOffLevelDefault();\n    Logger.turnOffCategories();\n  }\n\n  /** Initialize the logger streams to the console. Should be called at application initialization time. */\n  public static initializeToConsole(): void {\n    // tslint:disable:no-console\n    Logger.initialize(\n      (category: string, message: string, getMetaData?: GetMetaDataFunction): void => console.log(\"Error   |\" + category + \"| \" + message + Logger.formatMetaData(getMetaData)),\n      (category: string, message: string, getMetaData?: GetMetaDataFunction): void => console.log(\"Warning |\" + category + \"| \" + message + Logger.formatMetaData(getMetaData)),\n      (category: string, message: string, getMetaData?: GetMetaDataFunction): void => console.log(\"Info    |\" + category + \"| \" + message + Logger.formatMetaData(getMetaData)),\n      (category: string, message: string, getMetaData?: GetMetaDataFunction): void => console.log(\"Trace   |\" + category + \"| \" + message + Logger.formatMetaData(getMetaData)),\n    );\n  }\n\n  // WIP: This modifies the incoming Object!\n  private static addClientRequestContext(metaData: any) {\n    const requestContext = ClientRequestContext.current;\n    metaData.ActivityId = requestContext.activityId;\n    metaData.SessionId = requestContext.sessionId;\n    metaData.ApplicationId = requestContext.applicationId;\n    metaData.ApplicationVersion = requestContext.applicationVersion;\n  }\n\n  /** @internal used by addon */\n  public static getCurrentClientRequestContext(): ClientRequestContext {\n    return ClientRequestContext.current;\n  }\n\n  /** @internal used by addon */\n  public static setCurrentClientRequestContext(obj: any) {\n    if (obj === undefined) {\n      if (ClientRequestContext.current.activityId !== \"\")\n        new ClientRequestContext(\"\").enter();\n    } else {\n      if (!(obj instanceof ClientRequestContext))\n        throw new TypeError(`${JSON.stringify(obj)} -- this is not an instance of ClientRequestContext`);\n      obj.enter();\n    }\n  }\n\n  /** Should the callstack be included when an exception is logged?  */\n  public static set logExceptionCallstacks(b: boolean) {\n    Logger._logExceptionCallstacks = b;\n  }\n\n  /** Should the callstack be included when an exception is logged?  */\n  public static get logExceptionCallstacks(): boolean {\n    return Logger._logExceptionCallstacks;\n  }\n\n  /** Compose the metadata for a log message.  */\n  public static makeMetaData(getMetaData?: GetMetaDataFunction): any {\n    const metaData: any = getMetaData ? Object.assign({}, getMetaData()) : {}; // Copy object to avoid mutating the original\n    Logger.addClientRequestContext(metaData);\n    return metaData;\n  }\n\n  /** Format the metadata for a log message.  */\n  private static formatMetaData(getMetaData?: GetMetaDataFunction): any {\n    if (!getMetaData)\n      return \"\";\n    return \" \" + JSON.stringify(Logger.makeMetaData(getMetaData));\n  }\n\n  /** Set the least severe level at which messages should be displayed by default. Call setLevel to override this default setting for specific categories. */\n  public static setLevelDefault(minLevel: LogLevel): void {\n    Logger._minLevel = minLevel;\n  }\n\n  /** Set the minimum logging level for the specified category. The minimum level is least severe level at which messages in the\n   * specified category should be displayed.\n   */\n  public static setLevel(category: string, minLevel: LogLevel) {\n    Logger._categoryFilter.set(category, minLevel);\n  }\n\n  /** Interpret a string as the name of a LogLevel */\n  public static parseLogLevel(str: string): LogLevel {\n    switch (str.toUpperCase()) {\n      case \"EXCEPTION\": return LogLevel.Error;\n      case \"FATAL\": return LogLevel.Error;\n      case \"ERROR\": return LogLevel.Error;\n      case \"WARNING\": return LogLevel.Warning;\n      case \"INFO\": return LogLevel.Info;\n      case \"TRACE\": return LogLevel.Trace;\n      case \"DEBUG\": return LogLevel.Trace;\n    }\n    return LogLevel.None;\n  }\n\n  /** Set the log level for multiple categories at once. Also see [[validateProps]] */\n  public static configureLevels(cfg: LoggerLevelsConfig) {\n    Logger.validateProps(cfg);\n    if (cfg.defaultLevel !== undefined) {\n      this.setLevelDefault(Logger.parseLogLevel(cfg.defaultLevel));\n    }\n    if (cfg.categoryLevels !== undefined) {\n      for (const cl of cfg.categoryLevels) {\n        this.setLevel(cl.category, Logger.parseLogLevel(cl.logLevel));\n      }\n    }\n  }\n\n  private static isLogLevel(v: any) {\n    return LogLevel.hasOwnProperty(v);\n  }\n\n  /** Check that the specified object is a valid LoggerLevelsConfig. This is useful when reading a config from a .json file. */\n  public static validateProps(config: any) {\n    const validProps = [\"defaultLevel\", \"categoryLevels\"];\n    for (const prop of Object.keys(config)) {\n      if (!validProps.includes(prop))\n        throw new BentleyError(IModelStatus.BadArg, \"LoggerLevelsConfig - unrecognized property: \" + prop);\n      if (prop === \"defaultLevel\") {\n        if (!Logger.isLogLevel(config.defaultLevel))\n          throw new BentleyError(IModelStatus.BadArg, \"LoggerLevelsConfig.defaultLevel must be a LogLevel. Invalid value: \" + JSON.stringify(config.defaultLevel));\n      } else if (prop === \"categoryLevels\") {\n        const value = config[prop];\n        if (!Array.isArray(value))\n          throw new BentleyError(IModelStatus.BadArg, \"LoggerLevelsConfig.categoryLevels must be an array. Invalid value: \" + JSON.stringify(value));\n        for (const item of config[prop]) {\n          if (!item.hasOwnProperty(\"category\") || !item.hasOwnProperty(\"logLevel\"))\n            throw new BentleyError(IModelStatus.BadArg, \"LoggerLevelsConfig.categoryLevels - each item must be a LoggerCategoryAndLevel {category: logLevel:}. Invalid value: \" + JSON.stringify(item));\n          if (!Logger.isLogLevel(item.logLevel))\n            throw new BentleyError(IModelStatus.BadArg, \"LoggerLevelsConfig.categoryLevels - each item's logLevel property must be a LogLevel. Invalid value: \" + JSON.stringify(item.logLevel));\n        }\n      }\n    }\n  }\n\n  /** Get the minimum logging level for the specified category. */\n  public static getLevel(category: string): LogLevel | undefined {\n    // Prefer the level set for this category specifically\n    const minLevelForThisCategory = Logger._categoryFilter.get(category);\n    if (minLevelForThisCategory !== undefined)\n      return minLevelForThisCategory;\n\n    // Fall back on the level set for the parent of this category.\n    const parent = category.lastIndexOf(\".\");\n    if ((parent !== undefined) && (parent !== -1))\n      return Logger.getLevel(category.slice(0, parent));\n\n    // Fall back on the default level.\n    return Logger._minLevel;\n  }\n\n  /** Turns off the least severe level at which messages should be displayed by default.\n   * This turns off logging for all messages for which no category minimum level is defined.\n   */\n  public static turnOffLevelDefault(): void {\n    Logger._minLevel = undefined;\n  }\n\n  /** Turns off all category level filters previously defined with [[Logger.setLevel]].\n   */\n  public static turnOffCategories(): void {\n    Logger._categoryFilter.clear();\n  }\n\n  /** Check if messages in the specified category should be displayed at this level of severity. */\n  public static isEnabled(category: string, level: LogLevel): boolean {\n    const minLevel = Logger.getLevel(category);\n    return (minLevel !== undefined) && (level >= minLevel);\n  }\n\n  /** Log the specified message to the **error** stream.\n   * @param category  The category of the message.\n   * @param message  The message.\n   * @param metaData  Optional data for the message\n   */\n  public static logError(category: string, message: string, metaData?: GetMetaDataFunction): void {\n    if (Logger._logError && Logger.isEnabled(category, LogLevel.Error))\n      Logger._logError(category, message, metaData);\n  }\n\n  private static getExceptionMessage(err: Error): string {\n    let msg = err.toString();\n    if (Logger.logExceptionCallstacks && err.stack)\n      msg += \"\\n\" + err.stack;\n    return msg;\n  }\n\n  /** Log the specified exception. The special \"ExceptionType\" property will be added as metadata,\n   * in addition to any other metadata that may be supplied by the caller, unless the\n   * metadata supplied by the caller already includes this property.\n   * @param category  The category of the message.\n   * @param err  The exception object.\n   * @param log The logger output function to use - defaults to Logger.logError\n   * @param metaData  Optional data for the message\n   */\n  public static logException(category: string, err: Error, log: LogFunction = Logger.logError, metaData?: GetMetaDataFunction): void {\n    log(category, Logger.getExceptionMessage(err), () => {\n      const mdata = metaData ? metaData() : {};\n      if (!mdata.hasOwnProperty(\"ExceptionType\"))\n        mdata.ExceptionType = err.constructor.name;\n      return mdata;\n    });\n  }\n\n  /** Log the specified message to the **warning** stream.\n   * @param category  The category of the message.\n   * @param message  The message.\n   * @param metaData  Optional data for the message\n   */\n  public static logWarning(category: string, message: string, metaData?: GetMetaDataFunction): void {\n    if (Logger._logWarning && Logger.isEnabled(category, LogLevel.Warning))\n      Logger._logWarning(category, message, metaData);\n  }\n\n  /** Log the specified message to the **info** stream.\n   * @param category  The category of the message.\n   * @param message  The message.\n   * @param metaData  Optional data for the message\n   */\n  public static logInfo(category: string, message: string, metaData?: GetMetaDataFunction): void {\n    if (Logger._logInfo && Logger.isEnabled(category, LogLevel.Info))\n      Logger._logInfo(category, message, metaData);\n  }\n\n  /** Log the specified message to the **trace** stream.\n   * @param category  The category of the message.\n   * @param message  The message.\n   * @param metaData  Optional data for the message\n   */\n  public static logTrace(category: string, message: string, metaData?: GetMetaDataFunction): void {\n    if (Logger._logTrace && Logger.isEnabled(category, LogLevel.Trace))\n      Logger._logTrace(category, message, metaData);\n  }\n}\n\n/** Simple performance diagnostics utility.\n * It measures the time from construction to disposal. On disposal it logs the routine name along with\n * the duration in milliseconds.\n * It also logs the routine name at construction time so that nested calls can be disambiguated.\n *\n * The timings are logged using the log category **Performance** and log severity [[LogLevel.INFO]].\n * Enable those, if you want to capture timings.\n * @public\n */\nexport class PerfLogger implements IDisposable {\n  private static _severity: LogLevel = LogLevel.Info;\n\n  private _operation: string;\n  private _metaData?: GetMetaDataFunction;\n  private _startTimeStamp: number;\n\n  public constructor(operation: string, metaData?: GetMetaDataFunction) {\n    this._operation = operation;\n    this._metaData = metaData;\n\n    if (!Logger.isEnabled(BentleyLoggerCategory.Performance, PerfLogger._severity)) {\n      this._startTimeStamp = 0;\n      return;\n    }\n\n    Logger.logInfo(BentleyLoggerCategory.Performance, `${this._operation},START`, this._metaData);\n    this._startTimeStamp = new Date().getTime(); // take timestamp\n  }\n\n  private logMessage(): void {\n    const endTimeStamp: number = new Date().getTime();\n    if (!Logger.isEnabled(BentleyLoggerCategory.Performance, PerfLogger._severity))\n      return;\n\n    Logger.logInfo(BentleyLoggerCategory.Performance, `${this._operation},END`, () => {\n      const mdata = this._metaData ? this._metaData() : {};\n      return {\n        ...mdata, TimeElapsed: endTimeStamp - this._startTimeStamp,\n      };\n    });\n  }\n\n  public dispose(): void {\n    this.logMessage();\n  }\n}\n\n/** Helps with macro-substitution\n * @alpha Better name?\n */\nexport class EnvMacroSubst {\n  /** Replace macros delimited by ${} assuming that they refer to environment variables. */\n  public static replace(str: string, defaultValues?: any): string {\n    let startMacro;\n    let startNext = 0;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((startMacro = str.indexOf(\"${\", startNext)) !== -1) {\n      const endMacro = str.indexOf(\"}\", startMacro + 2);\n      if (endMacro === -1) {\n        startNext = startMacro + 2;\n        continue;\n      }\n      const envvar = str.slice(startMacro + 2, endMacro);\n\n      let subst = process.env[envvar];\n\n      if (subst === undefined) {\n        if ((defaultValues === undefined) || !defaultValues.hasOwnProperty(envvar)) {\n          startNext = endMacro + 1;\n          continue;\n        }\n        subst = defaultValues[envvar];\n      }\n      str = str.slice(0, startMacro) + subst + str.slice(endMacro + 1);\n      startNext += startMacro + subst!.length;\n    }\n    return str;\n  }\n\n  /** Check if the string contains ${}, indicating the presence of a macro. */\n  public static containsEnvvars(str: string): boolean {\n    return str.includes(\"${\") && str.includes(\"}\");\n  }\n\n  /** Replace macros delimited by ${} that are found in any of the object's properties */\n  public static replaceInProperties(obj: any, recurse: boolean, defaultValues?: any): void {\n    for (const prop of Object.keys(obj)) {\n      if (typeof obj[prop] === \"string\") {\n        if (EnvMacroSubst.containsEnvvars(obj[prop]))\n          obj[prop] = EnvMacroSubst.replace(obj[prop], defaultValues);\n      } else if (recurse && (typeof obj[prop] === \"object\")) {\n        EnvMacroSubst.replaceInProperties(obj[prop], true, defaultValues);\n      }\n    }\n  }\n\n  /** Check if the string contains ${}, indicating the presence of a macro. */\n  public static anyPropertyContainsEnvvars(obj: any, recurse: boolean): boolean {\n    for (const prop of Object.keys(obj)) {\n      if (typeof obj[prop] === \"string\") {\n        if (EnvMacroSubst.containsEnvvars(obj[prop]))\n          return true;\n      } else if (recurse && (typeof obj[prop] === \"object\")) {\n        if (EnvMacroSubst.anyPropertyContainsEnvvars(obj[prop], true))\n          return true;\n      }\n    }\n    return false;\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Collections */\n\nimport { CloneFunction, shallowClone } from \"./SortedArray\";\nimport { OrderedComparator } from \"./Compare\";\n\n/** @public */\nexport type ComputePriorityFunction<T> = (value: T) => number;\n\n/**\n * A [priority queue](https://en.wikipedia.org/wiki/Priority_queue) implemented as a heap array.\n * The queue is ordered by an [[OrderedComparator]] function supplied by the user such that the value in the queue that compares less than all other values is always located at the front of the queue.\n * @public\n */\nexport class PriorityQueue<T> implements Iterable<T> {\n  protected _array: T[] = [];\n  protected readonly _compare: OrderedComparator<T>;\n  protected readonly _clone: CloneFunction<T>;\n\n  /**\n   * Constructor\n   * @param compare The function used to compare values in the queue. If `compare(x, y)` returns a negative value, then x is placed before y in the queue.\n   * @param clone The function used to clone a value for insertion onto the queue. The default implementation simply returns its input.\n   * @note If the criterion which control the result of the `compare` function changes, then [[PriorityQueue.sort]] should be used to reorder the queue according to the new criterion.\n   */\n  public constructor(compare: OrderedComparator<T>, clone: CloneFunction<T> = shallowClone) {\n    this._compare = compare;\n    this._clone = clone;\n  }\n\n  /** The number of values in the queue. */\n  public get length(): number { return this._array.length; }\n\n  /** Returns true if the queue contains no values. */\n  public get isEmpty(): boolean { return 0 === this.length; }\n\n  /** Returns an iterator over the contents of the heap suitable for use in `for-of` loops. */\n  public [Symbol.iterator](): Iterator<T> { return this._array[Symbol.iterator](); }\n\n  protected _swap(a: number, b: number) {\n    const temp = this._array[a];\n    this._array[a] = this._array[b];\n    this._array[b] = temp;\n  }\n\n  protected _heapify(index: number): void {\n    let candidate = -1;\n    while (true) {\n      const right = 2 * (index + 1);\n      const left = right - 1;\n      if (left < this.length && this._compare(this._array[left], this._array[index]) < 0)\n        candidate = left;\n      else\n        candidate = index;\n\n      if (right < this.length && this._compare(this._array[right], this._array[candidate]) < 0)\n        candidate = right;\n\n      if (candidate !== index) {\n        this._swap(candidate, index);\n        index = candidate;\n      } else {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Reorders the queue. This function should only (and *always*) be called when the criteria governing the ordering of items on the queue have changed.\n   * For example, a priority queue containing graphics sorted by their distance from the camera would need to be reordered when the position of the camera changes.\n   */\n  public sort(): void {\n    for (let i = Math.ceil(this.length / 2); i >= 0; i--)\n      this._heapify(i);\n  }\n\n  /**\n   * Pushes a value onto the queue according to the sorting criterion.\n   * @param value The value to insert\n   * @returns The inserted value, cloned according to the [[CloneFunction]] supplied to this queue's constructor.\n   */\n  public push(value: T): T {\n    const clone = this._clone(value);\n\n    let index = this.length;\n    this._array.push(clone);\n\n    while (index !== 0) {\n      const parent = Math.floor((index - 1) / 2);\n      if (this._compare(this._array[index], this._array[parent]) < 0) {\n        this._swap(index, parent);\n        index = parent;\n      } else {\n        break;\n      }\n    }\n\n    return clone;\n  }\n\n  /** Returns the element at the front of the queue, or `undefined` if the queue is empty. */\n  public get front(): T | undefined {\n    return this._peek(0);\n  }\n\n  /**\n   * Removes the front-most element off of the queue and returns it.\n   * @returns The front-most element, or undefined if the queue is empty.\n   */\n  public pop(): T | undefined {\n    return this._pop(0);\n  }\n\n  /** Removes all values from the queue. */\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  /**\n   * Removes the value at the specified index from the queue and reorders the queue.\n   * @param index The index of the value to remove\n   * @returns the value at the specified index, or undefined if the index is out of range.\n   */\n  protected _pop(index: number): T | undefined {\n    if (index < 0 || index >= this.length)\n      return undefined;\n\n    const root = this._array[index];\n    this._swap(index, this.length - 1);\n    this._array.length--;\n\n    this._heapify(index);\n    return root;\n  }\n\n  /**\n   * Returns the value at the specified index in the queue.\n   * @param index The index of the value to retrieve\n   * @returns the value at the specified index, or undefined if the index is out of range.\n   */\n  protected _peek(index: number): T | undefined {\n    if (index < 0 || index >= this.length)\n      return undefined;\n    else\n      return this._array[index];\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Collections */\n\nimport { OrderedComparator } from \"./Compare\";\n\n/**\n * A function that, given a value of type T, returns a copy of that value. Such functions are used by various collection classes in the iModel.js library.\n * It is up to the function to decide how deeply or shallowly the value is cloned. For example, [[shallowClone]] simply returns the input.\n * @public\n */\nexport type CloneFunction<T> = (value: T) => T;\n\n/**\n * A [[CloneFunction]] that, given a value of type T, returns the same value.\n * Useful as a default argument for functions that can alternatively accept custom logic for cloning values of object type.\n * @param value The value to clone.\n * @returns the input value.\n * @public\n */\nexport function shallowClone<T>(value: T) { return value; }\n\n/**\n * Given a sorted array, computes the position at which the specified value should be inserted into the array so that the array remains sorted.\n * @param value The value whose position is to be computed.\n * @param list An array of U already sorted according to the comparison criterion.\n * @param compare The function used to compare the value with elements in `list`.\n * @returns an object with 'index' corresponding to the computed position and 'equal' set to true if an equivalent element already exists at that index.\n * @public\n */\nexport function lowerBound<T, U = T>(value: T, list: U[], compare: OrderedComparator<T, U>): { index: number, equal: boolean } {\n  let low = 0;\n  let high = list.length;\n  while (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    const comp = compare(value, list[mid]);\n    if (0 === comp)\n      return { index: mid, equal: true };\n    else if (comp < 0)\n      high = mid;\n    else\n      low = mid + 1;\n  }\n\n  return { index: low, equal: false };\n}\n\n/**\n * Maintains an array of some type T in sorted order. The ordering is specified by a function supplied\n * by the user.\n * By default, only unique elements are permitted; attempting to insert a new element that compares\n * as equal to an element already in the array will not modify the contents of the array.\n *\n * This allows a SortedArray<T> to behave like a Set<T> where T is an object and equality is determined\n * by some criterion other than object identity.\n *\n * Because the array is always sorted, querying for the presence of an element is performed using binary\n * search, which is more efficient than a linear search for reasonably large arrays.\n *\n * The user can also specify how the SortedArray takes ownership of inserted values, e.g., by cloning them.\n *\n * The comparison function must meet the following criteria, given 'lhs' and 'rhs' of type T:\n *  - If lhs is equal to rhs, returns 0\n *  - If lhs is less than rhs, returns a negative value\n *  - If lhs is greater than rhs, returns a positive value\n *  - If compare(lhs, rhs) returns 0, then compare(rhs, lhs) must also return 0\n *  - If compare(lhs, rhs) returns a negative value, then compare(rhs, lhs) must return a positive value, and vice versa.\n *\n * Modifying an element in a way that affects the comparison function will produce unpredictable results, the\n * most likely of which is that the array will cease to be sorted.\n * @public\n */\nexport class SortedArray<T> implements Iterable<T> {\n  protected _array: T[] = [];\n  protected readonly _compare: OrderedComparator<T>;\n  protected readonly _clone: CloneFunction<T>;\n  protected readonly _allowDuplicates: boolean;\n\n  /**\n   * Construct a new SortedArray<T>.\n   * @param compare The function used to compare elements within the array.\n   * @param allowDuplicates If true, multiple values comparing equal may exist in the array.\n   * @param clone The function invoked to clone a new element for insertion into the array. The default implementation simply returns its input.\n   */\n  public constructor(compare: OrderedComparator<T>, allowDuplicates: boolean = false, clone: CloneFunction<T> = shallowClone) {\n    this._compare = compare;\n    this._clone = clone;\n    this._allowDuplicates = allowDuplicates;\n  }\n\n  /** The number of elements in the array */\n  public get length(): number { return this._array.length; }\n\n  /** Returns true if the array contains no elements. */\n  public get isEmpty(): boolean { return 0 === this.length; }\n\n  /** Clears the contents of the sorted array. */\n  public clear(): void { this._array.length = 0; }\n\n  /** Returns an iterator over the contents of the array in sorted order, suitable for use in `for-of` loops. */\n  public [Symbol.iterator](): Iterator<T> { return this._array[Symbol.iterator](); }\n\n  /** Extracts the sorted array as a T[] and empties the contents of this SortedArray.\n   * @returns the contents of this SortedArray as a T[].\n   */\n  public extractArray(): T[] {\n    const result = this._array;\n    this._array = [];\n    return result;\n  }\n\n  /**\n   * Attempts to insert a new value into the array at a position determined by the ordering.\n   * The behavior differs based on whether or not duplicate elements are permitted.\n   * If duplicates are **not** permitted, then:\n   *  - If an equivalent element already exists in the array, nothing will be inserted and the index of the existing element will be returned.\n   *  - Otherwise, the element is inserted and its index is returned.\n   * If duplicates **are** permitted, then:\n   *  - The element will be inserted in a correct position based on the sorting criterion;\n   *  - The position of the element relative to other elements comparing as equal to it is unspecified; and\n   *  - The actual index of the newly-inserted element is returned.\n   * If the element is to be inserted, then the supplied value will be passed to the clone function supplied to the constructor and the result will be inserted into the array.\n   * @param value The value to insert\n   * @param onInsert The optional callback method to call if insertion occurs with the inserted value\n   * @returns the index in the array of the newly-inserted value, or, if duplicates are not permitted and an equivalent value already exists, the index of the equivalent value.\n   */\n  public insert(value: T, onInsert?: (value: T) => any): number {\n    const bound = this.lowerBound(value);\n\n    if (!bound.equal || this._allowDuplicates)\n      this._array.splice(bound.index, 0, this._clone(value));\n\n    if (undefined !== onInsert)\n      onInsert(value);\n\n    return bound.index;\n  }\n\n  /**\n   * Removes the first occurrence of a value comparing equal to the specified value from the array.\n   * @param value The value of the element to delete\n   * @returns the index of the deleted value, or -1 if no such element exists.\n   */\n  public remove(value: T): number {\n    const bound = this.lowerBound(value);\n    if (bound.equal) {\n      this._array.splice(bound.index, 1);\n      return bound.index;\n    } else {\n      return -1;\n    }\n  }\n\n  /**\n   * Looks up the index of an element comparing equal to the specified value using binary search.\n   * @param value The value to search for\n   * @returns the index of the first equivalent element in the array, or -1 if no such element exists.\n   */\n  public indexOf(value: T): number {\n    const bound = this.lowerBound(value);\n    return bound.equal ? bound.index : -1;\n  }\n\n  /**\n   * Returns true if this array contains at least one value comparing equal to the specified value.\n   * @param value The value to search for\n   * @returns true if an equivalent element exists in the array.\n   */\n  public contains(value: T): boolean {\n    return -1 !== this.indexOf(value);\n  }\n\n  /**\n   * Looks up an element comparing equal to the specified value using binary search.\n   * @param value The value to search for\n   * @returns the first equivalent element in the array, or undefined if no such element exists.\n   */\n  public findEqual(value: T): T | undefined {\n    const index = this.indexOf(value);\n    return -1 !== index ? this._array[index] : undefined;\n  }\n\n  /**\n   * Looks up an element by its index in the array.\n   * @param index The array index\n   * @returns the element corresponding to that position in the array, or undefined if the supplied index exceeds the length of the array.\n   */\n  public get(index: number): T | undefined { return index < this.length ? this._array[index] : undefined; }\n\n  /** Apply a function to each element in the array, in sorted order.\n   * @param func The function to be applied.\n   */\n  public forEach(func: (value: T) => void): void {\n    for (let i = 0; i < this.length; i++)\n      func(this._array[i]);\n  }\n\n  /**\n   * Computes the position at which the specified value should be inserted to maintain sorted order.\n   * @param value The value whose position is to be computed.\n   * @returns an object with 'index' corresponding to the computed position and 'equal' set to true if an equivalent element already exists at that index.\n   */\n  protected lowerBound(value: T): { index: number, equal: boolean } { return lowerBound(value, this._array, this._compare); }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n// TextDecoder is not supported on all platforms - this is an alternative for utf-8.\n// From https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Core/getStringFromTypedArray.js\n// which is itself inspired by https://github.com/inexorabletash/text-encoding\n/** @internal */\nnamespace Utf8ToString {\n  function inRange(a: number, min: number, max: number): boolean { return min <= a && a <= max; }\n\n  function utf8Handler(bytes: Uint8Array): number[] | undefined {\n    let codePoint = 0;\n    let bytesSeen = 0;\n    let bytesNeeded = 0;\n    let lowerBoundary = 0x80;\n    let upperBoundary = 0xbf;\n\n    const codePoints: number[] = [];\n    const length = bytes.length;\n    for (let i = 0; i < length; i++) {\n      const currentByte = bytes[i];\n\n      // If bytesNeeded = 0, then we are starting a new character\n      if (0 === bytesNeeded) {\n        // 1 byte ascii character\n        if (inRange(currentByte, 0x00, 0x7f)) {\n          // return a code point whose value is byte.\n          codePoints.push(currentByte);\n          continue;\n        }\n\n        // 2 byte character\n        if (inRange(currentByte, 0xc2, 0xdf)) {\n          bytesNeeded = 1;\n          codePoint = currentByte & 0x1f;\n          continue;\n        }\n\n        // 3 byte character\n        if (inRange(currentByte, 0xe0, 0xef)) {\n          if (0xe0 === currentByte)\n            lowerBoundary = 0xa0;\n          else if (0xed === currentByte)\n            upperBoundary = 0x9f;\n\n          bytesNeeded = 2;\n          codePoint = currentByte & 0xf;\n          continue;\n        }\n\n        // 4 byte character\n        if (inRange(currentByte, 0xf0, 0xf4)) {\n          if (0xf0 === currentByte)\n            lowerBoundary = 0x90;\n          else if (0xf4 === currentByte)\n            upperBoundary = 0x8f;\n\n          bytesNeeded = 3;\n          codePoint = currentByte & 0x7;\n          continue;\n        }\n\n        // invalid utf-8\n        return undefined;\n      }\n\n      // out of range so ignore the first part(s) of the character and continue with this byte on its own\n      if (!inRange(currentByte, lowerBoundary, upperBoundary)) {\n        codePoint = bytesNeeded = bytesSeen = 0;\n        lowerBoundary = 0x80;\n        upperBoundary = 0xbf;\n        --i;\n        continue;\n      }\n\n      // set appropriate boundaries since we've now checked byte 2 of a potential longer character\n      lowerBoundary = 0x80;\n      upperBoundary = 0xbf;\n\n      // add byte to code point\n      codePoint = (codePoint << 6) | (currentByte & 0x3f);\n\n      // We have the correct number of bytes, so push and reset for next character\n      ++bytesSeen;\n      if (bytesSeen === bytesNeeded) {\n        codePoints.push(codePoint);\n        codePoint = bytesNeeded = bytesSeen = 0;\n      }\n    }\n\n    return codePoints;\n  }\n\n  export function decodeWithFromCharCode(view: Uint8Array): string | undefined {\n    let result = \"\";\n    const codePoints = utf8Handler(view);\n    if (undefined === codePoints)\n      return undefined;\n\n    for (let cp of codePoints) {\n      if (cp <= 0xffff) {\n        result += String.fromCharCode(cp);\n      } else {\n        cp -= 0x10000;\n        result += String.fromCharCode((cp >> 10) + 0xd800, (cp & 0x3ff) + 0xdc00);\n      }\n    }\n\n    return result;\n  }\n}\n\n/** Exposed only for testing the fall-back used when TextDecoder is unsupported.\n * @internal\n */\nexport function utf8ToStringPolyfill(utf8: Uint8Array): string | undefined {\n  return Utf8ToString.decodeWithFromCharCode(utf8);\n}\n\n// TextDecoder unsupported in Edge at time of writing.\nlet textDecoderSupported = true;\n\n/** Given an array of bytes containing a utf-8 string, convert to a string.\n * @param utf8: An array of utf-8 characters as a byte array\n * @returns An equivalent string, or undefined if the array does not contain a valid utf-8 string.\n * @note This function uses Javascript's TextDecoder if supported by the browser; otherwise, it\n * falls back to a less efficient polyfill.\n * @public\n */\nexport function utf8ToString(utf8: Uint8Array): string | undefined {\n  let decoder: TextDecoder | undefined;\n  if (textDecoderSupported) {\n    try {\n      decoder = new TextDecoder(\"utf-8\");\n    } catch (_ex) {\n      textDecoderSupported = false;\n    }\n  }\n\n  if (undefined !== decoder)\n    return decoder.decode(utf8);\n  else\n    return utf8ToStringPolyfill(utf8);\n}\n\n/** Given a base-64-encoded string, decode it into an array of bytes.\n * @param base64 The base-64-encoded string.\n * @returns the decoded byte array.\n * @throws DOMException if the length of the input string is not a multiple of 4.\n * @public\n */\nexport function base64StringToUint8Array(base64: string): Uint8Array {\n  return new Uint8Array(atob(base64).split(\"\").map((c) => c.charCodeAt(0)));\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\n/** @module Utils */\n\n/** A duration of time. Can be either positive (towards future) or negative (in the past).\n * BeDurations are immutable.\n * @public\n */\nexport class BeDuration {\n  private readonly _milliseconds: number;\n  private constructor(milliseconds: number = 0) { this._milliseconds = milliseconds; }\n\n  /** The duration in milliseconds */\n  public get milliseconds() { return this._milliseconds; }\n  public get seconds() { return this._milliseconds / 1000; }\n\n  /** Create a BeDuration from seconds.\n   * @param seconds the number of seconds for this BeDuration\n   */\n  public static fromSeconds(seconds: number) { return new BeDuration(seconds * 1000); }\n  /** Create a BeDuration from milliseconds.\n   * @param milliseconds the number of milliseconds for this BeDuration\n   */\n  public static fromMilliseconds(milliseconds: number) { return new BeDuration(milliseconds); }\n  /** Determine whether this BeDuration is 0 seconds */\n  public get isZero() { return this._milliseconds === 0; }\n  /** Determine whether this BeDuration is towards the future */\n  public get isTowardsFuture(): boolean { return this._milliseconds > 0; }\n  /** Determine whether this BeDuration is towards the past */\n  public get isTowardsPast(): boolean { return this._milliseconds < 0; }\n  /** Subtract a BeDuration from this BeDuration, returning a new BeDuration. */\n  public minus(other: BeDuration): BeDuration { return new BeDuration(this._milliseconds - other._milliseconds); }\n  /** Add a BeDuration to this BeDuration, returning a new BeDuration */\n  public plus(other: BeDuration): BeDuration { return new BeDuration(this._milliseconds + other._milliseconds); }\n\n  /** Utility function to just wait for the specified time\n   * @param ms Duration in milliseconds to wait\n   * @return Promise that resolves after the specified wait period\n   */\n  public static async wait(ms: number): Promise<void> {\n    return new Promise<void>((resolve: any) => setTimeout(resolve, ms));\n  }\n}\n\n/** A specific point in time relative to the current time.\n * BeTimePoints are used for timing operations. They are created from a BeDuration relative to the \"now\".\n * BeTimePoints are immutable.\n * @public\n */\nexport class BeTimePoint {\n  private readonly _milliseconds: number;\n  /** the time in milliseconds, of this BeTimePoint (relative to January 1, 1970 00:00:00 UTC.) */\n  public get milliseconds() { return this._milliseconds; }\n  private constructor(milliseconds: number) { this._milliseconds = milliseconds; }\n\n  /** Create a BeTimePoint from Date.now() */\n  public static now() { return new BeTimePoint(Date.now()); }\n\n  /** Create a BeTimePoint at a specified duration in the future from now\n   *  @param val the duration from now\n   */\n  public static fromNow(val: BeDuration) { return new BeTimePoint(Date.now() + val.milliseconds); }\n\n  /** Create a BeTimePoint at a specified duration in the past before now\n   * @param val the duration before now\n   */\n  public static beforeNow(val: BeDuration) { return new BeTimePoint(Date.now() - val.milliseconds); }\n\n  /** Determine whether this BeTimePoint is a time in the future from the time this method is called (it calls now()!) */\n  public get isInFuture(): boolean { return Date.now() < this._milliseconds; }\n\n  /** Determine whether this BeTimePoint is a time that has already passed before the time this method is called (it calls now()!) */\n  public get isInPast(): boolean { return Date.now() > this._milliseconds; }\n\n  /** Determine whether this BeTimePoint happens before another one.\n   * @param other the other BeTimePoint.\n   */\n  public before(other: BeTimePoint): boolean { return this._milliseconds < other._milliseconds; }\n\n  /** Determine whether this BeTimePoint happens after another one.\n   * @param other the other BeTimePoint.\n   */\n  public after(other: BeTimePoint): boolean { return this._milliseconds > other._milliseconds; }\n\n  /** Subtract a BeDuration from this BeTimePoint, returning a new BeTimePoint. This moves this BeTimePoint backwards in time if BeDuration.isTowardsFuture() === true\n   * @param duration the duration to subtract.\n   */\n  public minus(duration: BeDuration): BeTimePoint { return new BeTimePoint(this._milliseconds - duration.milliseconds); }\n\n  /** Subtract a BeDuration from this BeTimePoint, returning a new BeTimePoint. This moves this BeTimePoint backwards in time if BeDuration.isTowardsFuture() === true\n   * @param duration the duration to subtract.\n   */\n  public plus(duration: BeDuration) { return new BeTimePoint(this._milliseconds + duration.milliseconds); }\n}\n\n/** A StopWatch for timing operations.\n * @public\n */\nexport class StopWatch {\n  private _start?: BeTimePoint;\n  private _stop?: BeTimePoint;\n  /** Get the elapsed time since start() on a running timer. */\n  public get current(): BeDuration { return BeDuration.fromMilliseconds(BeTimePoint.now().milliseconds - (!!this._start ? this._start.milliseconds : 0)); }\n  /** Get the elapsed time, in seconds, since start() on a running timer. */\n  public get currentSeconds(): number { return this.current.seconds; }\n  /** Get the elapsed time between start() and stop() on this timer. */\n  public get elapsed(): BeDuration { return BeDuration.fromMilliseconds((!!this._stop ? this._stop.milliseconds : BeTimePoint.now().milliseconds) - (!!this._start ? this._start.milliseconds : 0)); }\n  /** Get the elapsed time, in seconds, between start() and stop() on this  timer. */\n  public get elapsedSeconds(): number { return this.elapsed.seconds; }\n  /** ctor for StopWatch\n   * @param description optional string stored with the StopWatch\n   * @param startImmediately if true, StopWatch is started when created. Otherwise, call start() explicitly.\n   */\n  constructor(public description?: string, startImmediately = false) { if (startImmediately) this.start(); }\n  /** Start the stopwatch. Any future time measurements will be based on this new value. */\n  public start(): void { this.reset(); this._start = BeTimePoint.now(); }\n  /** Stop the stopwatch so that the duration can be viewed later. */\n  public stop(): BeDuration { this._stop = BeTimePoint.now(); return this.elapsed; }\n  /** Clear the StopWatch */\n  public reset(): void { this._start = this._stop = undefined; }\n}\n","/*---------------------------------------------------------------------------------------------\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\n*--------------------------------------------------------------------------------------------*/\nexport * from \"./Assert\";\nexport * from \"./BeEvent\";\nexport * from \"./BentleyError\";\nexport * from \"./BeSQLite\";\nexport * from \"./Compare\";\nexport * from \"./Dictionary\";\nexport * from \"./Disposable\";\nexport * from \"./Id\";\nexport * from \"./IndexMap\";\nexport * from \"./JsonUtils\";\nexport * from \"./Logger\";\nexport * from \"./BentleyLoggerCategory\";\nexport * from \"./ClientRequestContext\";\nexport * from \"./LRUMap\";\nexport * from \"./SortedArray\";\nexport * from \"./StringUtils\";\nexport * from \"./Time\";\nexport * from \"./PriorityQueue\";\n\n// Set the version number so it can be found at runtime. BUILD_SEMVER is replaced at build time by the webpack DefinePlugin.\ndeclare var BUILD_SEMVER: string;\nif ((typeof (BUILD_SEMVER) !== \"undefined\") && (typeof window !== \"undefined\") && window) {\n  if (!(window as any).iModelJsVersions)\n    (window as any).iModelJsVersions = new Map<string, string>();\n  (window as any).iModelJsVersions.set(\"bentleyjs-core\", BUILD_SEMVER);\n}\n\n/** @module Utils */\n\n/** @docs-package-description\n * The bentleyjs-core package contains classes to solve problems that are common for both client and server use cases.\n */\n/**\n * @docs-group-description BeSQLite\n * Classes for working with SQLite databases. SQLite underlies IModelDb and ECDb - see [Executing ECSQL]($docs/learning/ECSQL.md)\n */\n/**\n * @docs-group-description Errors\n * Classes for working with errors.\n */\n/**\n * @docs-group-description Events\n * Classes for raising and handling events.\n */\n/**\n * @docs-group-description Ids\n * Classes for working with unique identifiers.\n */\n/**\n * @docs-group-description Logging\n * Classes for configuring and logging diagnostic messages - see [Learning about Logging]($docs/learning/common/Logging.md)\n */\n/**\n * @docs-group-description Collections\n * Specialized, customizable collection classes like priority queues.\n */\n/**\n * @docs-group-description Utils\n * Miscellaneous utility classes.\n */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvLA;;;AAGA;AACA;;AAEA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;AChBA;;;AAGA;AACA;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AAuGA;AArGA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzGA;AA2GA;;AAEA;AACA;AAEA;AACA;AACA;AAJA;AAMA;;;;AAIA;AACA;AAAA;AACA;AAwBA;AAtBA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAzBA;;;;;;;;;;;;;;AC9IA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7LA;;;AAGA;AACA;;AAEA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAghVA;;;;;;;;;;;;;;ACvVA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;ACbA;;;AAGA;AACA;;AAEA;AAmBA;;;;;;;;AAQA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzBA;AAxBA;;;;;;;;;;;;;;AClCA;;;AAGA;AACA;;AAwBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAPA;AASA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAPA;AASA;AACA;AAAA;AAEA;AACA;AAAA;;;;;;;;;;;;;;AChEA;;;AAGA;AACA;;AAEA;AAGA;AAKA;AAFA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;;;;;;;;;;;;;AAaA;AACA;AAOA;;;;;AAKA;AACA;AAZA;AAGA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AA1IA;;;;;;;;;;;;;;ACzDA;;;AAGA;AACA;;AAwBA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AATA;AAWA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAlBA;AAyBA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnCA;;;;;;;;;;;;;;AC5GA;;;AAGA;AACA;;AA4BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAZA;AAcA;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AAHA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AAQA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAfA;AAiBA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AATA;AAWA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAPA;AASA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;AAIA;AACA;AACA;AACA;AAFA;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAtCA;AAwCA;;;;AAIA;AACA;AAAA;AAEA;;;AAGA;AACA;AAAA;AAEA;;AAEA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AAGA;;AAEA;AACA;AALA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;AAuGA;;;AAGA;AACA;AAAA;AACA;AA2CA;AAzCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AA6CA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AAIA;AAFA;AACA;AACA;AALA;AAOA;;;;;;AAMA;AACA;AAAA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;;;;;;;;;;;;;;ACtqBA;;;AAGA;AACA;;AAEA;AAGA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;;AAKA;AACA;AAMA;;;;;AAKA;AACA;AAXA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AArEA;;;;;;;;;;;;;;AC5BA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AAAA;AACA;;;;AAIA;AACA;AAAA;AACA;;;;AAIA;AACA;AAAA;AACA;;;;AAIA;AACA;AAAA;AACA;;;;AAIA;AACA;AAAA;AAEA;;;AAGA;AACA;AAAA;AAEA;;;AAGA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AAAA;;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AAAA;;AAAA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA3BA;AA6BA;;;;;;;;;;;;;;ACpHA;;;AAGA;AACA;;AAGA;AAEA;;;;AAIA;AAEA;;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AAezPA;AA2PA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAPA;AASA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;;;;;;AC9WA;;;AAGA;AACA;;AAEA;AAEA;AACA;AAOA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;AAGA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AA9OA;AACA;AACA;AAPA;AAsPA;;;;;;;;AAQA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;;AAlCA;AADA;AAsCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;;;;;;;;;;;;;;;AC5VA;;;AAGA;AACA;;AAEA;AAMA;;;;AAIA;AACA;AAKA;;;;;AAKA;AACA;AAVA;AAWA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AApIA;;;;;;;;;;;;;;ACjBA;;;AAGA;AACA;;AAWA;;;;;;AAMA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAfA;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AAMA;;;;;AAKA;AACA;AAXA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAnIA;;;;;;;;;;;;;;AC1EA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAhBA;AAiBA;AAEA;;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAdA;AAgBA;;;;;AAKA;AACA;AACA;AACA;AAFA;;;;;;;;;;;;;;AC1JA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;;;;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AA5CA;AA8CA;;AAEA;AACA;AAWA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;;;;;;;;;;;;;;;;;;ACpGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;;;;A","sourceRoot":""}